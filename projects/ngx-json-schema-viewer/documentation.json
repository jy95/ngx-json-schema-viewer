{
    "pipes": [],
    "interfaces": [
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "projects/ngx-json-schema-viewer/src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "JSVOptionsService",
            "id": "injectable-JSVOptionsService-15d644cfded02164ff8ab12243af95c44fb97ad7eea366ce1099fcaac6085b4192eaf62fceee32d1f5324ffaac7cad0fda9fba2d6086caab21e3d3714f0a61db",
            "file": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
            "properties": [
                {
                    "name": "options",
                    "defaultValue": "{\r\n        showExamples: false,\r\n        qualifierMessagesOrder: [\r\n            \"nullable\",\r\n            \"deprecated\",\r\n            \"readOnly\",\r\n            \"writeOnly\",\r\n            \"enum\",\r\n            \"stringLength\",\r\n            \"objectProperties\",\r\n            \"no-extra-properties\",\r\n            \"arrayItems\",\r\n            \"arrayContains\",\r\n            \"no-extra-items\",\r\n            \"number-range\",\r\n            \"pattern\",\r\n            \"multipleOf\",\r\n            \"uniqueItems\",\r\n            \"contentEncoding\",\r\n            \"contentMediaType\",\r\n            \"contentSchema\",\r\n            \"default\",\r\n            \"const\",\r\n            \"examples\"\r\n        ]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JSVOptions",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getDefaultQualifierMessageOrder",
                    "args": [],
                    "optional": false,
                    "returnType": "CheckKey[]",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "JSVOptions",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nexport type CheckKey =\r\n  | \"nullable\"\r\n  | \"deprecated\"\r\n  | \"readOnly\"\r\n  | \"writeOnly\"\r\n  | \"enum\"\r\n  | \"stringLength\"\r\n  | \"objectProperties\"\r\n  | \"no-extra-properties\"\r\n  | \"arrayItems\"\r\n  | \"arrayContains\"\r\n  | \"no-extra-items\"\r\n  | \"number-range\"\r\n  | \"pattern\"\r\n  | \"multipleOf\"\r\n  | \"uniqueItems\"\r\n  | \"default\"\r\n  | \"const\"\r\n  | \"examples\"\r\n  | \"contentMediaType\"\r\n  | \"contentEncoding\"\r\n  | \"contentSchema\"\r\n\r\nexport type JSVOptions = {\r\n    /**\r\n     * Should we display \"examples\" ?\r\n     * @default false\r\n     */\r\n    showExamples?: boolean\r\n    /**\r\n     * To overwrite the order to display qualifier messages\r\n     * @default [\"nullable\",\"deprecated\",\"readOnly\",\"writeOnly\",\"enum\",\"stringLength\",\"objectProperties\",\"no-extra-properties\",\"arrayItems\",\"arrayContains\",\"no-extra-items\",\"number-range\",\"pattern\",\"multipleOf\",\"uniqueItems\",\"contentEncoding\",\"contentMediaType\",\"contentSchema\",\"default\",\"const\",\"examples\"]\r\n     */\r\n    qualifierMessagesOrder?: CheckKey[]\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class JSVOptionsService {\r\n    private options: JSVOptions = {\r\n        showExamples: false,\r\n        qualifierMessagesOrder: [\r\n            \"nullable\",\r\n            \"deprecated\",\r\n            \"readOnly\",\r\n            \"writeOnly\",\r\n            \"enum\",\r\n            \"stringLength\",\r\n            \"objectProperties\",\r\n            \"no-extra-properties\",\r\n            \"arrayItems\",\r\n            \"arrayContains\",\r\n            \"no-extra-items\",\r\n            \"number-range\",\r\n            \"pattern\",\r\n            \"multipleOf\",\r\n            \"uniqueItems\",\r\n            \"contentEncoding\",\r\n            \"contentMediaType\",\r\n            \"contentSchema\",\r\n            \"default\",\r\n            \"const\",\r\n            \"examples\"\r\n        ]\r\n    }\r\n\r\n    getOptions(): JSVOptions {\r\n        return this.options;\r\n    }\r\n\r\n    getDefaultQualifierMessageOrder(): CheckKey[] {\r\n        return [\r\n            \"nullable\",\r\n            \"deprecated\",\r\n            \"readOnly\",\r\n            \"writeOnly\",\r\n            \"enum\",\r\n            \"stringLength\",\r\n            \"objectProperties\",\r\n            \"no-extra-properties\",\r\n            \"arrayItems\",\r\n            \"arrayContains\",\r\n            \"no-extra-items\",\r\n            \"number-range\",\r\n            \"pattern\",\r\n            \"multipleOf\",\r\n            \"uniqueItems\",\r\n            \"contentEncoding\",\r\n            \"contentMediaType\",\r\n            \"contentSchema\",\r\n            \"default\",\r\n            \"const\",\r\n            \"examples\"\r\n        ]\r\n    }\r\n}",
            "type": "injectable"
        },
        {
            "name": "SchemaResolutionService",
            "id": "injectable-SchemaResolutionService-5f8aaf0fe6af184844c88c7095b8b73f1beabb13e9bb1825f615b5600e77a780e6acf3f93eace573f1c9de5e721c4e7f722d81f8c063a1fb470e67eacbedf3e4",
            "file": "projects/ngx-json-schema-viewer/src/lib/services/schema-resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolveSchema",
                    "args": [
                        {
                            "name": "schema",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "resolverOptions",
                            "type": "IResolveOpts",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<JSONSchema>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "schema",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "resolverOptions",
                            "type": "IResolveOpts",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Resolver } from '@stoplight/json-ref-resolver';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport type { IResolveOpts } from \"@stoplight/json-ref-resolver/types\"\r\nimport type { JSONSchema } from \"../types\";\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class SchemaResolutionService {\r\n\r\n    resolveSchema(schema: unknown, resolverOptions?: IResolveOpts): Observable<JSONSchema> {\r\n        return new Observable((observer) => {\r\n          new Resolver()\r\n            .resolve(schema, resolverOptions)\r\n            .then((result) => {\r\n              observer.next(result.result);\r\n              observer.complete();\r\n            })\r\n            .catch((err) => {\r\n              observer.error(err);\r\n            });\r\n        });\r\n    }\r\n}",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AllOfSchemaComponent",
            "id": "component-AllOfSchemaComponent-96cd8ed81cbb4cac181d5ec2af6d3db456b7aa6559ba6537539065c5f5309a4327a54c79431f638ae3bd33672b1ae7b0e6236bf921dc9e1d4905ba9feb805972",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/all-of.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-composition-all-of",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span class=\"badge badge--info\">{{ typeOf }}</span>\n  <mat-tab-group>\n    <mat-tab *ngFor=\"let compositeSchema of typedSchema\">\n      <ng-template mat-tab-label>\n        <jsv-friendly-name [schema]=\"compositeSchema\" />\n      </ng-template>\n      <jse-common-create-nodes [schema]=\"compositeSchema\" />\n    </mat-tab>\n  </mat-tab-group>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 29,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "GenerateFriendlyNameComponent",
                    "type": "component"
                },
                {
                    "name": "CreateNodesComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\n\r\nimport { GenerateFriendlyNameComponent } from \"../../utils/index\";\r\nimport { CreateNodesComponent } from \"../../common/create-nodes\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-composition-all-of',\r\n  standalone: true,\r\n  imports: [CommonModule, MatTabsModule, GenerateFriendlyNameComponent, CreateNodesComponent],\r\n  template: `\r\n    <div>\r\n      <span class=\"badge badge--info\">{{ typeOf }}</span>\r\n      <mat-tab-group>\r\n        <mat-tab *ngFor=\"let compositeSchema of typedSchema\">\r\n          <ng-template mat-tab-label>\r\n            <jsv-friendly-name [schema]=\"compositeSchema\" />\r\n          </ng-template>\r\n          <jse-common-create-nodes [schema]=\"compositeSchema\" />\r\n        </mat-tab>\r\n      </mat-tab-group>\r\n    </div>\r\n  `,\r\n})\r\nexport class AllOfSchemaComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): JSONSchema[] {\r\n    return this.schema.allOf! as JSONSchema[];\r\n  }\r\n\r\n  get typeOf(): string {\r\n    return \"allOf\";\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 31
                    }
                },
                "typeOf": {
                    "name": "typeOf",
                    "getSignature": {
                        "name": "typeOf",
                        "type": "string",
                        "returnType": "string",
                        "line": 35
                    }
                }
            }
        },
        {
            "name": "AndLabelComponent",
            "id": "component-AndLabelComponent-0222b37bdb5b12e7009ce3a6201f860ffb25e08ed3a915001656ca0db81f6454166bb8eaed5d2f01f34eceddfe7a31accd4475f12623be2612f4a0c5126c3120",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/and-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-and",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n<strong>AND</strong>\n<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n\n<ng-template #spaceTemplate>\n  &nbsp;\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-and',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n    <strong>AND</strong>\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n\r\n    <ng-template #spaceTemplate>\r\n      &nbsp;\r\n    </ng-template>\r\n  `,\r\n})\r\nexport class AndLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "AnyOfSchemaComponent",
            "id": "component-AnyOfSchemaComponent-55e4ca22e806c503f711807c7d4b92b1954417660c84208ddfaf9cfbbbb06f013b767e410c29a0b021a8a7474267226406cb00e89c69e277dad1fa842ea7be97",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/any-of.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-composition-any-of",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span class=\"badge badge--info\">{{ typeOf }}</span>\n  <mat-tab-group>\n    <mat-tab *ngFor=\"let compositeSchema of typedSchema\">\n      <ng-template mat-tab-label>\n        <jsv-friendly-name [schema]=\"compositeSchema\" />\n      </ng-template>\n      <jse-common-create-nodes [schema]=\"compositeSchema\" />\n    </mat-tab>\n  </mat-tab-group>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 29,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "GenerateFriendlyNameComponent",
                    "type": "component"
                },
                {
                    "name": "CreateNodesComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\n\r\nimport { GenerateFriendlyNameComponent } from \"../../utils/index\";\r\nimport { CreateNodesComponent } from \"../../common/create-nodes\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-composition-any-of',\r\n  standalone: true,\r\n  imports: [CommonModule, MatTabsModule, GenerateFriendlyNameComponent, CreateNodesComponent],\r\n  template: `\r\n    <div>\r\n      <span class=\"badge badge--info\">{{ typeOf }}</span>\r\n      <mat-tab-group>\r\n        <mat-tab *ngFor=\"let compositeSchema of typedSchema\">\r\n          <ng-template mat-tab-label>\r\n            <jsv-friendly-name [schema]=\"compositeSchema\" />\r\n          </ng-template>\r\n          <jse-common-create-nodes [schema]=\"compositeSchema\" />\r\n        </mat-tab>\r\n      </mat-tab-group>\r\n    </div>\r\n  `,\r\n})\r\nexport class AnyOfSchemaComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): JSONSchema[] {\r\n    return this.schema.anyOf! as JSONSchema[];\r\n  }\r\n\r\n  get typeOf(): string {\r\n    return \"anyOf\";\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 31
                    }
                },
                "typeOf": {
                    "name": "typeOf",
                    "getSignature": {
                        "name": "typeOf",
                        "type": "string",
                        "returnType": "string",
                        "line": 35
                    }
                }
            }
        },
        {
            "name": "ArrayContainsNumberComponent",
            "id": "component-ArrayContainsNumberComponent-f8ea10fc5e285780b4399bd9166d8adb94af830c893940097c2762c3c892d998944e591f5df79e88ae600561ca57588714ad36adb4d9efa756c8d8f2d3be2b03",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-contains-number.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-array-contains",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <strong>Must contain : </strong>\n    <ng-container *ngIf=\"typedSchema.minContains\">\n      <code>\n        {{ getMinContainsLabel(typedSchema.minContains) }}\n      </code>\n    </ng-container>\n    <ng-container *ngIf=\"typedSchema.minContains !== undefined && typedSchema.maxContains !== undefined\">\n      <labels-and></labels-and>\n    </ng-container>\n    <ng-container *ngIf=\"typedSchema.maxContains !== undefined\">\n      <code>\n        {{ getMaxContainsLabel(typedSchema.maxContains) }}\n      </code>\n    </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 34,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getMaxContainsLabel",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMinContainsLabel",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AndLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AndLabelComponent } from \"../../labels/and-label\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from '../../types';\r\n\r\ntype typedJSONArraySchema = JSONSchemaNS.Array;\r\n\r\n@Component({\r\n    selector: 'qm-array-contains',\r\n    standalone: true,\r\n    template: `\r\n  <div>\r\n      <strong>Must contain : </strong>\r\n      <ng-container *ngIf=\"typedSchema.minContains\">\r\n        <code>\r\n          {{ getMinContainsLabel(typedSchema.minContains) }}\r\n        </code>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"typedSchema.minContains !== undefined && typedSchema.maxContains !== undefined\">\r\n        <labels-and></labels-and>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"typedSchema.maxContains !== undefined\">\r\n        <code>\r\n          {{ getMaxContainsLabel(typedSchema.maxContains) }}\r\n        </code>\r\n      </ng-container>\r\n  </div>\r\n  `,\r\n    imports: [CommonModule, AndLabelComponent]\r\n})\r\nexport class ArrayContainsNumberComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): typedJSONArraySchema {\r\n    return this.schema as typedJSONArraySchema;\r\n  }\r\n\r\n  // minContains\r\n  getMinContainsLabel(value: number): string {\r\n    return `at least ${value} valid item(s)`;\r\n  }\r\n\r\n  // maxContains\r\n  getMaxContainsLabel(value: number): string {\r\n    return `at most ${value} valid item(s)`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "typedJSONArraySchema",
                        "line": 36
                    }
                }
            }
        },
        {
            "name": "ArrayLabelComponent",
            "id": "component-ArrayLabelComponent-949f58936c4f5a3f6ebe8a40d08a7d7d273e269873ca5133e6c2fc1052c7cdfee471acba5465097175fd1a82335b9962152ede1974a946d550df6cd3a3e06a04",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/array-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-array",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n    array\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-array',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n        array\r\n    </span>\r\n  `,\r\n})\r\nexport class ArrayLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ArrayNumberOfItemsComponent",
            "id": "component-ArrayNumberOfItemsComponent-16749fb79ea33e425ad58290ca72003a0ecf22607af7ac1e3ce0f2c9ca6a4ccadfd3a4d448b9a16db0d2888e67cf27920c66a6ea3119392480718329fbda0ddb",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-number-of-items.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-array-number-of-items",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <strong>Length :</strong>\n    &nbsp;\n    <ng-container *ngIf=\"typedSchema.minItems !== undefined\">\n      <code>\n        {{ getMinItemsLabel(typedSchema.minItems!) }}\n      </code>\n    </ng-container>\n    <ng-container *ngIf=\"typedSchema.minItems !== undefined && typedSchema.maxItems !== undefined\">\n      <labels-and></labels-and>\n    </ng-container>\n    <ng-container *ngIf=\"typedSchema.maxItems !== undefined\">\n      <code>\n        {{ getMaxItemsLabel(typedSchema.maxItems!) }}\n      </code>\n    </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 34,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getMaxItemsLabel",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMinItemsLabel",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AndLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AndLabelComponent } from \"../../labels/and-label\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from '../../types';\r\ntype typedJSONArraySchema = JSONSchemaNS.Array;\r\n\r\n@Component({\r\n  selector: 'qm-array-number-of-items',\r\n  standalone: true,\r\n  imports: [CommonModule,AndLabelComponent],\r\n  template: `\r\n    <div>\r\n        <strong>Length :</strong>\r\n        &nbsp;\r\n        <ng-container *ngIf=\"typedSchema.minItems !== undefined\">\r\n          <code>\r\n            {{ getMinItemsLabel(typedSchema.minItems!) }}\r\n          </code>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"typedSchema.minItems !== undefined && typedSchema.maxItems !== undefined\">\r\n          <labels-and></labels-and>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"typedSchema.maxItems !== undefined\">\r\n          <code>\r\n            {{ getMaxItemsLabel(typedSchema.maxItems!) }}\r\n          </code>\r\n        </ng-container>\r\n    </div>\r\n  `\r\n})\r\nexport class ArrayNumberOfItemsComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): typedJSONArraySchema {\r\n    return this.schema as typedJSONArraySchema;\r\n  }\r\n\r\n  // minItems\r\n  getMinItemsLabel(value: number): string {\r\n    return `>= ${value}`;\r\n  }\r\n\r\n  // maxItems\r\n  getMaxItemsLabel(value: number): string {\r\n    return `<= ${value}`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "typedJSONArraySchema",
                        "line": 36
                    }
                }
            }
        },
        {
            "name": "ArrayUniqueItemsComponent",
            "id": "component-ArrayUniqueItemsComponent-0508de229828b1d37a2e500a2a06118e4756dfbdbcb09ebb7d21ec436dd537beee4a39828b1a29d4d5c7a5cdf1a938f24ccbdfbded20b010bedc7f11682f49ec",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-unique-items.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-array-unique-items",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <strong>Unique items :</strong>\n    &nbsp;\n    <code>yes</code>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-array-unique-items',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n  <div>\r\n      <strong>Unique items :</strong>\r\n      &nbsp;\r\n      <code>yes</code>\r\n  </div>\r\n  `\r\n})\r\nexport class ArrayUniqueItemsComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "BooleanLabelComponent",
            "id": "component-BooleanLabelComponent-dc95b4c36961ea8797706b71628ecbd9d95846a9855381c0fdfd1dd403abfc15ecd3459a2e3a8735544da86257ba9459073b63fcabe20b18fd41bbf4e6542966",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/boolean-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-boolean",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n    boolean\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-boolean',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n        boolean\r\n    </span>\r\n  `,\r\n})\r\nexport class BooleanLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ConstantComponent",
            "id": "component-ConstantComponent-64437c168f9204b8bff3fbdce31ded848ab1df1fea091cbd9d81e6bd9f9a048cad67a1de51149b05456e58b06ec66aa4b3b611b03a531fc9920defe25482f331",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/constant.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-constant",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <strong>Constant value :</strong>\n    &nbsp;\n    <lib-print-schema-type [obj]=\"schema.const\" />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 19,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-constant',\r\n  standalone: true,\r\n  imports: [PrintSchemaTypeComponent],\r\n  template: `\r\n  <div>\r\n      <strong>Constant value :</strong>\r\n      &nbsp;\r\n      <lib-print-schema-type [obj]=\"schema.const\" />\r\n  </div>\r\n  `\r\n})\r\nexport class ConstantComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ContentEncodingComponent",
            "id": "component-ContentEncodingComponent-30a1b9fbc09d13369aa5979d6870426a4f8c3a788e911b774eb2e004d20cc69b5b77bbbf5a8e5aaba1f56d91fe3d2dc496508f7d05c9b2f2a3851b8d7cf80783",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-encoding.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-content-encoding",
            "styleUrls": [],
            "styles": [],
            "template": "<div *ngIf=\"schema\" key=\"contentEncoding\">\n  <strong>Encoding :</strong>\n  &nbsp;\n  <lib-print-schema-type [obj]=\"schema.contentEncoding\"] />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 20,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport type { JSONSchema } from '../../types';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\n@Component({\r\n  selector: 'qm-content-encoding',\r\n  standalone: true,\r\n  imports: [CommonModule,PrintSchemaTypeComponent],\r\n  template: `\r\n    <div *ngIf=\"schema\" key=\"contentEncoding\">\r\n      <strong>Encoding :</strong>\r\n      &nbsp;\r\n      <lib-print-schema-type [obj]=\"schema.contentEncoding\"] />\r\n    </div>\r\n  `,\r\n})\r\nexport class ContentEncodingComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ContentMediaTypeComponent",
            "id": "component-ContentMediaTypeComponent-377a37634ec4306f10e4a420dd3ebd7c4fdbfc2fd8a5dd1664f73a316fda55e60d737712448fa521da472c9ece455b2e731916fdf5db42c487f0d0e6b45272d0",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-media.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-content-media-type",
            "styleUrls": [],
            "styles": [],
            "template": "<div key=\"contentMediaType\">\n  <strong>Media type :</strong>\n  &nbsp;\n  <lib-print-schema-type [obj]=\"schema.contentMediaType\"] />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 19,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-content-media-type',\r\n  standalone: true,\r\n  imports: [PrintSchemaTypeComponent],\r\n  template: `\r\n    <div key=\"contentMediaType\">\r\n      <strong>Media type :</strong>\r\n      &nbsp;\r\n      <lib-print-schema-type [obj]=\"schema.contentMediaType\"] />\r\n    </div>\r\n  `,\r\n})\r\nexport class ContentMediaTypeComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ContentSchemaComponent",
            "id": "component-ContentSchemaComponent-617b174a9a7790d6b5097dc04f37b1c9b2258cd97d41e8a7d1b6f5220bc5e64f64f40d44f838472f004092765ca67310c07506cd4d2286097b7e069d698909ff",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-schema.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-content-schema",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ contentSchemaLabel }}</strong>\n  &nbsp;\n  <mat-accordion>\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          {{ title }}\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <jse-common-create-nodes [schema]=\"schema.contentSchema!\"/>\n    </mat-expansion-panel>\n  </mat-accordion>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 33,
                    "type": "JSONSchemaNS.String",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contentSchemaLabel",
                    "defaultValue": "'Decoded content must be validated against this schema :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "title",
                    "defaultValue": "'Schema'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "CreateNodesComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\n\r\nimport {\r\n  CreateNodesComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\"\r\n\r\n@Component({\r\n  selector: 'qm-content-schema',\r\n  standalone: true,\r\n  imports: [MatExpansionModule,CreateNodesComponent],\r\n  template: `\r\n    <div>\r\n      <strong>{{ contentSchemaLabel }}</strong>\r\n      &nbsp;\r\n      <mat-accordion>\r\n        <mat-expansion-panel>\r\n          <mat-expansion-panel-header>\r\n            <mat-panel-title>\r\n              {{ title }}\r\n            </mat-panel-title>\r\n          </mat-expansion-panel-header>\r\n          <jse-common-create-nodes [schema]=\"schema.contentSchema!\"/>\r\n        </mat-expansion-panel>\r\n      </mat-accordion>\r\n    </div>\r\n  `,\r\n})\r\nexport class ContentSchemaComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.String;\r\n\r\n  // Translated Label\r\n  contentSchemaLabel = 'Decoded content must be validated against this schema :';\r\n\r\n  // TODO maybe later refactor this name ...\r\n  title = 'Schema';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateAdditionalItemsComponent",
            "id": "component-CreateAdditionalItemsComponent-1c730dcb403e11a108c0879cba3d6577a0bbb6d7b3d08507ca407a1bbeca9c0c42aa1c04da0e40519dbcad5300b7c2bfa70595e47c9647f160cb0f83288867b7",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/additional-items.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array-additional-items",
            "styleUrls": [],
            "styles": [],
            "template": "<ul *ngIf=\"!isUndefinedOrBoolean(items)\">\n  <li>\n    <jse-common-create-edge [schema]=\"items!\" [required]=\"isMinItemsValid()\">\n      <code name>\n        {{ additionalItemsLabel(startingIndex) }}\n      </code>\n    </jse-common-create-edge>\n  </li>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 27,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "additionalItemsLabel",
                    "args": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isMinItemsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isUndefinedOrBoolean",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CreateEdgeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from '../../types';\r\n\r\n@Component({\r\n  selector: 'jse-array-additional-items',\r\n  standalone: true,\r\n  imports: [CommonModule,CreateEdgeComponent],\r\n  template: `\r\n    <ul *ngIf=\"!isUndefinedOrBoolean(items)\">\r\n      <li>\r\n        <jse-common-create-edge [schema]=\"items!\" [required]=\"isMinItemsValid()\">\r\n          <code name>\r\n            {{ additionalItemsLabel(startingIndex) }}\r\n          </code>\r\n        </jse-common-create-edge>\r\n      </li>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateAdditionalItemsComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n  get items() {\r\n    return this.schema.additionalItems;\r\n  }\r\n\r\n  get startingIndex() {\r\n    return Array.isArray(this.schema.items) ? this.schema.items.length : 1;\r\n  }\r\n\r\n  isUndefinedOrBoolean(value: any): boolean {\r\n    return value === undefined || typeof value === 'boolean';\r\n  }\r\n\r\n  isMinItemsValid(): boolean {\r\n    return (\r\n      this.schema.minItems !== undefined && this.startingIndex >= this.schema.minItems - 1\r\n    );\r\n  }\r\n\r\n  additionalItemsLabel(count: number): string {\r\n    return `items[${count},...]`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "items": {
                    "name": "items",
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                },
                "startingIndex": {
                    "name": "startingIndex",
                    "getSignature": {
                        "name": "startingIndex",
                        "type": "",
                        "returnType": "",
                        "line": 33
                    }
                }
            }
        },
        {
            "name": "CreateAdditionalPropertiesComponent",
            "id": "component-CreateAdditionalPropertiesComponent-516cb1effc38b83e21481dd4b273bea2ee4b3f54fa4283ddc25add1fa6da42b37c631cb4fa013a2259d610d93d3950d20b055a294b8c0990c04c623c86a9d605",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/additional-properties.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-additional-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<ul *ngIf=\"!isUndefinedOrBoolean(additionalProperties)\">\n  <li>\n    <jse-common-create-edge [schema]=\"additionalProperties!\" [required]=\"false\">\n      <code name>\n        {{ additionalPropertiesLabel() }}\n      </code>\n    </jse-common-create-edge>\n  </li>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 27,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "additionalPropertiesLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isUndefinedOrBoolean",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CreateEdgeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-additional-properties',\r\n  standalone: true,\r\n  imports: [CommonModule,CreateEdgeComponent],\r\n  template: `\r\n    <ul *ngIf=\"!isUndefinedOrBoolean(additionalProperties)\">\r\n      <li>\r\n        <jse-common-create-edge [schema]=\"additionalProperties!\" [required]=\"false\">\r\n          <code name>\r\n            {{ additionalPropertiesLabel() }}\r\n          </code>\r\n        </jse-common-create-edge>\r\n      </li>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateAdditionalPropertiesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  get additionalProperties() {\r\n    return this.schema.additionalProperties;\r\n  }\r\n\r\n  isUndefinedOrBoolean(value: any): boolean {\r\n    return value === undefined || typeof value === 'boolean';\r\n  }\r\n\r\n  additionalPropertiesLabel(): string {\r\n    return `property name*`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "additionalProperties": {
                    "name": "additionalProperties",
                    "getSignature": {
                        "name": "additionalProperties",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            }
        },
        {
            "name": "CreateAlwaysInvalidComponent",
            "id": "component-CreateAlwaysInvalidComponent-e61417fe784e637e3bca52ad2805057f3b18def0134734bef7a465eddd44680a7708febdb3f72ba45eadfb42d06c32662baebd11ebe9fcd3e6cf2011ed268e58",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-always-invalid.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-always-invalid",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-false></labels-false>\n  <div style=\"margin-top: 0.75rem;\">\n    {{ \"Always invalid\" }}\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "FalseLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    FalseLabelComponent\r\n} from \"../labels/index\";\r\n\r\n@Component({\r\n  selector: 'jse-always-invalid',\r\n  standalone: true,\r\n  imports: [TypeLabelComponent, FalseLabelComponent],\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-false></labels-false>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        {{ \"Always invalid\" }}\r\n      </div>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateAlwaysInvalidComponent {\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateAlwaysValidComponent",
            "id": "component-CreateAlwaysValidComponent-4000bf26bd09be64cfc744e87b15ca45f4f1fc84a5c18ac7cfc337c35025f9a1110a197374bc67082897515fcd8df072cf3823a900df014cbd2827d66f97231b",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-always-valid.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-always-valid",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-true></labels-true>\n  <div style=\"margin-top: 0.75rem;\">\n    {{ \"Always valid\" }}\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "TrueLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    TrueLabelComponent\r\n} from \"../labels/index\";\r\n\r\n@Component({\r\n  selector: 'jse-always-valid',\r\n  standalone: true,\r\n  imports: [TypeLabelComponent, TrueLabelComponent],\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-true></labels-true>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        {{ \"Always valid\" }}\r\n      </div>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateAlwaysValidComponent {\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateArrayComponent",
            "id": "component-CreateArrayComponent-0091106f504fb85564c1c2102a2b277d7541ba0ea89214ddad18aebc301c765db092b34a425d7ca6bc183d63a4425061a51e56f953398b08467921d8cbca0fbf",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/index.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type />\n  &nbsp;&#58;&nbsp;\n  <labels-array />\n  <jse-array-prefix-items [schema]=\"schema\" />\n  <jse-array-items [schema]=\"schema\" />\n  <jse-array-additional-items [schema]=\"schema\" />\n  <jse-array-unevaluated-items [schema]=\"schema\" />\n  <jse-array-contains [schema]=\"schema\" />\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\"></jse-description>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 56,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ArrayLabelComponent",
                    "type": "component"
                },
                {
                    "name": "CreateDescriptionComponent",
                    "type": "component"
                },
                {
                    "name": "QualifierMessages"
                },
                {
                    "name": "CreateAdditionalItemsComponent",
                    "type": "component"
                },
                {
                    "name": "CreateContainsComponent",
                    "type": "component"
                },
                {
                    "name": "CreateItemsComponent",
                    "type": "component"
                },
                {
                    "name": "CreatePrefixItemsComponent",
                    "type": "component"
                },
                {
                    "name": "CreateUnevaluatedItemsComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport { \r\n    TypeLabelComponent,\r\n    ArrayLabelComponent\r\n } from \"../../labels/index\";\r\nimport { \r\n    CreateDescriptionComponent\r\n } from \"../index\";\r\nimport { CreatePrefixItemsComponent } from \"./prefix-items\";\r\nimport { CreateItemsComponent } from \"./items\";\r\nimport { CreateAdditionalItemsComponent } from \"./additional-items\";\r\nimport { CreateUnevaluatedItemsComponent } from \"./unevaluated-items\";\r\nimport { CreateContainsComponent } from \"./contains\";\r\n\r\nimport { QualifierMessages } from \"../../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-array',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    TypeLabelComponent, \r\n    ArrayLabelComponent,\r\n    CreateDescriptionComponent,\r\n    QualifierMessages,\r\n    CreateAdditionalItemsComponent,\r\n    CreateContainsComponent,\r\n    CreateItemsComponent,\r\n    CreatePrefixItemsComponent,\r\n    CreateUnevaluatedItemsComponent\r\n  ],\r\n  template: `\r\n    <div>\r\n      <labels-type />\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-array />\r\n      <jse-array-prefix-items [schema]=\"schema\" />\r\n      <jse-array-items [schema]=\"schema\" />\r\n      <jse-array-additional-items [schema]=\"schema\" />\r\n      <jse-array-unevaluated-items [schema]=\"schema\" />\r\n      <jse-array-contains [schema]=\"schema\" />\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\"></jse-description>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateArrayComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateBooleanComponent",
            "id": "component-CreateBooleanComponent-8968ad747b87671741e56abd9f8adf9377ee35f8bfec86c82dcf9e90d1036861c839c5569bfeae9f16bec22783566cd7b51ee4acdec9c9d6f330d647a0784778",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-boolean.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-boolean",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-boolean></labels-boolean>\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\"></jse-description>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 39,
                    "type": "JSONSchemaNS.Boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "BooleanLabelComponent",
                    "type": "component"
                },
                {
                    "name": "CreateDescriptionComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    CreateDescriptionComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    BooleanLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    QualifierMessages\r\n} from \"../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-boolean',\r\n  standalone: true,\r\n  imports: [TypeLabelComponent, BooleanLabelComponent,CreateDescriptionComponent,CommonModule,QualifierMessages],\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-boolean></labels-boolean>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\"></jse-description>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateBooleanComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Boolean;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateContainsComponent",
            "id": "component-CreateContainsComponent-509ef6372c0dfe58ed5ad04232a243440a63cc9363c0ab89eedfee5fc063df93641434cffb5c185fba3a14318404bb6112678a5b5a2c77bb04baecb5ca0832f8",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/contains.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array-contains",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <li *ngIf=\"!isUndefined(item)\">\n    <jse-common-create-edge [schema]=\"item!\" [required]=\"isMinContainsValid()\">\n      <code name>\n        {{ containsLabel }}\n      </code>\n    </jse-common-create-edge>\n  </li>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 27,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isMinContainsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isUndefined",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CreateEdgeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from '../../types';\r\n\r\n@Component({\r\n  selector: 'jse-array-contains',\r\n  standalone: true,\r\n  imports: [CommonModule,CreateEdgeComponent],\r\n  template: `\r\n    <ul>\r\n      <li *ngIf=\"!isUndefined(item)\">\r\n        <jse-common-create-edge [schema]=\"item!\" [required]=\"isMinContainsValid()\">\r\n          <code name>\r\n            {{ containsLabel }}\r\n          </code>\r\n        </jse-common-create-edge>\r\n      </li>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateContainsComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n  get item() {\r\n    return this.schema.contains;\r\n  }\r\n\r\n  get containsLabel() {\r\n    return `items[..., x, ...]`;\r\n  }\r\n\r\n  isUndefined(value: any): boolean {\r\n    return value === undefined;\r\n  }\r\n\r\n  isMinContainsValid(): boolean {\r\n    return this.schema.minContains !== undefined && this.schema.minContains > 0;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "item": {
                    "name": "item",
                    "getSignature": {
                        "name": "item",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                },
                "containsLabel": {
                    "name": "containsLabel",
                    "getSignature": {
                        "name": "containsLabel",
                        "type": "",
                        "returnType": "",
                        "line": 33
                    }
                }
            }
        },
        {
            "name": "CreateDescriptionComponent",
            "id": "component-CreateDescriptionComponent-b877d74f678dc4b60b488b00067df1f6f683eb1a37413ca67c008764ed74d59a887e65f888526bd234af9fb2e32d3a66822f09dbe5cf6cd9193bf631045e91b2",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-description.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-description",
            "styleUrls": [],
            "styles": [],
            "template": "<div style=\"margin-top: 0.75rem;\">\n  {{ description }}\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'jse-description',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div style=\"margin-top: 0.75rem;\">\r\n      {{ description }}\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateDescriptionComponent {\r\n  @Input() description!: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateEdgeComponent",
            "id": "component-CreateEdgeComponent-ea61957718af52fc908adc53e027dad179e5fe34b86eebabfd3f90749a489503b7f554d83a6373560c8632611e8f2d9544ec7f12f27a73fc7a51343a9cdabe86",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/create-edge.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-create-edge",
            "styleUrls": [
                "./create-edge.component.css"
            ],
            "styles": [],
            "template": "<li class=\"schemaItem\">\n    <mat-accordion>\n        <mat-expansion-panel>\n            <mat-expansion-panel-header>\n                <mat-panel-title>\n                    <ng-content select=\"[name]\" />\n                    &nbsp;\n                    <jsv-friendly-name [schema]=\"schema\" />\n                </mat-panel-title>\n                <mat-panel-description>\n                    <labels-required *ngIf=\"isRequired\" />\n                    <ng-container *ngIf=\"isRequired\" >\n                        &nbsp;\n                    </ng-container>\n                    <labels-deprecated *ngIf=\"isDeprecated\" />\n                    <ng-container *ngIf=\"isDeprecated\" >\n                        &nbsp;\n                    </ng-container>\n                    <labels-read-only *ngIf=\"isReadOnly\" />\n                    <ng-container *ngIf=\"isReadOnly\" >\n                        &nbsp;\n                    </ng-container>\n                    <labels-write-only *ngIf=\"isWriteOnly\" />\n                </mat-panel-description>\n            </mat-expansion-panel-header>\n            <jse-common-create-nodes [schema]=\"schema\" />\n        </mat-expansion-panel>\n    </mat-accordion>\n</li>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 69,
                    "type": "JSONSchema",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "GenerateFriendlyNameComponent",
                    "type": "component"
                },
                {
                    "name": "RequiredLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ReadOnlyLabelComponent",
                    "type": "component"
                },
                {
                    "name": "WriteOnlyLabelComponent",
                    "type": "component"
                },
                {
                    "name": "DeprecatedLabelComponent",
                    "type": "component"
                },
                {
                    "name": "CreateNodesComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\n\r\nimport {\r\n    GenerateFriendlyNameComponent\r\n} from \"../utils/index\";\r\n\r\nimport {\r\n    RequiredLabelComponent,\r\n    ReadOnlyLabelComponent,\r\n    WriteOnlyLabelComponent,\r\n    DeprecatedLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    CreateNodesComponent\r\n} from \"./index\";\r\n\r\nimport type { JSONSchema, JSONSchema_Draft_2019_09 } from '../types';\r\n\r\n@Component({\r\n  selector: 'jse-common-create-edge',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatExpansionModule,\r\n    GenerateFriendlyNameComponent,\r\n    RequiredLabelComponent,\r\n    ReadOnlyLabelComponent,\r\n    WriteOnlyLabelComponent,\r\n    DeprecatedLabelComponent,\r\n    CreateNodesComponent\r\n  ],\r\n  template: `\r\n    <li class=\"schemaItem\">\r\n        <mat-accordion>\r\n            <mat-expansion-panel>\r\n                <mat-expansion-panel-header>\r\n                    <mat-panel-title>\r\n                        <ng-content select=\"[name]\" />\r\n                        &nbsp;\r\n                        <jsv-friendly-name [schema]=\"schema\" />\r\n                    </mat-panel-title>\r\n                    <mat-panel-description>\r\n                        <labels-required *ngIf=\"isRequired\" />\r\n                        <ng-container *ngIf=\"isRequired\" >\r\n                            &nbsp;\r\n                        </ng-container>\r\n                        <labels-deprecated *ngIf=\"isDeprecated\" />\r\n                        <ng-container *ngIf=\"isDeprecated\" >\r\n                            &nbsp;\r\n                        </ng-container>\r\n                        <labels-read-only *ngIf=\"isReadOnly\" />\r\n                        <ng-container *ngIf=\"isReadOnly\" >\r\n                            &nbsp;\r\n                        </ng-container>\r\n                        <labels-write-only *ngIf=\"isWriteOnly\" />\r\n                    </mat-panel-description>\r\n                </mat-expansion-panel-header>\r\n                <jse-common-create-nodes [schema]=\"schema\" />\r\n            </mat-expansion-panel>\r\n        </mat-accordion>\r\n    </li>\r\n  `,\r\n  styleUrls: ['./create-edge.component.css']\r\n})\r\nexport class CreateEdgeComponent {\r\n  @Input({ required: true }) schema!: JSONSchema;\r\n  @Input({ required: true }) required!: boolean;\r\n\r\n  get typedSchema(): JSONSchema_Draft_2019_09 {\r\n    return this.schema as JSONSchema_Draft_2019_09;\r\n  }\r\n\r\n  get isDeprecated(): boolean {\r\n    return typeof this.typedSchema !== \"boolean\" && this.typedSchema.deprecated === true\r\n  }\r\n\r\n  get isReadOnly(): boolean {\r\n    return typeof this.schema !== \"boolean\" && this.schema.readOnly === true;\r\n  }\r\n\r\n  get isWriteOnly(): boolean {\r\n    return typeof this.schema !== \"boolean\" && this.schema.writeOnly === true;\r\n  }\r\n\r\n  get isRequired(): boolean {\r\n    return !this.isDeprecated && this.required;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* create-edge.component.css or create-edge.component.scss */\r\n\r\n.schemaItem {\r\n    list-style: none;\r\n    position: relative;\r\n    margin: 0 !important;\r\n    padding: 5px 0 5px 1rem;\r\n    border-left: thin solid var(--ifm-color-gray-500) !important;\r\n}\r\n\r\n.schemaItem:hover {\r\n    background-color: var(--ifm-menu-color-background-active);\r\n}\r\n\r\n.schemaItem:focus {\r\n    background-color: var(--ifm-menu-color-background-active);\r\n}\r\n  \r\n[class^=\"schemaItem\"]::before {\r\n    border-bottom: thin solid var(--ifm-color-gray-500);\r\n    content: \"\";\r\n    display: inline-block;\r\n    height: 0.5rem;\r\n    left: 0;\r\n    position: absolute;\r\n    top: 10px;\r\n    vertical-align: top;\r\n    width: 0.7rem;\r\n}\r\n  \r\n.schemaName {\r\n    opacity: 0.6;\r\n}\r\n\r\n.strikethrough {\r\n    text-decoration: line-through;\r\n}\r\n  ",
                    "styleUrl": "./create-edge.component.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "JSONSchema_Draft_2019_09",
                        "line": 72
                    }
                },
                "isDeprecated": {
                    "name": "isDeprecated",
                    "getSignature": {
                        "name": "isDeprecated",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 76
                    }
                },
                "isReadOnly": {
                    "name": "isReadOnly",
                    "getSignature": {
                        "name": "isReadOnly",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 80
                    }
                },
                "isWriteOnly": {
                    "name": "isWriteOnly",
                    "getSignature": {
                        "name": "isWriteOnly",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 84
                    }
                },
                "isRequired": {
                    "name": "isRequired",
                    "getSignature": {
                        "name": "isRequired",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 88
                    }
                }
            }
        },
        {
            "name": "CreateIntegerComponent",
            "id": "component-CreateIntegerComponent-1e279b7fec60a50d212aa9b22c40be9a9b30a656e54ac6cb2e2b867e8730a0b963d1df61ddfdcd50b86e01d802ca563f6042868ded89e667eed304866323068f",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-integer.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-integer",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-integer></labels-integer>\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\"></jse-description>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 39,
                    "type": "JSONSchemaNS.Integer",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "IntegerLabelComponent",
                    "type": "component"
                },
                {
                    "name": "CreateDescriptionComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    CreateDescriptionComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    IntegerLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    QualifierMessages\r\n} from \"../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-integer',\r\n  standalone: true,\r\n  imports: [TypeLabelComponent, IntegerLabelComponent,CreateDescriptionComponent,CommonModule,QualifierMessages],\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-integer></labels-integer>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\"></jse-description>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateIntegerComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Integer;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateItemsComponent",
            "id": "component-CreateItemsComponent-8d5303910ecd22febb07138cc1c2385d0168d85d543628c919579758502cbc01db22118a57dad142632ef74611bd3a8cfdb71c85dade4eebfcfcf372e0aeb149",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/items.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array-items",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <li *ngFor=\"let item of itemsAsArray; let idx = index\">\n    <jse-common-create-edge [schema]=\"item!\" [required]=\"isMinItemsValid()\">\n      <code name>\n        {{ itemsLabel(startingIndex + idx, isArray) }}\n      </code>\n    </jse-common-create-edge>\n  </li>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 27,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isArray",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "itemsAsArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "startingIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "isMinItemsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "itemsLabel",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isArray",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isArray",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CreateEdgeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-array-items',\r\n  standalone: true,\r\n  imports: [CommonModule,CreateEdgeComponent],\r\n  template: `\r\n    <ul>\r\n      <li *ngFor=\"let item of itemsAsArray; let idx = index\">\r\n        <jse-common-create-edge [schema]=\"item!\" [required]=\"isMinItemsValid()\">\r\n          <code name>\r\n            {{ itemsLabel(startingIndex + idx, isArray) }}\r\n          </code>\r\n        </jse-common-create-edge>\r\n      </li>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateItemsComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n  itemsAsArray: any[] = [];\r\n  startingIndex: number = 0;\r\n  isArray: boolean = false;\r\n\r\n  ngOnInit() {\r\n    this.itemsAsArray = Array.isArray(this.schema.items) ? this.schema.items : [this.schema.items];\r\n    this.startingIndex = Array.isArray(this.schema.prefixItems) ? this.schema.prefixItems.length : 0;\r\n    this.isArray = Array.isArray(this.schema.items);\r\n  }\r\n\r\n  isMinItemsValid(): boolean {\r\n    return this.schema.minItems !== undefined && this.schema.minItems >= this.itemsAsArray.length;\r\n  }\r\n\r\n  itemsLabel(index: number, isArray: boolean): string {\r\n    const finalIdx = isArray ? index.toString() : 'x';\r\n    return `items[${finalIdx}]`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateNodesComponent",
            "id": "component-CreateNodesComponent-363a30b05668b009c34c5f5c34d9deec2903f8e5efbe5138000cfcd45235f30e0767cc6a68f6b9e3242a3d247e91a1644dce1a14d76a5ada39fb9be5c461427a",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/create-nodes.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-create-nodes",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"isBooleanSchema\">\n  <jse-common-create-valid-or-invalid [schema]=\"schema\" />\n</ng-container>\n\n<ng-container *ngIf=\"!isBooleanSchema\">\n\n    <!-- Handle standard types -->\n    <jse-common-create-types [schema]=\"typedSchema\" />\n\n    <!-- Handle Composition -->\n    <ng-container *ngIf=\"isCompositionSchema\">\n        <jse-schema-composition [schema]=\"typedSchema\" />\n    </ng-container>\n\n    <!-- Handle Conditional -->\n    <ng-container *ngIf=\"isConditionalSchema\">\n        <jse-schema-conditional [schema]=\"typedSchema\" />\n    </ng-container>\n\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 56,
                    "type": "JSONSchema",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "SchemaConditionalComponent",
                    "type": "component"
                },
                {
                    "name": "SchemaCompositionComponent",
                    "type": "component"
                },
                {
                    "name": "CreateTypesComponent",
                    "type": "component"
                },
                {
                    "name": "CreateValidOrInvalidComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n    SchemaConditionalComponent,\r\n    SchemaCompositionComponent,\r\n} from \"../JSONSchemaElements/index\";\r\n\r\nimport {\r\n  isSchemaComposition,\r\n  isSchemaConditional,\r\n} from '../utils/index';\r\n\r\nimport {\r\n    CreateTypesComponent,\r\n    CreateValidOrInvalidComponent\r\n} from \"./index\";\r\n\r\nimport type { JSONSchema } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-common-create-nodes',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    SchemaConditionalComponent,\r\n    SchemaCompositionComponent,\r\n    CreateTypesComponent,\r\n    CreateValidOrInvalidComponent\r\n  ],\r\n  template: `\r\n    <ng-container *ngIf=\"isBooleanSchema\">\r\n      <jse-common-create-valid-or-invalid [schema]=\"schema\" />\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"!isBooleanSchema\">\r\n\r\n        <!-- Handle standard types -->\r\n        <jse-common-create-types [schema]=\"typedSchema\" />\r\n\r\n        <!-- Handle Composition -->\r\n        <ng-container *ngIf=\"isCompositionSchema\">\r\n            <jse-schema-composition [schema]=\"typedSchema\" />\r\n        </ng-container>\r\n\r\n        <!-- Handle Conditional -->\r\n        <ng-container *ngIf=\"isConditionalSchema\">\r\n            <jse-schema-conditional [schema]=\"typedSchema\" />\r\n        </ng-container>\r\n\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class CreateNodesComponent {\r\n  @Input({ required: true }) schema!: JSONSchema;\r\n\r\n  // Define a method to check if the schema is a boolean\r\n  get isBooleanSchema(): boolean {\r\n    return typeof this.schema === 'boolean';\r\n  }\r\n\r\n  get typedSchema(): Exclude<JSONSchema, false | true> {\r\n    return this.schema as Exclude<JSONSchema, false | true>;\r\n  }\r\n\r\n  // Define a method to check if the schema is a composition\r\n  get isCompositionSchema(): boolean {\r\n    return isSchemaComposition(this.schema);\r\n  }\r\n\r\n  // Define a method to check if the schema is conditional\r\n  get isConditionalSchema(): boolean {\r\n    return isSchemaConditional(this.schema);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "isBooleanSchema": {
                    "name": "isBooleanSchema",
                    "getSignature": {
                        "name": "isBooleanSchema",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 59
                    }
                },
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "Exclude<JSONSchema,  | >",
                        "line": 63
                    }
                },
                "isCompositionSchema": {
                    "name": "isCompositionSchema",
                    "getSignature": {
                        "name": "isCompositionSchema",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 68
                    }
                },
                "isConditionalSchema": {
                    "name": "isConditionalSchema",
                    "getSignature": {
                        "name": "isConditionalSchema",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 73
                    }
                }
            }
        },
        {
            "name": "CreateNullComponent",
            "id": "component-CreateNullComponent-d7a61a98caf30f0117046362533edda8862bc8e477e3fb32bf8ee6de2f70c66d1e905d79677da31641e84d4ed99c88f39b1bd19c0f3b392fb67b96b6e171b368",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-null.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-null",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-null></labels-null>\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\"></jse-description>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 39,
                    "type": "JSONSchemaNS.Null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "NullLabelComponent",
                    "type": "component"
                },
                {
                    "name": "CreateDescriptionComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    CreateDescriptionComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    NullLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    QualifierMessages\r\n} from \"../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-null',\r\n  standalone: true,\r\n  imports: [TypeLabelComponent, NullLabelComponent,CreateDescriptionComponent,CommonModule,QualifierMessages],\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-null></labels-null>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\"></jse-description>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateNullComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Null;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateNumberComponent",
            "id": "component-CreateNumberComponent-3103a4277097887eeb0a5a23d10fd32de371d0fc5962a4c14da914cb81437fc91a0aa5d0b270aed774e15200e90a22da0151bb75a46b61941011b9f8d275c20b",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-number.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-number",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-number></labels-number>\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\"></jse-description>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 39,
                    "type": "JSONSchemaNS.Number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "NumberLabelComponent",
                    "type": "component"
                },
                {
                    "name": "CreateDescriptionComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    CreateDescriptionComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    NumberLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    QualifierMessages\r\n} from \"../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-number',\r\n  standalone: true,\r\n  imports: [TypeLabelComponent, NumberLabelComponent,CreateDescriptionComponent,CommonModule,QualifierMessages],\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-number></labels-number>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\"></jse-description>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateNumberComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Number;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateObjectComponent",
            "id": "component-CreateObjectComponent-48899e2e8e0ab8ef286de53ee8ed87d24cb8cc2fac30acb9aaef3b3421bb9751144ec8039fcafe355d5640d6062564f7c1dbf779792496c76127fc47703bba41",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/index.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type />\n  &nbsp;&#58;&nbsp;\n  <labels-object />\n  <jse-object-unlisted-properties [schema]=\"schema\" />\n  <jse-object-properties [schema]=\"schema\" />\n  <jse-object-pattern-properties [schema]=\"schema\" />\n  <jse-object-property-names [schema]=\"schema\" />\n  <jse-object-additional-properties [schema]=\"schema\" />\n  <jse-object-unevaluated-properties [schema]=\"schema\" />\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\"></jse-description>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 59,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                },
                {
                    "name": "CreateUnlistedPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "CreatePropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "CreatePatternPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "PropertyNamesComponent",
                    "type": "component"
                },
                {
                    "name": "CreateAdditionalPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "CreateUnevaluatedPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "ObjectLabelComponent",
                    "type": "component"
                },
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "CreateDescriptionComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport { CreateUnlistedPropertiesComponent } from \"./unlisted-required-properties\";\r\nimport { CreatePropertiesComponent } from \"./properties\";\r\nimport { CreatePatternPropertiesComponent } from \"./pattern-properties\";\r\nimport { PropertyNamesComponent } from \"./property-names\";\r\nimport { CreateAdditionalPropertiesComponent } from \"./additional-properties\";\r\nimport { CreateUnevaluatedPropertiesComponent } from \"./unevaluated-properties\";\r\n\r\nimport { QualifierMessages } from \"../../utils/index\";\r\n\r\nimport { \r\n    ObjectLabelComponent,\r\n    TypeLabelComponent\r\n} from \"../../labels/index\";\r\n\r\nimport { CreateDescriptionComponent } from \"../index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    QualifierMessages,\r\n    CreateUnlistedPropertiesComponent,\r\n    CreatePropertiesComponent,\r\n    CreatePatternPropertiesComponent,\r\n    PropertyNamesComponent,\r\n    CreateAdditionalPropertiesComponent,\r\n    CreateUnevaluatedPropertiesComponent,\r\n    ObjectLabelComponent,\r\n    TypeLabelComponent,\r\n    CreateDescriptionComponent\r\n  ],\r\n  template: `\r\n    <div>\r\n      <labels-type />\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-object />\r\n      <jse-object-unlisted-properties [schema]=\"schema\" />\r\n      <jse-object-properties [schema]=\"schema\" />\r\n      <jse-object-pattern-properties [schema]=\"schema\" />\r\n      <jse-object-property-names [schema]=\"schema\" />\r\n      <jse-object-additional-properties [schema]=\"schema\" />\r\n      <jse-object-unevaluated-properties [schema]=\"schema\" />\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\"></jse-description>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateObjectComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreatePatternPropertiesComponent",
            "id": "component-CreatePatternPropertiesComponent-b0f026c8dff4c6be7e5857361df67fece43776bdd88a72ec31e2cf7337159514c4613748d75d0486c12ce83b786531910de8157b23e57913e1059a664ebf3814",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/pattern-properties.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-pattern-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <li *ngFor=\"let entry of patternPropertiesEntries\">\n    <jse-common-create-edge [schema]=\"entry[1]!\" [required]=\"false\">\n      <code name>\n        {{ generatePropertyName(entry[0]) }}\n      </code>\n    </jse-common-create-edge>\n  </li>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 27,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "generatePropertyName",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CreateEdgeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-pattern-properties',\r\n  standalone: true,\r\n  imports: [CommonModule,CreateEdgeComponent],\r\n  template: `\r\n    <ul>\r\n      <li *ngFor=\"let entry of patternPropertiesEntries\">\r\n        <jse-common-create-edge [schema]=\"entry[1]!\" [required]=\"false\">\r\n          <code name>\r\n            {{ generatePropertyName(entry[0]) }}\r\n          </code>\r\n        </jse-common-create-edge>\r\n      </li>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreatePatternPropertiesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  get patternPropertiesEntries() {\r\n    return Object.entries(this.schema.patternProperties || {});\r\n  }\r\n\r\n  generatePropertyName(key: string): string {\r\n    return `${key}`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "patternPropertiesEntries": {
                    "name": "patternPropertiesEntries",
                    "getSignature": {
                        "name": "patternPropertiesEntries",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            }
        },
        {
            "name": "CreatePrefixItemsComponent",
            "id": "component-CreatePrefixItemsComponent-1fb0290cdd7acaff7e2d9bd197bff2b3a85b2b757c7a7b9b768030437cac15289da8536e7526884b85276334305c38f891787eb12d79465c79c27eb9aac11bbe",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/prefix-items.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array-prefix-items",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <li *ngFor=\"let val of array; let idx = index\">\n    <jse-common-create-edge [schema]=\"val!\" [required]=\"isMinItemsValid()\">\n      <code name>\n        {{ prefixItemsLabel(idx) }}\n      </code>\n    </jse-common-create-edge>\n  </li>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 27,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "array",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JSONSchema[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "isMinItemsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prefixItemsLabel",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CreateEdgeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchema, JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-array-prefix-items',\r\n  standalone: true,\r\n  imports: [CommonModule,CreateEdgeComponent],\r\n  template: `\r\n    <ul>\r\n      <li *ngFor=\"let val of array; let idx = index\">\r\n        <jse-common-create-edge [schema]=\"val!\" [required]=\"isMinItemsValid()\">\r\n          <code name>\r\n            {{ prefixItemsLabel(idx) }}\r\n          </code>\r\n        </jse-common-create-edge>\r\n      </li>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreatePrefixItemsComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n  array: JSONSchema[] = [];\r\n\r\n  ngOnInit() {\r\n    this.array = Array.isArray(this.schema.prefixItems) ? this.schema.prefixItems : [this.schema.prefixItems!] as JSONSchema[];\r\n  }\r\n\r\n  isMinItemsValid(): boolean {\r\n    return this.schema.minItems !== undefined && this.schema.minItems >= this.array.length;\r\n  }\r\n\r\n  prefixItemsLabel(index: number): string {\r\n    return `items[${index}]`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreatePropertiesComponent",
            "id": "component-CreatePropertiesComponent-72b6086662969cd1fe22b3c9cc46f9d4be9ba94e13dfe6a646156bfce82ba0fbfea99bd39da91a3258af2e95fd91629883d1f4a63111b63d23a8a2c927ad6611",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/properties.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <li *ngFor=\"let entry of propertiesEntries\">\n    <jse-common-create-edge [schema]=\"entry[1]\" [required]=\"isRequired(entry[0])\">\n      <strong name>\n        {{ generatePropertyName(entry[0]) }}\n      </strong>\n    </jse-common-create-edge>\n  </li>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 27,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "generatePropertyName",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isRequired",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CreateEdgeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-properties',\r\n  standalone: true,\r\n  imports: [CommonModule,CreateEdgeComponent],\r\n  template: `\r\n    <ul>\r\n      <li *ngFor=\"let entry of propertiesEntries\">\r\n        <jse-common-create-edge [schema]=\"entry[1]\" [required]=\"isRequired(entry[0])\">\r\n          <strong name>\r\n            {{ generatePropertyName(entry[0]) }}\r\n          </strong>\r\n        </jse-common-create-edge>\r\n      </li>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreatePropertiesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  get propertiesEntries() {\r\n    return Object.entries(this.schema.properties || {});\r\n  }\r\n\r\n  generatePropertyName(key: string): string {\r\n    return `${key}`;\r\n  }\r\n\r\n  isRequired(key: string): boolean {\r\n    return Array.isArray(this.schema.required) ? this.schema.required.includes(key) : false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "propertiesEntries": {
                    "name": "propertiesEntries",
                    "getSignature": {
                        "name": "propertiesEntries",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            }
        },
        {
            "name": "CreateStringComponent",
            "id": "component-CreateStringComponent-85f37d45feeda09273599d0f2c336f1bf4749a7e095156eeac9b1109ba7704eac2e983cfe19a1815ec4d1637848d476c7367b358a51f6c5618ebc7d912d07bf3",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-string.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-string",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-string></labels-string>\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\"></jse-description>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 39,
                    "type": "JSONSchemaNS.String",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "StringLabelComponent",
                    "type": "component"
                },
                {
                    "name": "CreateDescriptionComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    CreateDescriptionComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    StringLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    QualifierMessages\r\n} from \"../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-string',\r\n  standalone: true,\r\n  imports: [TypeLabelComponent, StringLabelComponent,CreateDescriptionComponent,CommonModule,QualifierMessages],\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-string></labels-string>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\"></jse-description>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateStringComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.String;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateTypesComponent",
            "id": "component-CreateTypesComponent-30e78de755116eae4eda335b0327b98ac65e67139e982e48af4ea865b5d97ceeb026627b76141fa61c45ad268784aeb45bf63a5032878b9185ff4c403290e86b",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/create-types.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-create-types",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container>\n\n  <ng-container *ngIf=\"foundTypes; else defaultCase\">\n    <!-- Case 1: Single type or type with null -->\n    <ng-container *ngIf=\"foundTypes.length === 1 || (hasNull && foundTypes.length === 2); else case2\">\n      <jse-common-render-provided-type [schema]=\"schema\" [type]=\"firstType\" [nullable]=\"hasNull\" />\n    </ng-container>\n\n    <!-- Case 2: Multiple types -->\n    <ng-template #case2>\n      <jse-common-multiple-types [schema]=\"schema\" [types]=\"notNullTypeValues\" [nullable]=\"hasNull\" />\n    </ng-template>\n  </ng-container>\n\n  <!-- Default Case: Handle cases like { \"allOf\": ... } or { \"if\": ... } -->\n  <ng-template #defaultCase>\n    <ng-container *ngIf=\"!hasSchemaComposition; else compositionCase\">\n      <jse-common-create-valid-or-invalid [schema]=\"schema\" />\n    </ng-container>\n\n    <ng-template #compositionCase>\n      <!--  Otherwise, we have a SchemaComposition, which will be handled by CreateNodes -->\n    </ng-template>\n  </ng-template>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 53,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CreateValidOrInvalidComponent",
                    "type": "component"
                },
                {
                    "name": "RenderProvidedTypeComponent",
                    "type": "component"
                },
                {
                    "name": "RenderMultipleTypesComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n    CreateValidOrInvalidComponent,\r\n    RenderProvidedTypeComponent,\r\n    RenderMultipleTypesComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    detectedTypes,\r\n    isSchemaComposition\r\n} from \"../utils/index\"\r\n\r\nimport type {\r\n    TypeValues,\r\n    JSONSchema\r\n} from \"../types\";\r\n\r\n@Component({\r\n  selector: 'jse-common-create-types',\r\n  standalone: true,\r\n  imports: [CommonModule, CreateValidOrInvalidComponent, RenderProvidedTypeComponent,RenderMultipleTypesComponent],\r\n  template: `\r\n    <ng-container>\r\n\r\n      <ng-container *ngIf=\"foundTypes; else defaultCase\">\r\n        <!-- Case 1: Single type or type with null -->\r\n        <ng-container *ngIf=\"foundTypes.length === 1 || (hasNull && foundTypes.length === 2); else case2\">\r\n          <jse-common-render-provided-type [schema]=\"schema\" [type]=\"firstType\" [nullable]=\"hasNull\" />\r\n        </ng-container>\r\n\r\n        <!-- Case 2: Multiple types -->\r\n        <ng-template #case2>\r\n          <jse-common-multiple-types [schema]=\"schema\" [types]=\"notNullTypeValues\" [nullable]=\"hasNull\" />\r\n        </ng-template>\r\n      </ng-container>\r\n\r\n      <!-- Default Case: Handle cases like { \"allOf\": ... } or { \"if\": ... } -->\r\n      <ng-template #defaultCase>\r\n        <ng-container *ngIf=\"!hasSchemaComposition; else compositionCase\">\r\n          <jse-common-create-valid-or-invalid [schema]=\"schema\" />\r\n        </ng-container>\r\n\r\n        <ng-template #compositionCase>\r\n          <!--  Otherwise, we have a SchemaComposition, which will be handled by CreateNodes -->\r\n        </ng-template>\r\n      </ng-template>\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class CreateTypesComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get foundTypes(): TypeValues[] {\r\n    return detectedTypes(this.schema);\r\n  }\r\n\r\n  get hasNull(): boolean {\r\n    return this.foundTypes.includes(\"null\");\r\n  }\r\n\r\n  get firstType(): TypeValues {\r\n    return this.foundTypes.find((s) => s !== \"null\") || this.foundTypes[0];\r\n  }\r\n\r\n  get hasSchemaComposition() : boolean {\r\n    return isSchemaComposition(this.schema);\r\n  }\r\n\r\n  get notNullTypeValues(): TypeValues[] {\r\n    return this.foundTypes.filter((s) => s !== \"null\");\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "foundTypes": {
                    "name": "foundTypes",
                    "getSignature": {
                        "name": "foundTypes",
                        "type": "[]",
                        "returnType": "TypeValues[]",
                        "line": 55
                    }
                },
                "hasNull": {
                    "name": "hasNull",
                    "getSignature": {
                        "name": "hasNull",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 59
                    }
                },
                "firstType": {
                    "name": "firstType",
                    "getSignature": {
                        "name": "firstType",
                        "type": "",
                        "returnType": "TypeValues",
                        "line": 63
                    }
                },
                "hasSchemaComposition": {
                    "name": "hasSchemaComposition",
                    "getSignature": {
                        "name": "hasSchemaComposition",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 67
                    }
                },
                "notNullTypeValues": {
                    "name": "notNullTypeValues",
                    "getSignature": {
                        "name": "notNullTypeValues",
                        "type": "[]",
                        "returnType": "TypeValues[]",
                        "line": 71
                    }
                }
            }
        },
        {
            "name": "CreateUnevaluatedItemsComponent",
            "id": "component-CreateUnevaluatedItemsComponent-46b9128fdbef59d85c22067011bb70ac08bda0fd467400baa18696a5955a3cbc51ecf9714e14b3777f35063e5ab4e21295d110295eafbe1b6808a2e4cbbe5fd9",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/unevaluated-items.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array-unevaluated-items",
            "styleUrls": [],
            "styles": [],
            "template": "<ul *ngIf=\"!isUndefinedOrBoolean(items)\">\n  <li>\n    <jse-common-create-edge [schema]=\"items!\" [required]=\"false\">\n      <code name>\n        {{ unevaluatedItemsLabel() }}\n      </code>\n    </jse-common-create-edge>\n  </li>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 27,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isUndefinedOrBoolean",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unevaluatedItemsLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CreateEdgeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-array-unevaluated-items',\r\n  standalone: true,\r\n  imports: [CommonModule,CreateEdgeComponent],\r\n  template: `\r\n    <ul *ngIf=\"!isUndefinedOrBoolean(items)\">\r\n      <li>\r\n        <jse-common-create-edge [schema]=\"items!\" [required]=\"false\">\r\n          <code name>\r\n            {{ unevaluatedItemsLabel() }}\r\n          </code>\r\n        </jse-common-create-edge>\r\n      </li>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateUnevaluatedItemsComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n  get items() {\r\n    return this.schema.unevaluatedItems;\r\n  }\r\n\r\n  isUndefinedOrBoolean(value: any): boolean {\r\n    return value === undefined || typeof value === 'boolean';\r\n  }\r\n\r\n  unevaluatedItemsLabel(): string {\r\n    return `items[y]`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "items": {
                    "name": "items",
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            }
        },
        {
            "name": "CreateUnevaluatedPropertiesComponent",
            "id": "component-CreateUnevaluatedPropertiesComponent-a0d70fe14a9e5c806db66904c70d0e6e612fa98fd1748874bf2d4fead781f193f66afd39b352dbeb71373f68b06fa4d27c0b05b05c79415b8c1b324b8f776e0c",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/unevaluated-properties.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-unevaluated-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<ul *ngIf=\"!isUndefinedOrBoolean(unevaluatedProperties)\">\n  <li>\n    <jse-common-create-edge [schema]=\"unevaluatedProperties!\" [required]=\"false\">\n      <code name>\n        {{ unevaluatedPropertiesLabel() }}\n      </code>\n    </jse-common-create-edge>\n  </li>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 27,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isUndefinedOrBoolean",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unevaluatedPropertiesLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CreateEdgeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-unevaluated-properties',\r\n  standalone: true,\r\n  imports: [CommonModule,CreateEdgeComponent],\r\n  template: `\r\n    <ul *ngIf=\"!isUndefinedOrBoolean(unevaluatedProperties)\">\r\n      <li>\r\n        <jse-common-create-edge [schema]=\"unevaluatedProperties!\" [required]=\"false\">\r\n          <code name>\r\n            {{ unevaluatedPropertiesLabel() }}\r\n          </code>\r\n        </jse-common-create-edge>\r\n      </li>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateUnevaluatedPropertiesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  get unevaluatedProperties() {\r\n    return this.schema.unevaluatedProperties;\r\n  }\r\n\r\n  isUndefinedOrBoolean(value: any): boolean {\r\n    return value === undefined || typeof value === 'boolean';\r\n  }\r\n\r\n  unevaluatedPropertiesLabel(): string {\r\n    return `property name*`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "unevaluatedProperties": {
                    "name": "unevaluatedProperties",
                    "getSignature": {
                        "name": "unevaluatedProperties",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            }
        },
        {
            "name": "CreateUnlistedPropertiesComponent",
            "id": "component-CreateUnlistedPropertiesComponent-f3c83987051e8b9536dda8b6b8fe05088dae65e16fbe7a5461f206e2043198a596f5cc72c07f503c578825a406fa31fdf2cb43d68211a1214ebc8e027275d865",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/unlisted-required-properties.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-unlisted-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <li *ngFor=\"let prop of unlistedProperties\">\n    <jse-common-create-edge\n      [schema]=\"true\"]\n      [required]=\"true\"]\n    >\n      <strong name>\n        {{ generatePropertyName(prop) }}\n      </strong>\n    </jse-common-create-edge>\n  </li>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 30,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "generatePropertyName",
                    "args": [
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CreateEdgeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-unlisted-properties',\r\n  standalone: true,\r\n  imports: [CommonModule, CreateEdgeComponent],\r\n  template: `\r\n    <ul>\r\n      <li *ngFor=\"let prop of unlistedProperties\">\r\n        <jse-common-create-edge\r\n          [schema]=\"true\"]\r\n          [required]=\"true\"]\r\n        >\r\n          <strong name>\r\n            {{ generatePropertyName(prop) }}\r\n          </strong>\r\n        </jse-common-create-edge>\r\n      </li>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateUnlistedPropertiesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  get unlistedProperties() {\r\n    const required: string[] = (this.schema.required || []) as string[];\r\n    const listedProperties = Object.keys(this.schema.properties || {});\r\n    return required.filter((r) => !listedProperties.includes(r));\r\n  }\r\n\r\n  generatePropertyName(prop: string): string {\r\n    return `${prop}`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "unlistedProperties": {
                    "name": "unlistedProperties",
                    "getSignature": {
                        "name": "unlistedProperties",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                }
            }
        },
        {
            "name": "CreateValidOrInvalidComponent",
            "id": "component-CreateValidOrInvalidComponent-5582230409dfa843512f2fbcda46cbce16c92bdd7c6c6ff2f417285423e4bb3a580e74883b2c2374d91f021f83ce86ea5ec3f64519ad657f5301f85b6ed63be2",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/create-valid-or-invalid.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-create-valid-or-invalid",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"schema; else alwaysInvalid\">\n  <jse-always-valid />\n</ng-container>\n<ng-template #alwaysInvalid>\n  <jse-always-invalid />\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 29,
                    "type": "JSONSchema",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateAlwaysInvalidComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateAlwaysValidComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n    CreateAlwaysInvalidComponent,\r\n    CreateAlwaysValidComponent\r\n} from \"../JSONSchemaElements/index\";\r\n\r\nimport type { JSONSchema } from '../types';\r\n\r\n@Component({\r\n  selector: 'jse-common-create-valid-or-invalid',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateAlwaysInvalidComponent),\r\n    forwardRef(() => CreateAlwaysValidComponent),\r\n  ],\r\n  template: `\r\n    <ng-container *ngIf=\"schema; else alwaysInvalid\">\r\n      <jse-always-valid />\r\n    </ng-container>\r\n    <ng-template #alwaysInvalid>\r\n      <jse-always-invalid />\r\n    </ng-template>\r\n  `,\r\n})\r\nexport class CreateValidOrInvalidComponent {\r\n  @Input({ required: true }) schema!: JSONSchema;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "DefaultValueComponent",
            "id": "component-DefaultValueComponent-0de47e235d7f9b95e06df4a94e4fff11277588da8d586c7a3b79aec9288e1471012e76df2c5fa22d03cc2b4f3e4d632be84acaa924b38b967cdd038ab18f4b9d",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/default-value.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-default-value",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ defaultLabel }}</strong>\n  &nbsp;\n  <lib-print-schema-type [obj]=\"schema.default\" />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 19,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "defaultLabel",
                    "defaultValue": "'Default value :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-default-value',\r\n  standalone: true,\r\n  imports: [PrintSchemaTypeComponent],\r\n  template: `\r\n    <div>\r\n      <strong>{{ defaultLabel }}</strong>\r\n      &nbsp;\r\n      <lib-print-schema-type [obj]=\"schema.default\" />\r\n    </div>\r\n  `,\r\n})\r\nexport class DefaultValueComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  defaultLabel = 'Default value :';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "DependenciesComponent",
            "id": "component-DependenciesComponent-6916a3b63b7b6e19b86bb597f6b4d32b782c78c5dd6c9f5a4b3b0871a09b70c4d5549e6fedffe700cca59630323eb57b010ec650c5d3d0acd08fc2a694f7b3ed",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependencies.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-conditional-dependencies",
            "styleUrls": [],
            "styles": [],
            "template": "<div *ngIf=\"hasDependentRequired\">\n  <jse-schema-conditional-dependent-required [schema]=\"dependentRequired\" />\n</div>\n<div *ngIf=\"hasDependentSchemas\">\n  <jse-schema-conditional-dependent-schemas [schema]=\"dependentSchemas\" />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 25,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "DependentRequiredComponent",
                    "type": "component"
                },
                {
                    "name": "DependentSchemasComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  DependentRequiredComponent,\r\n  DependentSchemasComponent\r\n} from \"./index\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-conditional-dependencies',\r\n  standalone: true,\r\n  imports: [CommonModule,DependentRequiredComponent,DependentSchemasComponent],\r\n  template: `\r\n    <div *ngIf=\"hasDependentRequired\">\r\n      <jse-schema-conditional-dependent-required [schema]=\"dependentRequired\" />\r\n    </div>\r\n    <div *ngIf=\"hasDependentSchemas\">\r\n      <jse-schema-conditional-dependent-schemas [schema]=\"dependentSchemas\" />\r\n    </div>\r\n  `,\r\n})\r\nexport class DependenciesComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get hasDependentRequired(): boolean {\r\n    return (\r\n      !!this.schema.dependencies &&\r\n      Object.values(this.schema.dependencies).some(Array.isArray)\r\n    );\r\n  }\r\n  \r\n  get hasDependentSchemas(): boolean {\r\n    return (\r\n      !!this.schema.dependencies &&\r\n      Object.values(this.schema.dependencies).some((subSchema) => !Array.isArray(subSchema))\r\n    );\r\n  }\r\n\r\n  get dependentRequired(): { dependentRequired: Record<string, string[] | readonly string[]> } {\r\n    const result: Record<string, string[] | readonly string[]> = {};\r\n\r\n    if (this.schema.dependencies) {\r\n      for (const [property, subSchema] of Object.entries(this.schema.dependencies)) {\r\n        if (Array.isArray(subSchema)) {\r\n          // dependentRequired case\r\n          result[property] = subSchema;\r\n        }\r\n      }\r\n    }\r\n\r\n    return { dependentRequired: result };\r\n  }\r\n\r\n  get dependentSchemas(): { dependentSchemas: Record<string, JSONSchema> } {\r\n    const result: Record<string, JSONSchema> = {};\r\n\r\n    if (this.schema.dependencies) {\r\n      for (const [property, subSchema] of Object.entries(this.schema.dependencies)) {\r\n        if (!Array.isArray(subSchema)) {\r\n          // dependentSchemas case\r\n          result[property] = subSchema as JSONSchema;\r\n        }\r\n      }\r\n    }\r\n\r\n    return { dependentSchemas: result };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "hasDependentRequired": {
                    "name": "hasDependentRequired",
                    "getSignature": {
                        "name": "hasDependentRequired",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 27
                    }
                },
                "hasDependentSchemas": {
                    "name": "hasDependentSchemas",
                    "getSignature": {
                        "name": "hasDependentSchemas",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 34
                    }
                },
                "dependentRequired": {
                    "name": "dependentRequired",
                    "getSignature": {
                        "name": "dependentRequired",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 41
                    }
                },
                "dependentSchemas": {
                    "name": "dependentSchemas",
                    "getSignature": {
                        "name": "dependentSchemas",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 56
                    }
                }
            }
        },
        {
            "name": "DependentRequiredComponent",
            "id": "component-DependentRequiredComponent-3034d4a1deda3749a720fb65b3f62e35320d187fad5ab2676e1d7f96869507fd4b7fedcebd7543a14696775a961d32eb17932a8660b83c57fd3f96b2b6347570",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependent-required.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-conditional-dependent-required",
            "styleUrls": [],
            "styles": [],
            "template": "<jse-schema-composition-all-of [schema]=\"simplifiedSchema\" />\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 19,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AllOfSchemaComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  AllOfSchemaComponent\r\n} from \"../schemaComposition/index\";\r\n\r\nimport type { JSONSchema, JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-conditional-dependent-required',\r\n  standalone: true,\r\n  imports: [CommonModule,AllOfSchemaComponent],\r\n  template: `\r\n    <jse-schema-composition-all-of [schema]=\"simplifiedSchema\" />\r\n  `,\r\n})\r\nexport class DependentRequiredComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get dependentRequired(): JSONSchemaNS.Object {\r\n    return this.schema as JSONSchemaNS.Object;\r\n  }\r\n\r\n  get simplifiedSchema(): Exclude<JSONSchema, true | false> {\r\n    const allOf = Object.entries(this.dependentRequired).map(\r\n      ([property, requiredProperties]) => ({\r\n        if: {\r\n          type: \"object\",\r\n          required: [property],\r\n        },\r\n        then: {\r\n          type: \"object\",\r\n          required: requiredProperties,\r\n        },\r\n      })\r\n    );\r\n\r\n    return { allOf };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "dependentRequired": {
                    "name": "dependentRequired",
                    "getSignature": {
                        "name": "dependentRequired",
                        "type": "",
                        "returnType": "JSONSchemaNS.Object",
                        "line": 21
                    }
                },
                "simplifiedSchema": {
                    "name": "simplifiedSchema",
                    "getSignature": {
                        "name": "simplifiedSchema",
                        "type": "",
                        "returnType": "Exclude<JSONSchema,  | >",
                        "line": 25
                    }
                }
            }
        },
        {
            "name": "DependentSchemasComponent",
            "id": "component-DependentSchemasComponent-c8d305265b9ddbdbb9d60506cfc4a65f431c4f340f780312f9f3ded10a9ad0941d94e87fc2ffa73100f7c434ad7906a1db012d82c380a239a5f37185e50e55df",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependent-schemas.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-conditional-dependent-schemas",
            "styleUrls": [],
            "styles": [],
            "template": "<jse-schema-composition-all-of [schema]=\"simplifiedSchema\" />\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 19,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AllOfSchemaComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  AllOfSchemaComponent\r\n} from \"../schemaComposition/index\";\r\n\r\nimport type { JSONSchema, JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-conditional-dependent-schemas',\r\n  standalone: true,\r\n  imports: [CommonModule,AllOfSchemaComponent],\r\n  template: `\r\n    <jse-schema-composition-all-of [schema]=\"simplifiedSchema\" />\r\n  `,\r\n})\r\nexport class DependentSchemasComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get dependentSchemas(): JSONSchemaNS.Object {\r\n    return this.schema as JSONSchemaNS.Object;\r\n  }\r\n\r\n  get simplifiedSchema(): Exclude<JSONSchema, true | false> {\r\n    const allOf = Object.entries(this.dependentSchemas).map(([property, subSchema]) => ({\r\n      if: {\r\n        type: \"object\",\r\n        required: [property],\r\n      },\r\n      then: subSchema,\r\n    }));\r\n\r\n    return { allOf };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "dependentSchemas": {
                    "name": "dependentSchemas",
                    "getSignature": {
                        "name": "dependentSchemas",
                        "type": "",
                        "returnType": "JSONSchemaNS.Object",
                        "line": 21
                    }
                },
                "simplifiedSchema": {
                    "name": "simplifiedSchema",
                    "getSignature": {
                        "name": "simplifiedSchema",
                        "type": "",
                        "returnType": "Exclude<JSONSchema,  | >",
                        "line": 25
                    }
                }
            }
        },
        {
            "name": "DeprecatedComponent",
            "id": "component-DeprecatedComponent-4c7f87a0313713090e3f501f5028c0760e5a14febeb582441cebee9b0afc58aac2f1f389e0d430dfafefea96a240aca70572d7217397fb0f8ca568951846a641",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/deprecated.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-deprecated",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span>🚨&nbsp;</span>\n  <ng-container>Deprecated</ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-deprecated',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div>\r\n      <span>🚨&nbsp;</span>\r\n      <ng-container>Deprecated</ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class DeprecatedComponent {}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "DeprecatedLabelComponent",
            "id": "component-DeprecatedLabelComponent-188128143ed1134290aaab4f9fec09b3cc4d590952a0bb8ae7a74a403810c5351bc3467ba13062319203ade62b17ebec41c838953a7af559eaa222ba62ed577d",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/Deprecated/deprecated-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-deprecated",
            "styleUrls": [
                "./deprecated-label.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./deprecated-label.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-deprecated',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './deprecated-label.component.html',\r\n  styleUrls: ['./deprecated-label.component.css']\r\n})\r\nexport class DeprecatedLabelComponent { }",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".deprecated {\r\n    font-size: 90%;\r\n    color: #ffba00\r\n}  ",
                    "styleUrl": "./deprecated-label.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<strong class=\"deprecated\">\r\n    deprecated\r\n</strong>  "
        },
        {
            "name": "ElseLabelComponent",
            "id": "component-ElseLabelComponent-0e2002bc660984bbd8ec0150dc903e8ba26c76fb6521da27b667f34d8e430bfe9a0cbc533ec61e7d80812802b673ed6081032e63871a68c70065b9c56b2d8d22",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/else-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-else",
            "styleUrls": [],
            "styles": [],
            "template": "<strong>\n    Else\n</strong>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-else',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <strong>\r\n        Else\r\n    </strong>\r\n  `,\r\n})\r\nexport class ElseLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "EnumComponent",
            "id": "component-EnumComponent-9c216389a3b1397ae0a474ce4cbd2bb46b067528bb886d79c58d7b1eea4732f3e57062fe4d6daae2323cbfa15da720678536e357b66ab9676b8bdad18564b865",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/enum.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-enum",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ enumLabel }}</strong>\n  &nbsp;\n  <lib-print-schema-type [obj]=\"schema.enum\" />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 19,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "enumLabel",
                    "defaultValue": "'Possible values :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-enum',\r\n  standalone: true,\r\n  imports: [PrintSchemaTypeComponent],\r\n  template: `\r\n    <div>\r\n      <strong>{{ enumLabel }}</strong>\r\n      &nbsp;\r\n      <lib-print-schema-type [obj]=\"schema.enum\" />\r\n    </div>\r\n  `,\r\n})\r\nexport class EnumComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  enumLabel = 'Possible values :';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ErrorOccurredLabelComponent",
            "id": "component-ErrorOccurredLabelComponent-e73b25836d17bbbd7a1343ee590801bfef741f882e683cd95fa1c822440e53837bc71f5ab5e590944967cced35c2cc83bede8038ddbb74c2280c1e851e70f7e2",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/error-occurred.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-error-occurred",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"error\">\n  <strong>Something bad happens : </strong> {{ error.message }}\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Error",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-error-occurred',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <ng-container *ngIf=\"error\">\r\n      <strong>Something bad happens : </strong> {{ error.message }}\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class ErrorOccurredLabelComponent {\r\n  @Input() error!: Error;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ExamplesComponent",
            "id": "component-ExamplesComponent-2e636e712a24fab4ad47b1c605f9a40ac02c01535fafaf1afea098d2eda456cc96c4fe3837d1bbf01b9a226c46fafd2acb1ade53e6a570461ba4f6efaf473097",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/examples.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-examples",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ examplesLabel }}</strong>&nbsp;\n  <mat-tab-group>\n    <mat-tab *ngFor=\"let item of items\" [label]=\"item.label\">\n        <lib-print-schema-type [obj]=\"item.value\"></lib-print-schema-type>\n    </mat-tab>\n  </mat-tab-group>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 23,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "examplesLabel",
                    "defaultValue": "'Example values :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-examples',\r\n  standalone: true,\r\n  imports: [MatTabsModule, PrintSchemaTypeComponent],\r\n  template: `\r\n    <div>\r\n      <strong>{{ examplesLabel }}</strong>&nbsp;\r\n      <mat-tab-group>\r\n        <mat-tab *ngFor=\"let item of items\" [label]=\"item.label\">\r\n            <lib-print-schema-type [obj]=\"item.value\"></lib-print-schema-type>\r\n        </mat-tab>\r\n      </mat-tab-group>\r\n    </div>\r\n  `,\r\n})\r\nexport class ExamplesComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  examplesLabel = 'Example values :';\r\n\r\n  items: { id: number; value: any; label: string }[] = [];\r\n\r\n  ngOnInit() {\r\n    if (this.schema.examples) {\r\n      this.items = this.schema.examples.map((val, idx) => ({\r\n        id: idx,\r\n        value: val,\r\n        label: `Example ${idx}`,\r\n      }));\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "FalseLabelComponent",
            "id": "component-FalseLabelComponent-69e838c70614de3b0bcce33f68deee7248a2df6e42425a8d74ea86a8ed50a4aa992b5a2ac7483de4167ddf41e0976cb7d8c336e5be6540f1fa713d4afafbdef9",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/false-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-false",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n    none\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-false',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n        none\r\n    </span>\r\n  `,\r\n})\r\nexport class FalseLabelComponent {}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "GenerateFriendlyNameComponent",
            "id": "component-GenerateFriendlyNameComponent-afbfffe4d44873df6e02db2b2a289e1efae76aad16255c860f72e71231775c272140c5175024c2f8669968be5f0cfe670704cc463d986117dc80eb506dbaafca",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jsv-friendly-name",
            "styleUrls": [],
            "styles": [],
            "template": "<!--  In case the schema is always valid or not -->\n<ng-container *ngIf=\"isBoolean(schema)\" else titleOrCustomBlock>\n  <jsv-type-label-switch [type]=\"typedBoolean\" />\n</ng-container>\n\n<ng-template #titleOrCustomBlock>\n\n  <!-- Some people maintaining schemas provide a friendly name by themself -->\n  <ng-container *ngIf=\"typedSchema.title; else customTypeBlock\">\n    {{ typedSchema.title }}\n  </ng-container>\n\n  <!-- -->\n  <ng-template #customTypeBlock>\n    <ng-container *ngIf=\"foundTypes.length === 0; else customTypeLoopBlock\">\n      <jsv-friendly-name-fallback [schema]=\"typedSchema\" />\n    </ng-container>\n    <ng-template #customTypeLoopBlock>\n      <ng-container *ngFor=\"let type of foundTypes; let idx = index\">\n        <jsv-friendly-name-custom [schema]=\"typedSchema\" [type]=\"type\"/>\n        <ng-container *ngIf=\"shouldAddSeparator(idx, foundTypes.length)\">\n          <labels-or />\n        </ng-container>\n      </ng-container>\n    </ng-template>\n\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 64,
                    "type": "JSONSchema",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isBoolean",
                    "args": [
                        {
                            "name": "value",
                            "type": "JSONSchema",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "JSONSchema",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldAddSeparator",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "OrLabelComponent",
                    "type": "component"
                },
                {
                    "name": "TypeLabelSwitchComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameFallbackComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameCustomComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    OrLabelComponent,\r\n} from \"../../labels/index\"\r\n\r\nimport {\r\n    detectedTypes\r\n} from \"../detectTypes\";\r\n\r\nimport {\r\n  TypeLabelSwitchComponent\r\n} from \"../type-label-switch\";\r\n\r\nimport {\r\n    GenerateFriendlyNameFallbackComponent,\r\n    GenerateFriendlyNameCustomComponent\r\n} from \"./index\";\r\n\r\nimport type { JSONSchema, TypeValues } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jsv-friendly-name',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    OrLabelComponent,\r\n    TypeLabelSwitchComponent,\r\n    forwardRef( () => GenerateFriendlyNameFallbackComponent),\r\n    forwardRef( () => GenerateFriendlyNameCustomComponent)\r\n  ],\r\n  template: `\r\n    <!--  In case the schema is always valid or not -->\r\n    <ng-container *ngIf=\"isBoolean(schema)\" else titleOrCustomBlock>\r\n      <jsv-type-label-switch [type]=\"typedBoolean\" />\r\n    </ng-container>\r\n\r\n    <ng-template #titleOrCustomBlock>\r\n\r\n      <!-- Some people maintaining schemas provide a friendly name by themself -->\r\n      <ng-container *ngIf=\"typedSchema.title; else customTypeBlock\">\r\n        {{ typedSchema.title }}\r\n      </ng-container>\r\n\r\n      <!-- -->\r\n      <ng-template #customTypeBlock>\r\n        <ng-container *ngIf=\"foundTypes.length === 0; else customTypeLoopBlock\">\r\n          <jsv-friendly-name-fallback [schema]=\"typedSchema\" />\r\n        </ng-container>\r\n        <ng-template #customTypeLoopBlock>\r\n          <ng-container *ngFor=\"let type of foundTypes; let idx = index\">\r\n            <jsv-friendly-name-custom [schema]=\"typedSchema\" [type]=\"type\"/>\r\n            <ng-container *ngIf=\"shouldAddSeparator(idx, foundTypes.length)\">\r\n              <labels-or />\r\n            </ng-container>\r\n          </ng-container>\r\n        </ng-template>\r\n\r\n    </ng-template>\r\n  `,\r\n})\r\nexport class GenerateFriendlyNameComponent {\r\n  @Input({ required: true }) schema!: JSONSchema;\r\n\r\n  get foundTypes(): TypeValues[] {\r\n    // Unknow types in this case\r\n    if (typeof this.schema === \"boolean\") {\r\n      return [];\r\n    }\r\n    return detectedTypes(this.schema);\r\n  }\r\n\r\n  isBoolean(value: JSONSchema): boolean {\r\n    return typeof value === 'boolean';\r\n  }\r\n\r\n  get typedBoolean(): boolean {\r\n    return this.schema as boolean;\r\n  }\r\n\r\n  get typedSchema(): Exclude<JSONSchema, true | false> {\r\n    return this.schema as Exclude<JSONSchema, true | false>;\r\n  }\r\n\r\n  shouldAddSeparator(idx: number, length: number): boolean {\r\n    return length <= 1 ? false : idx !== length - 1;\r\n  }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "foundTypes": {
                    "name": "foundTypes",
                    "getSignature": {
                        "name": "foundTypes",
                        "type": "[]",
                        "returnType": "TypeValues[]",
                        "line": 66
                    }
                },
                "typedBoolean": {
                    "name": "typedBoolean",
                    "getSignature": {
                        "name": "typedBoolean",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 78
                    }
                },
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "Exclude<JSONSchema,  | >",
                        "line": 82
                    }
                }
            }
        },
        {
            "name": "GenerateFriendlyNameCustomArrayComponent",
            "id": "component-GenerateFriendlyNameCustomArrayComponent-891a3cc38a9c5e14b3aeea6606b48c465f3f309d3c7df4680d3dc11c4a720dda3612262a1b272fad4027ef9d1b8b6179aa7d4b7550f16b483b921ad9960b7028",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/customized-array.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jsv-friendly-name-custom-array",
            "styleUrls": [],
            "styles": [],
            "template": "<!-- KISS return the generic type when specs are messy -->\n<ng-template *ngIf=\"noClearSpecs; else clearSpecs\">\n    <jsv-type-label-switch [type]=\"'array'\"] />\n</ng-template>\n\n<ng-template #clearSpecs>\n\n    <!-- 1) \"prefixItems\" -->\n    <ng-container *ngIf=\"isPrefixItemsArray\">\n        <ng-container *ngFor=\"let subSchema of typedPrefixItemsArray; let idx = index\">\n            <jsv-friendly-name [schema]=\"subSchema\" />\n            {{ shouldAddSeparator(idx, typedPrefixItemsArray.length) ? ',' : '' }}\n        </ng-container>\n    </ng-container>\n\n    <!-- Separator -->\n    <ng-container *ngIf=\"firstSeparator\">\n        {{ ',' }}\n    </ng-container>\n\n    <!-- 2A) \"items\" -->\n    <ng-container *ngIf=\"hasItems\">\n        <ng-container *ngFor=\"let subSchema of itemsAsArray; let idx = index\">\n            <jsv-friendly-name [schema]=\"subSchema\" />\n            {{ shouldAddSeparator(idx, typedPrefixItemsArray.length) ? ',' : '' }}\n        </ng-container>\n    </ng-container>\n\n    <!-- Separator -->\n    <ng-container *ngIf=\"secondSeparator\">\n        {{ ',' }}\n    </ng-container>\n\n    <!-- 2B) \"additionalItems\" (to cover cases for specs below the draft-2020-12 version) -->\n    <ng-container *ngIf=\"hasAdditionalItems\">\n        <jsv-friendly-name [schema]=\"schema.additionalItems!\" />\n    </ng-container>\n\n    <!-- Separator -->\n    <ng-container *ngIf=\"thirdSeparator\">\n        {{ ',' }}\n    </ng-container>\n\n    <!-- 2C) \"unevaluatedItems\" (to cover cases specs >= draft-2020-12 version) -->\n    <ng-container *ngIf=\"hasUnevaluatedItems\">\n        <jsv-friendly-name [schema]=\"schema.unevaluatedItems!\" />\n    </ng-container>\n\n    <!-- Separator -->\n    <ng-container *ngIf=\"fourSeparator\">\n        {{ ',' }}\n    </ng-container>\n\n    <!-- 3) \"contains\" -->\n    <ng-container *ngIf=\"hasContains\">\n        {{ '...' }}\n        {{ ',' }}\n        <jsv-friendly-name [schema]=\"schema.contains!\" />\n    </ng-container>\n\n    <!-- Separator -->\n    <ng-container *ngIf=\"fithSeparator\">\n        {{ ',' }}\n    </ng-container>\n\n    <!-- 4) Is it a open tuple ? -->\n    <ng-container *ngIf=\"isOpenTuple\">\n        {{ '...' }}\n    </ng-container>\n\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 94,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "firstSeparator",
                    "defaultValue": "this.isPrefixItemsArray && this.hasItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "fithSeparator",
                    "defaultValue": "this.hasContains && this.isOpenTuple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "fourSeparator",
                    "defaultValue": "this.hasUnevaluatedItems && this.hasContains",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "secondSeparator",
                    "defaultValue": "this.hasItems && this.hasAdditionalItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "thirdSeparator",
                    "defaultValue": "this.hasAdditionalItems && this.hasUnevaluatedItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 99
                }
            ],
            "methodsClass": [
                {
                    "name": "shouldAddSeparator",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TypeLabelSwitchComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    TypeLabelSwitchComponent,\r\n    GenerateFriendlyNameComponent\r\n} from \"../index\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n    selector: 'jsv-friendly-name-custom-array',\r\n    standalone: true,\r\n    imports: [\r\n      CommonModule,\r\n      TypeLabelSwitchComponent,\r\n      forwardRef(() => GenerateFriendlyNameComponent)\r\n    ],\r\n    template: `\r\n        <!-- KISS return the generic type when specs are messy -->\r\n        <ng-template *ngIf=\"noClearSpecs; else clearSpecs\">\r\n            <jsv-type-label-switch [type]=\"'array'\"] />\r\n        </ng-template>\r\n\r\n        <ng-template #clearSpecs>\r\n\r\n            <!-- 1) \"prefixItems\" -->\r\n            <ng-container *ngIf=\"isPrefixItemsArray\">\r\n                <ng-container *ngFor=\"let subSchema of typedPrefixItemsArray; let idx = index\">\r\n                    <jsv-friendly-name [schema]=\"subSchema\" />\r\n                    {{ shouldAddSeparator(idx, typedPrefixItemsArray.length) ? ',' : '' }}\r\n                </ng-container>\r\n            </ng-container>\r\n\r\n            <!-- Separator -->\r\n            <ng-container *ngIf=\"firstSeparator\">\r\n                {{ ',' }}\r\n            </ng-container>\r\n\r\n            <!-- 2A) \"items\" -->\r\n            <ng-container *ngIf=\"hasItems\">\r\n                <ng-container *ngFor=\"let subSchema of itemsAsArray; let idx = index\">\r\n                    <jsv-friendly-name [schema]=\"subSchema\" />\r\n                    {{ shouldAddSeparator(idx, typedPrefixItemsArray.length) ? ',' : '' }}\r\n                </ng-container>\r\n            </ng-container>\r\n\r\n            <!-- Separator -->\r\n            <ng-container *ngIf=\"secondSeparator\">\r\n                {{ ',' }}\r\n            </ng-container>\r\n\r\n            <!-- 2B) \"additionalItems\" (to cover cases for specs below the draft-2020-12 version) -->\r\n            <ng-container *ngIf=\"hasAdditionalItems\">\r\n                <jsv-friendly-name [schema]=\"schema.additionalItems!\" />\r\n            </ng-container>\r\n\r\n            <!-- Separator -->\r\n            <ng-container *ngIf=\"thirdSeparator\">\r\n                {{ ',' }}\r\n            </ng-container>\r\n\r\n            <!-- 2C) \"unevaluatedItems\" (to cover cases specs >= draft-2020-12 version) -->\r\n            <ng-container *ngIf=\"hasUnevaluatedItems\">\r\n                <jsv-friendly-name [schema]=\"schema.unevaluatedItems!\" />\r\n            </ng-container>\r\n\r\n            <!-- Separator -->\r\n            <ng-container *ngIf=\"fourSeparator\">\r\n                {{ ',' }}\r\n            </ng-container>\r\n\r\n            <!-- 3) \"contains\" -->\r\n            <ng-container *ngIf=\"hasContains\">\r\n                {{ '...' }}\r\n                {{ ',' }}\r\n                <jsv-friendly-name [schema]=\"schema.contains!\" />\r\n            </ng-container>\r\n\r\n            <!-- Separator -->\r\n            <ng-container *ngIf=\"fithSeparator\">\r\n                {{ ',' }}\r\n            </ng-container>\r\n\r\n            <!-- 4) Is it a open tuple ? -->\r\n            <ng-container *ngIf=\"isOpenTuple\">\r\n                {{ '...' }}\r\n            </ng-container>\r\n\r\n        </ng-template>\r\n    `\r\n})\r\nexport class GenerateFriendlyNameCustomArrayComponent {\r\n    @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n    // For separators\r\n    firstSeparator : boolean = this.isPrefixItemsArray && this.hasItems;\r\n    secondSeparator : boolean = this.hasItems && this.hasAdditionalItems;\r\n    thirdSeparator : boolean = this.hasAdditionalItems && this.hasUnevaluatedItems;\r\n    fourSeparator : boolean = this.hasUnevaluatedItems && this.hasContains;\r\n    fithSeparator : boolean = this.hasContains && this.isOpenTuple;\r\n\r\n    // No clear specifications about the contents of the array ?\r\n    get noClearSpecs(): boolean {\r\n        return [undefined, false].includes(this.schema.items as any) &&\r\n            [undefined, false].includes(this.schema.prefixItems as any) &&\r\n            this.schema.contains === undefined;\r\n    }\r\n\r\n    get isPrefixItemsArray(): boolean {\r\n        return Array.isArray(this.schema.prefixItems);\r\n    }\r\n\r\n    get typedPrefixItemsArray() {\r\n        return this.schema.prefixItems as JSONSchema[];\r\n    }\r\n\r\n    shouldAddSeparator(idx: number, length: number): boolean {\r\n        return length <= 1 ? false : idx !== length - 1;\r\n    }\r\n\r\n    get hasItems() : boolean {\r\n        return this.schema.items !== undefined && typeof this.schema.items !== \"boolean\";\r\n    }\r\n\r\n    get itemsAsArray() : JSONSchema[] {\r\n        return (Array.isArray(this.schema.items) ? this.schema.items : [this.schema.items]) as JSONSchema[];\r\n    }\r\n\r\n    get hasAdditionalItems(): boolean {\r\n        return this.schema.additionalItems !== undefined && typeof this.schema.additionalItems !== \"boolean\";\r\n    }\r\n\r\n    get hasUnevaluatedItems(): boolean {\r\n        return this.schema.unevaluatedItems !== undefined && typeof this.schema.unevaluatedItems !== \"boolean\";\r\n    }\r\n\r\n    get hasContains(): boolean {\r\n        return this.schema.contains !== undefined;\r\n    }\r\n\r\n    get isOpenTuple(): boolean {\r\n        return !(\r\n            (this.schema as JSONSchemaNS.Array).unevaluatedItems === false ||\r\n            this.schema.items === false ||\r\n            this.schema.additionalItems === false\r\n        );\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "noClearSpecs": {
                    "name": "noClearSpecs",
                    "getSignature": {
                        "name": "noClearSpecs",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 104
                    }
                },
                "isPrefixItemsArray": {
                    "name": "isPrefixItemsArray",
                    "getSignature": {
                        "name": "isPrefixItemsArray",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 110
                    }
                },
                "typedPrefixItemsArray": {
                    "name": "typedPrefixItemsArray",
                    "getSignature": {
                        "name": "typedPrefixItemsArray",
                        "type": "",
                        "returnType": "",
                        "line": 114
                    }
                },
                "hasItems": {
                    "name": "hasItems",
                    "getSignature": {
                        "name": "hasItems",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 122
                    }
                },
                "itemsAsArray": {
                    "name": "itemsAsArray",
                    "getSignature": {
                        "name": "itemsAsArray",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 126
                    }
                },
                "hasAdditionalItems": {
                    "name": "hasAdditionalItems",
                    "getSignature": {
                        "name": "hasAdditionalItems",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 130
                    }
                },
                "hasUnevaluatedItems": {
                    "name": "hasUnevaluatedItems",
                    "getSignature": {
                        "name": "hasUnevaluatedItems",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 134
                    }
                },
                "hasContains": {
                    "name": "hasContains",
                    "getSignature": {
                        "name": "hasContains",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 138
                    }
                },
                "isOpenTuple": {
                    "name": "isOpenTuple",
                    "getSignature": {
                        "name": "isOpenTuple",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 142
                    }
                }
            }
        },
        {
            "name": "GenerateFriendlyNameCustomComponent",
            "id": "component-GenerateFriendlyNameCustomComponent-9bd9ae3edca1bf15ef19cdc37b0eb55af7d23d8b3ec55c24895a340835485c0e9bb899ca718bb9174cbfab0a9e9e3a09cfc0e3a02e3cbecfc933f92fb7309722",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/customized-name.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jsv-friendly-name-custom",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"type === 'string' && schema.format !== undefined\">\n    <jsv-type-label-switch [type]=\"schema.format\" />\n</ng-container>\n<ng-container *ngIf=\"type === 'array'\">\n    <jsv-friendly-name-custom-array [schema]=\"asTypedArray\" />\n</ng-container>\n<ng-container *ngIf=\"type !== 'string' && type !== 'array'\">\n    <jsv-type-label-switch [type]=\"type\" />\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 35,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "TypeValues | string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TypeLabelSwitchComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameCustomArrayComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    TypeLabelSwitchComponent,\r\n} from \"../index\"\r\n\r\nimport {\r\n    GenerateFriendlyNameCustomArrayComponent\r\n} from \"./index\";\r\n\r\nimport type { JSONSchema, JSONSchemaNS, TypeValues } from \"../../types\";\r\n\r\n@Component({\r\n    selector: 'jsv-friendly-name-custom',\r\n    standalone: true,\r\n    imports: [\r\n      CommonModule,\r\n      TypeLabelSwitchComponent,\r\n      forwardRef(() => GenerateFriendlyNameCustomArrayComponent)\r\n    ],\r\n    template: `\r\n        <ng-container *ngIf=\"type === 'string' && schema.format !== undefined\">\r\n            <jsv-type-label-switch [type]=\"schema.format\" />\r\n        </ng-container>\r\n        <ng-container *ngIf=\"type === 'array'\">\r\n            <jsv-friendly-name-custom-array [schema]=\"asTypedArray\" />\r\n        </ng-container>\r\n        <ng-container *ngIf=\"type !== 'string' && type !== 'array'\">\r\n            <jsv-type-label-switch [type]=\"type\" />\r\n        </ng-container>\r\n    `\r\n})\r\nexport class GenerateFriendlyNameCustomComponent {\r\n    @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n    @Input() type!: TypeValues | string;\r\n\r\n    get asTypedArray() {\r\n        return this.schema as JSONSchemaNS.Array;\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "asTypedArray": {
                    "name": "asTypedArray",
                    "getSignature": {
                        "name": "asTypedArray",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                }
            }
        },
        {
            "name": "GenerateFriendlyNameFallbackComponent",
            "id": "component-GenerateFriendlyNameFallbackComponent-066ead3d7662093ef480f583078590dc1b2ab5cd346ba8dbf537fb014f39186f2c21d66d0748e29778b21da4aae2fb010381d09b269b046bb82255113985600d",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name-fallback.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jsv-friendly-name-fallback",
            "styleUrls": [],
            "styles": [],
            "template": "<!--  1. we have a Schema Composition case (not, allOf, ...) -->\n\n<!--  1A) the \"not\" case -->\n<ng-container *ngIf=\"hasNotKeyword\">\n    <labels-not />\n    {{ ' (' }}\n    <jsv-friendly-name [schema]=\"schema.not!\" />\n    {{ ' ) ' }}\n</ng-container>\n\n<!--  1B) the \"allOf\" / \"oneOf\" / \"anyOf\" -->\n<ng-template *ngIf=\"hasOfKeyword; else defaultStrategy\">\n    <ng-container *ngFor=\"let elem of elementsOf; let idx = index\">\n        <jsv-friendly-name [schema]=\"elem\" />\n        <ng-container *ngIf=\"shouldAddSeparator(idx, elementsOf.length)\">\n            <ng-container [ngSwitch]=\"linkword\">\n                <labels-or *ngSwitchCase=\"'OR'\" />\n                <labels-xor *ngSwitchCase=\"'XOR'\" />\n                <labels-and *ngSwitchCase=\"'AND'\" />\n            </ng-container>\n        </ng-container>\n    </ng-container>\n</ng-template>\n\n<!--  2. Assume it is \"any\" by default -->\n<ng-template #defaultStrategy>\n    <jsv-type-label-switch [type]=\"true\"] />\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 67,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "hasNotKeyword",
                    "defaultValue": "this.schema.not !== undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "hasOfKeyword",
                    "defaultValue": "this.schema.allOf !== undefined || this.schema.anyOf !== undefined || this.schema.oneOf !== undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "linkword",
                    "defaultValue": "this.schema.anyOf ? \"OR\" : this.schema.oneOf ? \"XOR\" : \"AND\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LinkType",
                    "optional": false,
                    "description": "",
                    "line": 76
                }
            ],
            "methodsClass": [
                {
                    "name": "shouldAddSeparator",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NotLabelComponent",
                    "type": "component"
                },
                {
                    "name": "AndLabelComponent",
                    "type": "component"
                },
                {
                    "name": "XorLabelComponent",
                    "type": "component"
                },
                {
                    "name": "OrLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameComponent)",
                    "type": "component"
                },
                {
                    "name": "TypeLabelSwitchComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    AndLabelComponent,\r\n    NotLabelComponent,\r\n    OrLabelComponent,\r\n    XorLabelComponent\r\n} from \"../../labels/index\";\r\n\r\nimport {\r\n    GenerateFriendlyNameComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelSwitchComponent\r\n} from \"../index\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\ntype LinkType = \"AND\" | \"OR\" | \"XOR\";\r\n\r\n@Component({\r\n    selector: 'jsv-friendly-name-fallback',\r\n    standalone: true,\r\n    imports: [\r\n      CommonModule,\r\n      NotLabelComponent,\r\n      AndLabelComponent,\r\n      XorLabelComponent,\r\n      OrLabelComponent,\r\n      forwardRef(() => GenerateFriendlyNameComponent),\r\n      TypeLabelSwitchComponent\r\n    ],\r\n    template: `\r\n        <!--  1. we have a Schema Composition case (not, allOf, ...) -->\r\n\r\n        <!--  1A) the \"not\" case -->\r\n        <ng-container *ngIf=\"hasNotKeyword\">\r\n            <labels-not />\r\n            {{ ' (' }}\r\n            <jsv-friendly-name [schema]=\"schema.not!\" />\r\n            {{ ' ) ' }}\r\n        </ng-container>\r\n\r\n        <!--  1B) the \"allOf\" / \"oneOf\" / \"anyOf\" -->\r\n        <ng-template *ngIf=\"hasOfKeyword; else defaultStrategy\">\r\n            <ng-container *ngFor=\"let elem of elementsOf; let idx = index\">\r\n                <jsv-friendly-name [schema]=\"elem\" />\r\n                <ng-container *ngIf=\"shouldAddSeparator(idx, elementsOf.length)\">\r\n                    <ng-container [ngSwitch]=\"linkword\">\r\n                        <labels-or *ngSwitchCase=\"'OR'\" />\r\n                        <labels-xor *ngSwitchCase=\"'XOR'\" />\r\n                        <labels-and *ngSwitchCase=\"'AND'\" />\r\n                    </ng-container>\r\n                </ng-container>\r\n            </ng-container>\r\n        </ng-template>\r\n\r\n        <!--  2. Assume it is \"any\" by default -->\r\n        <ng-template #defaultStrategy>\r\n            <jsv-type-label-switch [type]=\"true\"] />\r\n        </ng-template>\r\n    `\r\n})\r\nexport class GenerateFriendlyNameFallbackComponent {\r\n    @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>\r\n\r\n    // has a \"...Of\" keyword ?\r\n    hasOfKeyword : boolean = this.schema.allOf !== undefined || this.schema.anyOf !== undefined || this.schema.oneOf !== undefined;\r\n\r\n    // has a \"not\" keyword ?\r\n    hasNotKeyword : boolean = this.schema.not !== undefined;\r\n\r\n    // Kind of operators to use ?\r\n    linkword : LinkType = this.schema.anyOf ? \"OR\" : this.schema.oneOf ? \"XOR\" : \"AND\";\r\n\r\n    shouldAddSeparator(idx: number, length: number): boolean {\r\n        return length <= 1 ? false : idx !== length - 1;\r\n    }\r\n\r\n    // allOf / anyOf / oneOf\r\n    get elementsOf() : JSONSchema[] {\r\n        return (this.schema.allOf || this.schema.anyOf || this.schema.oneOf || []) as JSONSchema[];\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "elementsOf": {
                    "name": "elementsOf",
                    "getSignature": {
                        "name": "elementsOf",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 83
                    }
                }
            }
        },
        {
            "name": "IfElseThenComponent",
            "id": "component-IfElseThenComponent-b6b69b433557eb10294f01fd7c970e6c56c0e81efc1f77322b6fe0f4f2538f99bea72d3cb2ed0edf62ff07eba4ff9329fd5977a54dae6e1bb207158a9361f7d6",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/if-else-then.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-conditional-if-else-then",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-tab-group>\n  <mat-tab *ngFor=\"let val of values\">\n    <ng-template mat-tab-label>\n      <ng-container *ngIf=\"val.key === 'if'; else elseTemplate\">\n        <labels-if />\n      </ng-container>\n      <ng-template #elseTemplate>\n        <ng-container *ngIf=\"val.key === 'then'; else otherElseTemplate\">\n          <labels-then />\n        </ng-container>\n        <ng-template #otherElseTemplate>\n          <labels-else />\n        </ng-template>\n      </ng-template>\n    </ng-template>\n    <ng-template matTabContent>\n        <jse-common-create-nodes [schema]=\"val.schema\" />\n    </ng-template>\n  </mat-tab>\n</mat-tab-group>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 46,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "IfLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ThenLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ElseLabelComponent",
                    "type": "component"
                },
                {
                    "name": "CreateNodesComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\n\r\nimport { CreateNodesComponent } from \"../../common/create-nodes\";\r\n\r\nimport { IfLabelComponent, ThenLabelComponent, ElseLabelComponent } from \"../../labels/index\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-conditional-if-else-then',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    MatTabsModule,\r\n    IfLabelComponent,\r\n    ThenLabelComponent,\r\n    ElseLabelComponent,\r\n    CreateNodesComponent\r\n  ],\r\n  template: `\r\n    <mat-tab-group>\r\n      <mat-tab *ngFor=\"let val of values\">\r\n        <ng-template mat-tab-label>\r\n          <ng-container *ngIf=\"val.key === 'if'; else elseTemplate\">\r\n            <labels-if />\r\n          </ng-container>\r\n          <ng-template #elseTemplate>\r\n            <ng-container *ngIf=\"val.key === 'then'; else otherElseTemplate\">\r\n              <labels-then />\r\n            </ng-container>\r\n            <ng-template #otherElseTemplate>\r\n              <labels-else />\r\n            </ng-template>\r\n          </ng-template>\r\n        </ng-template>\r\n        <ng-template matTabContent>\r\n            <jse-common-create-nodes [schema]=\"val.schema\" />\r\n        </ng-template>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n  `,\r\n})\r\nexport class IfElseThenComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get hasThen(): boolean {\r\n    return this.schema.then !== undefined;\r\n  }\r\n\r\n  get hasElse(): boolean {\r\n    return this.schema.else !== undefined;\r\n  }\r\n\r\n  get values(): { key: string, schema: JSONSchema }[] {\r\n    const values = [\r\n      {\r\n        key: \"if\",\r\n        schema: this.schema.if!,\r\n      },\r\n      this.hasThen && {\r\n        key: \"then\",\r\n        schema: this.schema.then!,\r\n      },\r\n      this.hasElse && {\r\n        key: \"else\",\r\n        schema: this.schema.else!,\r\n      },\r\n    ].filter((v) => !!v) as { key: string, schema: JSONSchema }[];\r\n\r\n    return values;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "hasThen": {
                    "name": "hasThen",
                    "getSignature": {
                        "name": "hasThen",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 48
                    }
                },
                "hasElse": {
                    "name": "hasElse",
                    "getSignature": {
                        "name": "hasElse",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 52
                    }
                },
                "values": {
                    "name": "values",
                    "getSignature": {
                        "name": "values",
                        "type": "[]",
                        "returnType": "literal type[]",
                        "line": 56
                    }
                }
            }
        },
        {
            "name": "IfLabelComponent",
            "id": "component-IfLabelComponent-2681da708a0ef6014bc153231f1d55e39e3c68ea86bf8703e0d727817de71b273b06e17f069bcfbea5f059d7f8adf80e856eb7884354c769b51a02e54fab0d53",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/if-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-if",
            "styleUrls": [],
            "styles": [],
            "template": "<strong>\n    If\n</strong>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-if',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <strong>\r\n        If\r\n    </strong>\r\n  `,\r\n})\r\nexport class IfLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "IntegerLabelComponent",
            "id": "component-IntegerLabelComponent-8b09cd410cef210ccbfa99059f0cf8e1ed27bd7452ce7d6cbc6578adeabea646e656032ae008ed943a66bd1b1cbc50af542f653f0bf40fd2300958dab0aa2bd1",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/integer-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-integer",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  integer\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-integer',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      integer\r\n    </span>\r\n  `,\r\n})\r\nexport class IntegerLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "LoadingLabelComponent",
            "id": "component-LoadingLabelComponent-9dde4e2e1cb54f74d445773d95331ecf5fe1eaf4ac56203e1a6d72f2b7d12d5aa8fffe1df33d23e06faa394dba0ae389a579cf035d36ab4d5c79bc019919726f",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/loading-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-loading",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    Loading ....\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-loading',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div>\r\n        Loading ....\r\n    </div>\r\n  `,\r\n})\r\nexport class LoadingLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "MultipleOfComponent",
            "id": "component-MultipleOfComponent-a5bf2de2575e7d5e906be7daeaae78f82beeb8addc6f9b04e9498aecc59d833b80f1f38871c5eabb590563309f28c9a0a69b3b0c60416d7746c4f6d016910cf5",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/number-multiple-of.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-multiple-of",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ possibleValuesLabel }}</strong>&nbsp;\n  <code>\n    <ng-container>\n      Possible values :\n    </ng-container>\n    <ng-container>\n      multiple of {{ schema.multipleOf }}\n    </ng-container>\n  </code>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 24,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "possibleValuesLabel",
                    "defaultValue": "'Possible values :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-multiple-of',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div>\r\n      <strong>{{ possibleValuesLabel }}</strong>&nbsp;\r\n      <code>\r\n        <ng-container>\r\n          Possible values :\r\n        </ng-container>\r\n        <ng-container>\r\n          multiple of {{ schema.multipleOf }}\r\n        </ng-container>\r\n      </code>\r\n    </div>\r\n  `,\r\n})\r\nexport class MultipleOfComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  possibleValuesLabel = 'Possible values :';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NgxJsonSchemaViewerComponent",
            "id": "component-NgxJsonSchemaViewerComponent-9ca89127da6cf19caa3671307eebd93d7a33e59638a1b4b0ca75fba28a8f506f78e93b40080e22e6871d5b3c7d569f135c17f30404a3d20e22b08de8141a8c8c",
            "file": "projects/ngx-json-schema-viewer/src/lib/ngx-json-schema-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngx-json-schema-viewer",
            "styleUrls": [],
            "styles": [],
            "template": "<!-- Error ... -->\n<div *ngIf=\"error !== undefined\">\n  <labels-error-occurred [error]=\"error!\"/>\n</div>\n<!-- Loading ... -->\n<div *ngIf=\"resolvedSchema === undefined && error === undefined\">\n  <labels-loading />\n</div>\n\n<!-- Schema -->\n<div *ngIf=\"resolvedSchema !== undefined\">\n  <mat-accordion>\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n        <strong>\n          {{ getSchemaTitle }}\n        </strong>\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <jse-common-create-nodes [schema]=\"resolvedSchema\" />\n  </mat-accordion>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resolverOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "IResolveOpts",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 41,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Error | undefined",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "resolvedSchema",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JSONSchema",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resolveSchema",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n// services\nimport { SchemaResolutionService } from './services/schema-resolver';\n\nimport type { JSONSchema } from './types';\nimport type { IResolveOpts } from \"@stoplight/json-ref-resolver/types\"\n\n@Component({\n  selector: 'ngx-json-schema-viewer',\n  template: `\n    <!-- Error ... -->\n    <div *ngIf=\"error !== undefined\">\n      <labels-error-occurred [error]=\"error!\"/>\n    </div>\n    <!-- Loading ... -->\n    <div *ngIf=\"resolvedSchema === undefined && error === undefined\">\n      <labels-loading />\n    </div>\n\n    <!-- Schema -->\n    <div *ngIf=\"resolvedSchema !== undefined\">\n      <mat-accordion>\n        <mat-expansion-panel-header>\n          <mat-panel-title>\n            <strong>\n              {{ getSchemaTitle }}\n            </strong>\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n        <jse-common-create-nodes [schema]=\"resolvedSchema\" />\n      </mat-accordion>\n    </div>\n  `,\n  styles: [\n  ]\n})\nexport class NgxJsonSchemaViewerComponent implements OnInit {\n  @Input({ required: true }) schema: unknown;\n  @Input() resolverOptions?: IResolveOpts;\n  resolvedSchema: JSONSchema = false;\n  error: Error | undefined;\n  \n  constructor(\n    private schemaResolutionService: SchemaResolutionService\n  ) {}\n\n  ngOnInit(): void {\n    // Perform the asynchronous schema resolution\n    this.resolveSchema();\n  }\n\n  resolveSchema() {\n    this.schemaResolutionService\n      .resolveSchema(this.schema, this.resolverOptions)\n      .pipe(\n        catchError((error) => {\n          this.error = error;\n          return throwError(error);\n        })\n      )\n      .subscribe((result) => {\n        this.resolvedSchema = result;\n      });\n  }\n\n  get getSchemaTitle() : string {\n    if (typeof this.resolvedSchema !== \"boolean\" && this.resolvedSchema.title !== undefined) {\n      return this.resolvedSchema.title;\n    }\n    return \"Schema\";\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "schemaResolutionService",
                        "type": "SchemaResolutionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "schemaResolutionService",
                        "type": "SchemaResolutionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "getSchemaTitle": {
                    "name": "getSchemaTitle",
                    "getSignature": {
                        "name": "getSchemaTitle",
                        "type": "string",
                        "returnType": "string",
                        "line": 69
                    }
                }
            }
        },
        {
            "name": "NoExtraItemsComponent",
            "id": "component-NoExtraItemsComponent-aa397dae3ae89d44f4879dbc67ac0a2bf86f10a7e3b38b1bf649d8e54505f8d7378cee316b0e01bd7f94d93ad3f0185f382b5a0cf3922c88d65d665345f0fe09",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/no-extra-items.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-no-extra-items",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span>🚨&nbsp;</span>\n  <ng-container>No extra item(s) are authorized in this array</ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-no-extra-items',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div>\r\n      <span>🚨&nbsp;</span>\r\n      <ng-container>No extra item(s) are authorized in this array</ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class NoExtraItemsComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NoExtraPropertiesComponent",
            "id": "component-NoExtraPropertiesComponent-fffc5e09fc2cedeaca053fe253039a78e565f68514b69999371441ae6552aec10ae0a07d2ff706ff0372654ac93f0e67132bcbdc15b26dcb65172780623db3eb",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/no-extra-properties.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-no-extra-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span>🚨&nbsp;</span>\n  <ng-container>No extra propertie(s) are authorized in this object</ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-no-extra-properties',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div>\r\n      <span>🚨&nbsp;</span>\r\n      <ng-container>No extra propertie(s) are authorized in this object</ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class NoExtraPropertiesComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NotLabelComponent",
            "id": "component-NotLabelComponent-804ccde16dd33f894d2e1c26784e4b5c82b21f5492569cbdb2dcaff8ef506adaed83c4605c0a01816fe3f9bcd2078b55cd075890106c070f54451f88c62f679c",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/not-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-not",
            "styleUrls": [],
            "styles": [],
            "template": "<strong>\n  NOT\n</strong>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-not',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <strong>\r\n      NOT\r\n    </strong>\r\n  `,\r\n})\r\nexport class NotLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NotSchemaComponent",
            "id": "component-NotSchemaComponent-a9396b9f033e2bf138fa5156e222b5b0dbbadee6c3786fed67d5366f4d5e076c0b45f650a7e3d22f087ba3adf1efe690db4f61a36fd5c152b56c5564beb99654",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/not.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-composition-not",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <span class=\"badge badge--info\">{{ typeOf }}</span>\n    <br />\n    <jse-common-create-nodes [schema]=\"typedSchema\" />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 20,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CreateNodesComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\nimport { CreateNodesComponent } from \"../../common/create-nodes\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-composition-not',\r\n  standalone: true,\r\n  imports: [CreateNodesComponent],\r\n  template: `\r\n    <div>\r\n        <span class=\"badge badge--info\">{{ typeOf }}</span>\r\n        <br />\r\n        <jse-common-create-nodes [schema]=\"typedSchema\" />\r\n    </div>\r\n  `,\r\n})\r\nexport class NotSchemaComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): JSONSchema {\r\n    return this.schema.not!;\r\n  }\r\n\r\n  get typeOf(): string {\r\n    return \"not\";\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "JSONSchema",
                        "line": 22
                    }
                },
                "typeOf": {
                    "name": "typeOf",
                    "getSignature": {
                        "name": "typeOf",
                        "type": "string",
                        "returnType": "string",
                        "line": 26
                    }
                }
            }
        },
        {
            "name": "NullableComponent",
            "id": "component-NullableComponent-21b5d32774fcb25aa347e567f82600d85bd9150a3413f55c424b6377a04dd870c200497217c30ca7f0ab5c1b76f23ef0f051ba361489cff94cafe6858d2109fb",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/nullable.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-nullable",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span>❓&nbsp;</span>\n  <ng-container>Nullable</ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-nullable',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div>\r\n      <span>❓&nbsp;</span>\r\n      <ng-container>Nullable</ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class NullableComponent {}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NullLabelComponent",
            "id": "component-NullLabelComponent-7f2d1f3d705a628a05fdfbfe8009c886295510e72b2fcecb14b19b43e3990879a12d21d4cbbbc19af435de6c9b80a7351f0fd441a863b70e88f2aeb62b13169b",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/null-labels.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-null",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  null\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-null',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      null\r\n    </span>\r\n  `,\r\n})\r\nexport class NullLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NumberBoundsComponent",
            "id": "component-NumberBoundsComponent-d5af7e473e59b20b3cde87fdb02fd56337577c1e7f4b3ac7e7b0766d31fa6042300ef4c81276f292d2ae9dac6131a82465bcbae79d71b01cdb984be83fe1caca",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/number-bounds.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-number-bounds",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ boundsLabel }}</strong>&nbsp;\n  <ng-container *ngIf=\"minimum !== undefined\">\n    <code>\n      <span *ngIf=\"isExclusiveMinimum\">&gt;</span>\n      <span *ngIf=\"!isExclusiveMinimum\">&ge;</span>\n      {{ minimum }}\n    </code>\n  </ng-container>\n  <ng-container *ngIf=\"minAndMax\">\n    <labels-and />\n  </ng-container>\n  <ng-container *ngIf=\"maximum !== undefined\">\n    <code>\n      <span *ngIf=\"isExclusiveMaximum\">&lt;</span>\n      <span *ngIf=\"!isExclusiveMaximum\">&le;</span>\n      {{ maximum }}\n    </code>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 38,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boundsLabel",
                    "defaultValue": "'Possible values :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "isExclusiveMaximum",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "isExclusiveMinimum",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "maximum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "minAndMax",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "minimum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AndLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  AndLabelComponent\r\n} from \"../../labels/index\";\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-number-bounds',\r\n  standalone: true,\r\n  imports: [CommonModule, AndLabelComponent],\r\n  template: `\r\n    <div>\r\n      <strong>{{ boundsLabel }}</strong>&nbsp;\r\n      <ng-container *ngIf=\"minimum !== undefined\">\r\n        <code>\r\n          <span *ngIf=\"isExclusiveMinimum\">&gt;</span>\r\n          <span *ngIf=\"!isExclusiveMinimum\">&ge;</span>\r\n          {{ minimum }}\r\n        </code>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"minAndMax\">\r\n        <labels-and />\r\n      </ng-container>\r\n      <ng-container *ngIf=\"maximum !== undefined\">\r\n        <code>\r\n          <span *ngIf=\"isExclusiveMaximum\">&lt;</span>\r\n          <span *ngIf=\"!isExclusiveMaximum\">&le;</span>\r\n          {{ maximum }}\r\n        </code>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class NumberBoundsComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  boundsLabel = 'Possible values :';\r\n\r\n  minimum: number | undefined;\r\n  isExclusiveMinimum = false;\r\n  maximum: number | undefined;\r\n  isExclusiveMaximum = false;\r\n  minAndMax = false;\r\n\r\n  ngOnInit() {\r\n    this.minimum = this.schema.exclusiveMinimum || this.schema.minimum;\r\n    this.isExclusiveMinimum = this.schema.exclusiveMinimum !== undefined;\r\n    this.maximum = this.schema.exclusiveMaximum || this.schema.maximum;\r\n    this.isExclusiveMaximum = this.schema.exclusiveMaximum !== undefined;\r\n    this.minAndMax = this.minimum !== undefined && this.maximum !== undefined;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NumberLabelComponent",
            "id": "component-NumberLabelComponent-f13f5e501a37ff3e1192fc3aa5c9f305afc2a062c5be82f47ee1fd9ec5fc3204ab1e7b095301c5ad897cedab994c541ab08bf92c5775903d31b2873d25b23fd3",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/number-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-number",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  number\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-number',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      number\r\n    </span>\r\n  `,\r\n})\r\nexport class NumberLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ObjectLabelComponent",
            "id": "component-ObjectLabelComponent-cf67600894cc00bd9479981cd15efd8d64da138fada1188f8538d72709ce1c4f8bec96fb4c743c3d85a69e145127a47adfecfb4abf6c119eca966c7b36e4a5c8",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/object-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-object",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  object\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-object',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      object\r\n    </span>\r\n  `,\r\n})\r\nexport class ObjectLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ObjectPropertiesComponent",
            "id": "component-ObjectPropertiesComponent-34328d53766c4d941cf27af84e57b058e89dd69874d5e90cd7c51e4caccb3f3115e8c28e08c942a842d330119880d053168fef33b550c8245ebe25ba5cc08425",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/object-properties.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-object-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ lengthLabel }}</strong>&nbsp;\n  <ng-container *ngIf=\"schema.minProperties !== undefined\">\n    <code>\n        {{ '>= ' + schema.minProperties + ' propertie(s)' }}\n    </code>\n  </ng-container>\n  <ng-container *ngIf=\"minAndMax\">\n    <span>&nbsp;&&nbsp;</span>\n  </ng-container>\n  <ng-container *ngIf=\"schema.maxProperties !== undefined\">\n    <code>\n        {{ '<= ' + schema.maxProperties + ' propertie(s)' }}\n    </code>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 30,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "lengthLabel",
                    "defaultValue": "'Length :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "minAndMax",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-object-properties',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div>\r\n      <strong>{{ lengthLabel }}</strong>&nbsp;\r\n      <ng-container *ngIf=\"schema.minProperties !== undefined\">\r\n        <code>\r\n            {{ '>= ' + schema.minProperties + ' propertie(s)' }}\r\n        </code>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"minAndMax\">\r\n        <span>&nbsp;&&nbsp;</span>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"schema.maxProperties !== undefined\">\r\n        <code>\r\n            {{ '<= ' + schema.maxProperties + ' propertie(s)' }}\r\n        </code>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class ObjectPropertiesComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n  lengthLabel = 'Length :';\r\n\r\n  minAndMax: boolean = false;\r\n\r\n  ngOnInit() {\r\n    this.minAndMax =\r\n      this.schema.minProperties !== undefined &&\r\n      this.schema.maxProperties !== undefined;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "OneOfSchemaComponent",
            "id": "component-OneOfSchemaComponent-e7dca85a8a3aea5554fdc4ad1ead879a0573a649ff28358dae969c70c7af470f9cfe17db92ba920bb55c7e1d9dc62e3817c8b00a855b583174e5c99be6cc6c7f",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/one-of.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-composition-one-of",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span class=\"badge badge--info\">{{ typeOf }}</span>\n  <mat-tab-group>\n    <mat-tab *ngFor=\"let compositeSchema of typedSchema\">\n      <ng-template mat-tab-label>\n        <jsv-friendly-name [schema]=\"compositeSchema\" />\n      </ng-template>\n      <jse-common-create-nodes [schema]=\"compositeSchema\" />\n    </mat-tab>\n  </mat-tab-group>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 29,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "GenerateFriendlyNameComponent",
                    "type": "component"
                },
                {
                    "name": "CreateNodesComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\n\r\nimport { GenerateFriendlyNameComponent } from \"../../utils/index\";\r\nimport { CreateNodesComponent } from \"../../common/create-nodes\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-composition-one-of',\r\n  standalone: true,\r\n  imports: [CommonModule, MatTabsModule, GenerateFriendlyNameComponent, CreateNodesComponent],\r\n  template: `\r\n    <div>\r\n      <span class=\"badge badge--info\">{{ typeOf }}</span>\r\n      <mat-tab-group>\r\n        <mat-tab *ngFor=\"let compositeSchema of typedSchema\">\r\n          <ng-template mat-tab-label>\r\n            <jsv-friendly-name [schema]=\"compositeSchema\" />\r\n          </ng-template>\r\n          <jse-common-create-nodes [schema]=\"compositeSchema\" />\r\n        </mat-tab>\r\n      </mat-tab-group>\r\n    </div>\r\n  `,\r\n})\r\nexport class OneOfSchemaComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): JSONSchema[] {\r\n    return this.schema.oneOf! as JSONSchema[];\r\n  }\r\n\r\n  get typeOf(): string {\r\n    return \"oneOf\";\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 31
                    }
                },
                "typeOf": {
                    "name": "typeOf",
                    "getSignature": {
                        "name": "typeOf",
                        "type": "string",
                        "returnType": "string",
                        "line": 35
                    }
                }
            }
        },
        {
            "name": "OrLabelComponent",
            "id": "component-OrLabelComponent-086af1365fa93b1b9382463a76122e768e5b0770a75aab4ead4cdcb296132e5fe9253de46c9d5f829967f1e1fcb179c1f80cbd5bd7923e824ca9488d5cd186ec",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/or-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-or",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n<strong>OR</strong>\n<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n\n<ng-template #spaceTemplate>\n  &nbsp;\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-or',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n    <strong>OR</strong>\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n\r\n    <ng-template #spaceTemplate>\r\n      &nbsp;\r\n    </ng-template>\r\n  `,\r\n})\r\nexport class OrLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "PatternComponent",
            "id": "component-PatternComponent-5169ccb51450d844ccd12890b15e003fff7d20af1125aaeb658799cda8e5195133da3eba527a0b88da58067a95f0a3f6b0d64f529ef44fd90d4a0e5538c6247b",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/pattern.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-pattern",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ patternLabel }}</strong>&nbsp;\n  <code>{{ schema.pattern }}</code>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 17,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "patternLabel",
                    "defaultValue": "'Pattern :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n    selector: 'qm-pattern',\r\n    standalone: true,\r\n    imports: [],\r\n    template: `\r\n      <div>\r\n        <strong>{{ patternLabel }}</strong>&nbsp;\r\n        <code>{{ schema.pattern }}</code>\r\n      </div>\r\n    `,\r\n  })\r\n  export class PatternComponent {\r\n    @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n    patternLabel = 'Pattern :';\r\n  }\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "PrintSchemaTypeComponent",
            "id": "component-PrintSchemaTypeComponent-4df5448cd00ae96d86de82e9d614e91b78d378a0d4c5253f504bfcb82ba33e190201bcaacfa8eaa87ea78f871cf059437cb826714795d7ac7c0bf6a114f057f4",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/print-schema-type.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-print-schema-type",
            "styleUrls": [],
            "styles": [
                "\n    .json-block {\n      background-color: #f5f5f5;\n      padding: 10px;\n      border: 1px solid #ddd;\n    }\n  "
            ],
            "template": "<ng-container *ngIf=\"isSimpleType; else complexType\">\n  <code>{{ value }}</code>\n</ng-container>\n<ng-template #complexType>\n    <pre><code [highlight]=\"jsonCode\" [languages]=\"['json']\"></code></pre>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "obj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HighlightModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { HighlightModule } from 'ngx-highlightjs';\r\n\r\n@Component({\r\n  selector: 'lib-print-schema-type',\r\n  template: `\r\n    <ng-container *ngIf=\"isSimpleType; else complexType\">\r\n      <code>{{ value }}</code>\r\n    </ng-container>\r\n    <ng-template #complexType>\r\n        <pre><code [highlight]=\"jsonCode\" [languages]=\"['json']\"></code></pre>\r\n    </ng-template>\r\n  `,\r\n  styles: [`\r\n    .json-block {\r\n      background-color: #f5f5f5;\r\n      padding: 10px;\r\n      border: 1px solid #ddd;\r\n    }\r\n  `],\r\n  standalone: true,\r\n  imports: [HighlightModule, CommonModule]\r\n})\r\nexport class PrintSchemaTypeComponent {\r\n  @Input() obj: unknown;\r\n\r\n  get isSimpleType(): boolean {\r\n    return ['string', 'number', 'bigint', 'boolean'].includes(typeof this.obj);\r\n  }\r\n\r\n  get jsonCode(): string {\r\n    return JSON.stringify(this.obj, null, \"\\t\");\r\n  }\r\n\r\n  get value(): string {\r\n    return this.obj!.toString();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .json-block {\n      background-color: #f5f5f5;\n      padding: 10px;\n      border: 1px solid #ddd;\n    }\n  \n",
            "accessors": {
                "isSimpleType": {
                    "name": "isSimpleType",
                    "getSignature": {
                        "name": "isSimpleType",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 28
                    }
                },
                "jsonCode": {
                    "name": "jsonCode",
                    "getSignature": {
                        "name": "jsonCode",
                        "type": "string",
                        "returnType": "string",
                        "line": 32
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "string",
                        "returnType": "string",
                        "line": 36
                    }
                }
            }
        },
        {
            "name": "PropertyNamesComponent",
            "id": "component-PropertyNamesComponent-9f766f6f39109a3ae188d94f72133800bfa76cf2ecf3d3703aa807ca2437870bdba0c6a0eace75804b8c8f02a3810721bbd5aa4dc5ac46e8440dd4160726e8c7",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/property-names.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-property-names",
            "styleUrls": [],
            "styles": [],
            "template": "<ul *ngIf=\"isPropertyNamesValid()\">\n  <li>\n    <jse-common-create-edge [schema]=\"generateSchema()\" [required]=\"false\">\n      <code name>\n        {{ generatePropertyName() }}\n      </code>\n    </jse-common-create-edge>\n  </li>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 27,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "generatePropertyName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateSchema",
                    "args": [],
                    "optional": false,
                    "returnType": "JSONSchema",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isPropertyNamesValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CreateEdgeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-property-names',\r\n  standalone: true,\r\n  imports: [CommonModule,CreateEdgeComponent],\r\n  template: `\r\n    <ul *ngIf=\"isPropertyNamesValid()\">\r\n      <li>\r\n        <jse-common-create-edge [schema]=\"generateSchema()\" [required]=\"false\">\r\n          <code name>\r\n            {{ generatePropertyName() }}\r\n          </code>\r\n        </jse-common-create-edge>\r\n      </li>\r\n    </ul>\r\n  `,\r\n})\r\nexport class PropertyNamesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  isPropertyNamesValid(): boolean {\r\n    const propertyNames = this.schema.propertyNames;\r\n    return (\r\n      propertyNames !== undefined &&\r\n      typeof propertyNames !== \"boolean\" &&\r\n      propertyNames.pattern !== undefined\r\n    );\r\n  }\r\n\r\n  generatePropertyName(): string {\r\n    const propertyNames = this.schema.propertyNames!;\r\n    const pattern = typeof propertyNames !== \"boolean\" ? propertyNames?.pattern : \"\";\r\n    return `${pattern}`;\r\n  }\r\n\r\n  generateSchema(): JSONSchema {\r\n    const propertyNames = this.schema.propertyNames;\r\n    if (propertyNames && typeof propertyNames !== \"boolean\") {\r\n      const { pattern, ...newSchema } = propertyNames;\r\n      return newSchema;\r\n    }\r\n    return {};\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "QualifierMessages",
            "id": "component-QualifierMessages-7391fb844022ad2a10f9cc066fe06ce41034cb5153a791675721697fc9720c387e323b26b692b4d8211dd29a23d7343497f76d32465c0f2c93b6da0072b75252",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/qualifier-messages.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-messages",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <ng-container *ngFor=\"let key of filteredQualifiers\">\n        <ng-container [ngSwitch]=\"key\">\n            <qm-constant *ngSwitchCase=\"'const'\" [schema]=\"schema\"/>\n            <qm-default-value *ngSwitchCase=\"'default'\" [schema]=\"schema\"/>\n            <qm-enum *ngSwitchCase=\"'enum'\" [schema]=\"schema\"/>\n            <qm-examples *ngSwitchCase=\"'examples'\" [schema]=\"schema\"/>\n            <qm-read-only *ngSwitchCase=\"'readOnly'\" />\n            <qm-write-only *ngSwitchCase=\"'writeOnly'\" />\n            <qm-array-unique-items *ngSwitchCase=\"'uniqueItems'\" />\n            <qm-deprecated *ngSwitchCase=\"'deprecated'\" />\n            <qm-nullable *ngSwitchCase=\"'nullable'\" />\n            <qm-string-length *ngSwitchCase=\"'stringLength'\" [schema]=\"schema\" />\n            <qm-object-properties *ngSwitchCase=\"'objectProperties'\" [schema]=\"schema\" />\n            <qm-no-extra-properties *ngSwitchCase=\"'no-extra-properties'\" />\n            <qm-array-number-of-items *ngSwitchCase=\"'arrayItems'\" [schema]=\"schema\" />\n            <qm-array-contains *ngSwitchCase=\"'arrayContains'\" [schema]=\"schema\" />\n            <qm-no-extra-items *ngSwitchCase=\"'no-extra-items'\" />\n            <qm-number-bounds *ngSwitchCase=\"'number-range'\" [schema]=\"schema\" />\n            <qm-pattern *ngSwitchCase=\"'pattern'\" [schema]=\"schema\" />\n            <qm-multiple-of *ngSwitchCase=\"'multipleOf'\" [schema]=\"schema\" />\n            <qm-content-encoding *ngSwitchCase=\"'contentEncoding'\" [schema]=\"schema\" />\n            <qm-content-media-type *ngSwitchCase=\"'contentMediaType'\" [schema]=\"schema\" />\n            <qm-content-schema *ngSwitchCase=\"'contentSchema'\" [schema]=\"typedAsJSONSchemaString\" />\n        </ng-container>\n    </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 92,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ConstantComponent",
                    "type": "component"
                },
                {
                    "name": "DefaultValueComponent",
                    "type": "component"
                },
                {
                    "name": "EnumComponent",
                    "type": "component"
                },
                {
                    "name": "ExamplesComponent",
                    "type": "component"
                },
                {
                    "name": "ReadOnlyComponent",
                    "type": "component"
                },
                {
                    "name": "WriteOnlyComponent",
                    "type": "component"
                },
                {
                    "name": "ArrayUniqueItemsComponent",
                    "type": "component"
                },
                {
                    "name": "DeprecatedComponent",
                    "type": "component"
                },
                {
                    "name": "NullableComponent",
                    "type": "component"
                },
                {
                    "name": "StringLengthComponent",
                    "type": "component"
                },
                {
                    "name": "ObjectPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "NoExtraPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "ArrayNumberOfItemsComponent",
                    "type": "component"
                },
                {
                    "name": "ArrayContainsNumberComponent",
                    "type": "component"
                },
                {
                    "name": "NoExtraItemsComponent",
                    "type": "component"
                },
                {
                    "name": "NumberBoundsComponent",
                    "type": "component"
                },
                {
                    "name": "PatternComponent",
                    "type": "component"
                },
                {
                    "name": "MultipleOfComponent",
                    "type": "component"
                },
                {
                    "name": "ContentEncodingComponent",
                    "type": "component"
                },
                {
                    "name": "ContentMediaTypeComponent",
                    "type": "component"
                },
                {
                    "name": "ContentSchemaComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { JSVOptionsService } from '../services/jsv-options';\r\n\r\n// qualifier messages\r\nimport {\r\n    ConstantComponent,\r\n    ArrayContainsNumberComponent,\r\n    ArrayNumberOfItemsComponent,\r\n    ArrayUniqueItemsComponent,\r\n    ContentEncodingComponent,\r\n    ContentMediaTypeComponent,\r\n    ContentSchemaComponent,\r\n    DefaultValueComponent,\r\n    DeprecatedComponent,\r\n    EnumComponent,\r\n    ExamplesComponent,\r\n    MultipleOfComponent,\r\n    NoExtraItemsComponent,\r\n    NoExtraPropertiesComponent,\r\n    NullableComponent,\r\n    NumberBoundsComponent,\r\n    ObjectPropertiesComponent,\r\n    PatternComponent,\r\n    ReadOnlyComponent,\r\n    StringLengthComponent,\r\n    WriteOnlyComponent\r\n} from \"./QualifierMessages/index\";\r\n\r\n// Types\r\nimport type { JSONSchema, JSONSchemaNS } from '../types';\r\nimport type { JSVOptions, CheckKey } from '../services/jsv-options';\r\n\r\n@Component({\r\n    selector: 'qm-messages',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        ConstantComponent,\r\n        DefaultValueComponent,\r\n        EnumComponent,\r\n        ExamplesComponent,\r\n        ReadOnlyComponent,\r\n        WriteOnlyComponent,\r\n        ArrayUniqueItemsComponent,\r\n        DeprecatedComponent,\r\n        NullableComponent,\r\n        StringLengthComponent,\r\n        ObjectPropertiesComponent,\r\n        NoExtraPropertiesComponent,\r\n        ArrayNumberOfItemsComponent,\r\n        ArrayContainsNumberComponent,\r\n        NoExtraItemsComponent,\r\n        NumberBoundsComponent,\r\n        PatternComponent,\r\n        MultipleOfComponent,\r\n        ContentEncodingComponent,\r\n        ContentMediaTypeComponent,\r\n        ContentSchemaComponent\r\n    ],\r\n    template: `\r\n        <div>\r\n            <ng-container *ngFor=\"let key of filteredQualifiers\">\r\n                <ng-container [ngSwitch]=\"key\">\r\n                    <qm-constant *ngSwitchCase=\"'const'\" [schema]=\"schema\"/>\r\n                    <qm-default-value *ngSwitchCase=\"'default'\" [schema]=\"schema\"/>\r\n                    <qm-enum *ngSwitchCase=\"'enum'\" [schema]=\"schema\"/>\r\n                    <qm-examples *ngSwitchCase=\"'examples'\" [schema]=\"schema\"/>\r\n                    <qm-read-only *ngSwitchCase=\"'readOnly'\" />\r\n                    <qm-write-only *ngSwitchCase=\"'writeOnly'\" />\r\n                    <qm-array-unique-items *ngSwitchCase=\"'uniqueItems'\" />\r\n                    <qm-deprecated *ngSwitchCase=\"'deprecated'\" />\r\n                    <qm-nullable *ngSwitchCase=\"'nullable'\" />\r\n                    <qm-string-length *ngSwitchCase=\"'stringLength'\" [schema]=\"schema\" />\r\n                    <qm-object-properties *ngSwitchCase=\"'objectProperties'\" [schema]=\"schema\" />\r\n                    <qm-no-extra-properties *ngSwitchCase=\"'no-extra-properties'\" />\r\n                    <qm-array-number-of-items *ngSwitchCase=\"'arrayItems'\" [schema]=\"schema\" />\r\n                    <qm-array-contains *ngSwitchCase=\"'arrayContains'\" [schema]=\"schema\" />\r\n                    <qm-no-extra-items *ngSwitchCase=\"'no-extra-items'\" />\r\n                    <qm-number-bounds *ngSwitchCase=\"'number-range'\" [schema]=\"schema\" />\r\n                    <qm-pattern *ngSwitchCase=\"'pattern'\" [schema]=\"schema\" />\r\n                    <qm-multiple-of *ngSwitchCase=\"'multipleOf'\" [schema]=\"schema\" />\r\n                    <qm-content-encoding *ngSwitchCase=\"'contentEncoding'\" [schema]=\"schema\" />\r\n                    <qm-content-media-type *ngSwitchCase=\"'contentMediaType'\" [schema]=\"schema\" />\r\n                    <qm-content-schema *ngSwitchCase=\"'contentSchema'\" [schema]=\"typedAsJSONSchemaString\" />\r\n                </ng-container>\r\n            </ng-container>\r\n        </div>\r\n    `\r\n})\r\nexport class QualifierMessages {\r\n    @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n    constructor(private jsvOptionsService: JSVOptionsService) {}\r\n\r\n    get options(): JSVOptions {\r\n        return this.jsvOptionsService.getOptions();\r\n    }\r\n\r\n    get typedAsJSONSchemaString(): JSONSchemaNS.String {\r\n        return this.schema as JSONSchemaNS.String;\r\n    }\r\n\r\n    get filteredQualifiers(): CheckKey[] {\r\n        const qualifierMessagesOrder = this.options.qualifierMessagesOrder || this.jsvOptionsService.getDefaultQualifierMessageOrder();\r\n\r\n        return qualifierMessagesOrder.filter(qualifierKey => {\r\n            switch(qualifierKey) {\r\n                case 'const':\r\n                    return this.schema.const !== undefined;\r\n                case 'default':\r\n                    return this.schema.default !== undefined;\r\n                case 'enum':\r\n                    return this.schema.enum !== undefined;\r\n                case 'examples':\r\n                    return (this.options.showExamples || false) && this.schema.examples !== undefined;\r\n                case 'readOnly':\r\n                    return this.schema.readOnly === true;\r\n                case 'writeOnly':\r\n                    return this.schema.writeOnly === true;\r\n                case 'uniqueItems':\r\n                    return this.schema.uniqueItems === true;\r\n                case 'deprecated':\r\n                    return (this.schema as JSONSchemaNS.Object).deprecated === true;\r\n                case 'nullable':\r\n                    return (this.schema as any).nullable === true;\r\n                case 'stringLength':\r\n                    return this.schema.minLength !== undefined || this.schema.maxLength !== undefined;\r\n                case 'objectProperties':\r\n                    return this.schema.minProperties !== undefined || this.schema.maxProperties !== undefined;\r\n                case 'no-extra-properties':\r\n                    return this.schema.additionalProperties === false || (this.schema as JSONSchemaNS.Object).unevaluatedProperties === false;\r\n                case 'arrayItems':\r\n                    return this.schema.minItems !== undefined || this.schema.maxItems !== undefined;\r\n                case 'arrayContains':\r\n                    return (this.schema as JSONSchemaNS.Array).minContains !== undefined || (this.schema as JSONSchemaNS.Array).maxContains !== undefined;\r\n                case 'no-extra-items':\r\n                    return (this.schema as JSONSchemaNS.Array).unevaluatedItems === false || this.schema.items === false || this.schema.additionalItems === false;\r\n                case 'number-range':\r\n                    return this.schema.minimum !== undefined || this.schema.exclusiveMinimum !== undefined || this.schema.maximum !== undefined || this.schema.exclusiveMaximum !== undefined;\r\n                case 'pattern':\r\n                    return this.schema.pattern !== undefined;\r\n                case 'multipleOf':\r\n                    return this.schema.multipleOf !== undefined;\r\n                case 'contentMediaType':\r\n                    return this.schema.contentMediaType !== undefined;\r\n                case 'contentEncoding':\r\n                    return this.schema.contentEncoding !== undefined;\r\n                case 'contentSchema':\r\n                    return (this.schema as JSONSchemaNS.String).contentSchema !== undefined;\r\n            }\r\n        });\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "jsvOptionsService",
                        "type": "JSVOptionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 92,
                "jsdoctags": [
                    {
                        "name": "jsvOptionsService",
                        "type": "JSVOptionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "JSVOptions",
                        "line": 96
                    }
                },
                "typedAsJSONSchemaString": {
                    "name": "typedAsJSONSchemaString",
                    "getSignature": {
                        "name": "typedAsJSONSchemaString",
                        "type": "",
                        "returnType": "JSONSchemaNS.String",
                        "line": 100
                    }
                },
                "filteredQualifiers": {
                    "name": "filteredQualifiers",
                    "getSignature": {
                        "name": "filteredQualifiers",
                        "type": "[]",
                        "returnType": "CheckKey[]",
                        "line": 104
                    }
                }
            }
        },
        {
            "name": "ReadOnlyComponent",
            "id": "component-ReadOnlyComponent-44425342d6d43439d6e14aed9cfe03c44027e0b279e62ce1021c1f5d77cb2bbd438a73ee04cad432b69fa9cd31848a9b1abd671d332b8b6e9a2ba25ef02065ba",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/readOnly.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-read-only",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  🚨&nbsp;\n  <strong>{{ readOnlyLabel }}</strong>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "readOnlyLabel",
                    "defaultValue": "'read only'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-read-only',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div>\r\n      🚨&nbsp;\r\n      <strong>{{ readOnlyLabel }}</strong>\r\n    </div>\r\n  `,\r\n})\r\nexport class ReadOnlyComponent {\r\n  readOnlyLabel = 'read only';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ReadOnlyLabelComponent",
            "id": "component-ReadOnlyLabelComponent-9618c0271b3568ee273fa35ea4fdae3292a9dd5bd57e2d67e93730505ecd8ca00a2e28be45dbe9c84c83a9b24328696013082e0891a9b3847cd6d3b2f1feb580",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/ReadOnly/read-only-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-read-only",
            "styleUrls": [
                "./read-only-label.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./read-only-label.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-read-only',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './read-only-label.component.html',\r\n  styleUrls: ['./read-only-label.component.css']\r\n})\r\nexport class ReadOnlyLabelComponent { }",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".readOnly {\r\n    font-size: 90%;\r\n    color: #47a9c9;\r\n}",
                    "styleUrl": "./read-only-label.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<strong class=\"readOnly\">\r\n    readOnly\r\n</strong>\r\n  "
        },
        {
            "name": "RenderMultipleTypesComponent",
            "id": "component-RenderMultipleTypesComponent-80e1368cb40be6229fa2ede5375728628011f0e28c6a6a62635c286042190ca8087054e881e3fd904ca0327a0d86c6a9253205d05405ae2d8d2e4be9e8918d94",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/render-multiple-types.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-multiple-types",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-tab-group>\n  <mat-tab *ngFor=\"let type of types\">\n    <ng-template mat-tab-label>\n        <jsv-type-label-switch [type]=\"type\" />\n    </ng-template>\n    <jse-common-render-provided-type [type]=\"type\" [schema]=\"schema\" [nullable]=\"nullable\" />\n  </mat-tab>\n</mat-tab-group>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "nullable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 39,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "types",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 41,
                    "type": "TypeValues[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "RenderProvidedTypeComponent",
                    "type": "component"
                },
                {
                    "name": "TypeLabelSwitchComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\n\r\nimport {\r\n    RenderProvidedTypeComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelSwitchComponent\r\n} from \"../utils/index\";\r\n\r\nimport type {\r\n    TypeValues,\r\n    JSONSchema\r\n} from \"../types\";\r\n\r\n@Component({\r\n  selector: 'jse-common-multiple-types',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatTabsModule,\r\n    RenderProvidedTypeComponent,\r\n    TypeLabelSwitchComponent\r\n  ],\r\n  template: `\r\n    <mat-tab-group>\r\n      <mat-tab *ngFor=\"let type of types\">\r\n        <ng-template mat-tab-label>\r\n            <jsv-type-label-switch [type]=\"type\" />\r\n        </ng-template>\r\n        <jse-common-render-provided-type [type]=\"type\" [schema]=\"schema\" [nullable]=\"nullable\" />\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n  `\r\n})\r\nexport class RenderMultipleTypesComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n  @Input() nullable?: boolean;\r\n  @Input({ required: true }) types!: TypeValues[];\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "RenderProvidedTypeComponent",
            "id": "component-RenderProvidedTypeComponent-af91b3e783d040289b2e0a7200d20d363b066f41833de92fc8c09f754f2acf0d3ed998e4edde00c76bc5cefd5b36081123b8192f0ef9b2a25bf7cac60d23e319",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/render-provided-type.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-render-provided-type",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container [ngSwitch]=\"type\">\n  <jse-array\n    *ngSwitchCase=\"'array'\"\n    [schema]=\"asTypedArray\"\n    [description]=\"description\"\n  />\n  <jse-object\n    *ngSwitchCase=\"'object'\"\n    [schema]=\"asTypedObject\"\n    [description]=\"description\"\n  />\n  <jse-string\n    *ngSwitchCase=\"'string'\"\n    [schema]=\"asTypedString\"\n    [description]=\"description\"\n  />\n  <jse-boolean\n    *ngSwitchCase=\"'boolean'\"\n    [schema]=\"asTypedBoolean\"\n    [description]=\"description\"\n  />\n  <jse-number\n    *ngSwitchCase=\"'number'\"\n    [schema]=\"asTypedNumber\"\n    [description]=\"description\"\n  />\n  <jse-integer\n    *ngSwitchCase=\"'integer'\"\n    [schema]=\"asTypedInteger\"\n    [description]=\"description\"\n  />\n  <jse-null\n    *ngSwitchDefault\n    [schema]=\"asTypedNull\"\n    [description]=\"description\"\n  />\n<ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "nullable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 74,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 75,
                    "type": "TypeValues",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CreateArrayComponent",
                    "type": "component"
                },
                {
                    "name": "CreateObjectComponent",
                    "type": "component"
                },
                {
                    "name": "CreateStringComponent",
                    "type": "component"
                },
                {
                    "name": "CreateBooleanComponent",
                    "type": "component"
                },
                {
                    "name": "CreateNumberComponent",
                    "type": "component"
                },
                {
                    "name": "CreateIntegerComponent",
                    "type": "component"
                },
                {
                    "name": "CreateNullComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n    CreateArrayComponent,\r\n    CreateObjectComponent,\r\n    CreateStringComponent,\r\n    CreateBooleanComponent,\r\n    CreateNumberComponent,\r\n    CreateIntegerComponent,\r\n    CreateNullComponent\r\n} from \"../JSONSchemaElements/index\";\r\n\r\nimport type {\r\n    JSONSchema,\r\n    JSONSchemaNS,\r\n    TypeValues,\r\n} from '../types';\r\n\r\n@Component({\r\n  selector: 'jse-common-render-provided-type',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    CreateArrayComponent,\r\n    CreateObjectComponent,\r\n    CreateStringComponent,\r\n    CreateBooleanComponent,\r\n    CreateNumberComponent,\r\n    CreateIntegerComponent,\r\n    CreateNullComponent\r\n  ],\r\n  template: `\r\n    <ng-container [ngSwitch]=\"type\">\r\n      <jse-array\r\n        *ngSwitchCase=\"'array'\"\r\n        [schema]=\"asTypedArray\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-object\r\n        *ngSwitchCase=\"'object'\"\r\n        [schema]=\"asTypedObject\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-string\r\n        *ngSwitchCase=\"'string'\"\r\n        [schema]=\"asTypedString\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-boolean\r\n        *ngSwitchCase=\"'boolean'\"\r\n        [schema]=\"asTypedBoolean\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-number\r\n        *ngSwitchCase=\"'number'\"\r\n        [schema]=\"asTypedNumber\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-integer\r\n        *ngSwitchCase=\"'integer'\"\r\n        [schema]=\"asTypedInteger\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-null\r\n        *ngSwitchDefault\r\n        [schema]=\"asTypedNull\"\r\n        [description]=\"description\"\r\n      />\r\n    <ng-container>\r\n  `,\r\n})\r\nexport class RenderProvidedTypeComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n  @Input({ required: true }) type!: TypeValues;\r\n  @Input() nullable?: boolean;\r\n\r\n  get description(): string | undefined {\r\n    return this.schema.description;\r\n  }\r\n\r\n  get asTypedArray() : JSONSchemaNS.Array {\r\n    return this.schema as JSONSchemaNS.Array;\r\n  }\r\n\r\n  get asTypedObject(): JSONSchemaNS.Object {\r\n    return this.schema as JSONSchemaNS.Object;\r\n  }\r\n\r\n  get asTypedString(): JSONSchemaNS.String {\r\n    return this.schema as JSONSchemaNS.String;\r\n  }\r\n\r\n  get asTypedBoolean(): JSONSchemaNS.Boolean {\r\n    return this.schema as JSONSchemaNS.Boolean;\r\n  }\r\n\r\n  get asTypedNumber(): JSONSchemaNS.Number {\r\n    return this.schema as JSONSchemaNS.Number;\r\n  }\r\n\r\n  get asTypedInteger(): JSONSchemaNS.Integer {\r\n    return this.schema as JSONSchemaNS.Integer;\r\n  }\r\n\r\n  get asTypedNull(): JSONSchemaNS.Null {\r\n    return this.schema as JSONSchemaNS.Null;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 78
                    }
                },
                "asTypedArray": {
                    "name": "asTypedArray",
                    "getSignature": {
                        "name": "asTypedArray",
                        "type": "",
                        "returnType": "JSONSchemaNS.Array",
                        "line": 82
                    }
                },
                "asTypedObject": {
                    "name": "asTypedObject",
                    "getSignature": {
                        "name": "asTypedObject",
                        "type": "",
                        "returnType": "JSONSchemaNS.Object",
                        "line": 86
                    }
                },
                "asTypedString": {
                    "name": "asTypedString",
                    "getSignature": {
                        "name": "asTypedString",
                        "type": "",
                        "returnType": "JSONSchemaNS.String",
                        "line": 90
                    }
                },
                "asTypedBoolean": {
                    "name": "asTypedBoolean",
                    "getSignature": {
                        "name": "asTypedBoolean",
                        "type": "",
                        "returnType": "JSONSchemaNS.Boolean",
                        "line": 94
                    }
                },
                "asTypedNumber": {
                    "name": "asTypedNumber",
                    "getSignature": {
                        "name": "asTypedNumber",
                        "type": "",
                        "returnType": "JSONSchemaNS.Number",
                        "line": 98
                    }
                },
                "asTypedInteger": {
                    "name": "asTypedInteger",
                    "getSignature": {
                        "name": "asTypedInteger",
                        "type": "",
                        "returnType": "JSONSchemaNS.Integer",
                        "line": 102
                    }
                },
                "asTypedNull": {
                    "name": "asTypedNull",
                    "getSignature": {
                        "name": "asTypedNull",
                        "type": "",
                        "returnType": "JSONSchemaNS.Null",
                        "line": 106
                    }
                }
            }
        },
        {
            "name": "RequiredLabelComponent",
            "id": "component-RequiredLabelComponent-1d43e12555b9c7bacb17b04be2943790d223b2b090e7cdede0ab0c2d6e5ac6180679ce6c12bebbe2c536d04314f529123af456c6e0e457b815fd1e67252dcbe9",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/Required/required-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-required",
            "styleUrls": [
                "./required-label.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./required-label.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-required',\r\n  standalone: true,\r\n  templateUrl: './required-label.component.html',\r\n  styleUrls: ['./required-label.component.css']\r\n})\r\nexport class RequiredLabelComponent { }\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".required {\r\n    font-size: 90%;\r\n    color: #fa383e;\r\n}",
                    "styleUrl": "./required-label.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<strong class=\"required\">\r\n    required\r\n</strong>  "
        },
        {
            "name": "SchemaCompositionComponent",
            "id": "component-SchemaCompositionComponent-78d7588bdbca9c035ab5354f9049d2c4f6795905551fa8a18216f645df4f2cc525298b522cc112b505c7cc5a786d569124456895e891fe46741e1dc9def3759d",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/index.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-composition",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"schema.oneOf\">\n  <jse-schema-composition-one-of [schema]=\"schema\" />\n</ng-container>\n<ng-container *ngIf=\"schema.anyOf\">\n  <jse-schema-composition-any-of [schema]=\"schema\" />\n</ng-container>\n<ng-container *ngIf=\"schema.allOf\">\n  <jse-schema-composition-all-of [schema]=\"schema\" />\n</ng-container>\n<ng-container *ngIf=\"schema.not\">\n  <jse-schema-composition-not [schema]=\"schema\" />\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 46,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AllOfSchemaComponent",
                    "type": "component"
                },
                {
                    "name": "AnyOfSchemaComponent",
                    "type": "component"
                },
                {
                    "name": "NotSchemaComponent",
                    "type": "component"
                },
                {
                    "name": "OneOfSchemaComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport { AllOfSchemaComponent } from \"./all-of\";\r\nimport { AnyOfSchemaComponent } from \"./any-of\";\r\nimport { NotSchemaComponent } from \"./not\";\r\nimport { OneOfSchemaComponent } from \"./one-of\";\r\n\r\nexport {\r\n  AllOfSchemaComponent,\r\n  AnyOfSchemaComponent,\r\n  NotSchemaComponent,\r\n  OneOfSchemaComponent\r\n}\r\n\r\nimport type {\r\n    JSONSchema\r\n} from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-composition',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    AllOfSchemaComponent,\r\n    AnyOfSchemaComponent,\r\n    NotSchemaComponent,\r\n    OneOfSchemaComponent\r\n  ],\r\n  template: `\r\n    <ng-container *ngIf=\"schema.oneOf\">\r\n      <jse-schema-composition-one-of [schema]=\"schema\" />\r\n    </ng-container>\r\n    <ng-container *ngIf=\"schema.anyOf\">\r\n      <jse-schema-composition-any-of [schema]=\"schema\" />\r\n    </ng-container>\r\n    <ng-container *ngIf=\"schema.allOf\">\r\n      <jse-schema-composition-all-of [schema]=\"schema\" />\r\n    </ng-container>\r\n    <ng-container *ngIf=\"schema.not\">\r\n      <jse-schema-composition-not [schema]=\"schema\" />\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class SchemaCompositionComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "SchemaConditionalComponent",
            "id": "component-SchemaConditionalComponent-66834273ba228cce32e6f8371b9cc0b631cd5e732c7d77a8df17ae382bad5e5913340d3bf4debe369ca510be12aedb02c26a907c47c6744e21cdb7dd4fa175cf",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/index.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-conditional",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-accordion>\n    <mat-expansion-panel>\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                {{ schemaConditionalLabel }}\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <!-- Handles if-then-else case -->\n        <jse-schema-conditional-if-else-then [schema]=\"schema\" *ngIf=\"isIfThenElse\" />\n        <!-- Handles dependentRequired case -->\n        <jse-schema-conditional-dependent-required [schema]=\"schema\" *ngIf=\"isDependentRequired\" />\n        <!-- Handles dependentSchemas case -->\n        <jse-schema-conditional-dependent-schemas [schema]=\"schema\" *ngIf=\"isDependentSchemas\" />\n        <!-- Handles dependencies (deprecated) -->\n        <jse-schema-conditional-dependencies [schema]=\"schema\" *ngIf=\"isDependencies\" />\n    </mat-expansion-panel>\n</mat-accordion>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 51,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "IfElseThenComponent",
                    "type": "component"
                },
                {
                    "name": "DependentRequiredComponent",
                    "type": "component"
                },
                {
                    "name": "DependentSchemasComponent",
                    "type": "component"
                },
                {
                    "name": "DependenciesComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\n\r\nimport { IfElseThenComponent } from \"./if-else-then\";\r\nimport { DependentRequiredComponent } from \"./dependent-required\";\r\nimport { DependentSchemasComponent } from \"./dependent-schemas\";\r\nimport { DependenciesComponent } from \"./dependencies\";\r\n\r\nexport {\r\n  IfElseThenComponent,\r\n  DependentRequiredComponent,\r\n  DependentSchemasComponent,\r\n  DependenciesComponent\r\n}\r\n\r\nimport type { JSONSchema, JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-conditional',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    MatExpansionModule,\r\n    IfElseThenComponent,\r\n    DependentRequiredComponent,\r\n    DependentSchemasComponent,\r\n    DependenciesComponent\r\n  ],\r\n  template: `\r\n    <mat-accordion>\r\n        <mat-expansion-panel>\r\n            <mat-expansion-panel-header>\r\n                <mat-panel-title>\r\n                    {{ schemaConditionalLabel }}\r\n                </mat-panel-title>\r\n            </mat-expansion-panel-header>\r\n            <!-- Handles if-then-else case -->\r\n            <jse-schema-conditional-if-else-then [schema]=\"schema\" *ngIf=\"isIfThenElse\" />\r\n            <!-- Handles dependentRequired case -->\r\n            <jse-schema-conditional-dependent-required [schema]=\"schema\" *ngIf=\"isDependentRequired\" />\r\n            <!-- Handles dependentSchemas case -->\r\n            <jse-schema-conditional-dependent-schemas [schema]=\"schema\" *ngIf=\"isDependentSchemas\" />\r\n            <!-- Handles dependencies (deprecated) -->\r\n            <jse-schema-conditional-dependencies [schema]=\"schema\" *ngIf=\"isDependencies\" />\r\n        </mat-expansion-panel>\r\n    </mat-accordion>\r\n  `,\r\n})\r\nexport class SchemaConditionalComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get isIfThenElse(): boolean {\r\n    return this.schema.if !== undefined;\r\n  }\r\n\r\n  get isDependentRequired(): boolean {\r\n    return (this.schema as JSONSchemaNS.Object).dependentRequired !== undefined;\r\n  }\r\n\r\n  get isDependentSchemas(): boolean {\r\n    return (this.schema as JSONSchemaNS.Object).dependentSchemas !== undefined;\r\n  }\r\n\r\n  get isDependencies(): boolean {\r\n    return this.schema.dependencies !== undefined;\r\n  }\r\n\r\n  get schemaConditionalLabel(): string {\r\n    return \"Conditional subschemas\";\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "isIfThenElse": {
                    "name": "isIfThenElse",
                    "getSignature": {
                        "name": "isIfThenElse",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 53
                    }
                },
                "isDependentRequired": {
                    "name": "isDependentRequired",
                    "getSignature": {
                        "name": "isDependentRequired",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 57
                    }
                },
                "isDependentSchemas": {
                    "name": "isDependentSchemas",
                    "getSignature": {
                        "name": "isDependentSchemas",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 61
                    }
                },
                "isDependencies": {
                    "name": "isDependencies",
                    "getSignature": {
                        "name": "isDependencies",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 65
                    }
                },
                "schemaConditionalLabel": {
                    "name": "schemaConditionalLabel",
                    "getSignature": {
                        "name": "schemaConditionalLabel",
                        "type": "string",
                        "returnType": "string",
                        "line": 69
                    }
                }
            }
        },
        {
            "name": "StringLabelComponent",
            "id": "component-StringLabelComponent-f33d15f5c30c56cb68c5f27514d07e14f3d07be29130962d4122d4d49398a7257dc65f6536383bfab52e14a4089baf85966b4702821d886a49ea6c36b0b66bb3",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/string-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-string",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  number\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-string',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      number\r\n    </span>\r\n  `,\r\n})\r\nexport class StringLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StringLengthComponent",
            "id": "component-StringLengthComponent-4bb6c6b56a224a4fe2d75e18fba8a1a683cdc728a3e8fbf0b13808a56eecdf43b9ffe0b8e0bc4381b5febe0d2f02d7359359153f05c99570bdc355a0b6d9d3c1",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/string-length.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-string-length",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ lengthLabel }}</strong>&nbsp;\n  <ng-container *ngIf=\"schema.minLength !== undefined\">\n    <code>{{ '>= ' + schema.minLength + ' character(s)' }}</code>\n  </ng-container>\n  <ng-container *ngIf=\"minAndMaxLength\">\n    <span>&nbsp;&&nbsp;</span>\n  </ng-container>\n  <ng-container *ngIf=\"schema.maxLength !== undefined\">\n    <code>{{ '<= ' + schema.maxLength + ' character(s)' }}</code>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 26,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "lengthLabel",
                    "defaultValue": "'Length :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "minAndMaxLength",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-string-length',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div>\r\n      <strong>{{ lengthLabel }}</strong>&nbsp;\r\n      <ng-container *ngIf=\"schema.minLength !== undefined\">\r\n        <code>{{ '>= ' + schema.minLength + ' character(s)' }}</code>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"minAndMaxLength\">\r\n        <span>&nbsp;&&nbsp;</span>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"schema.maxLength !== undefined\">\r\n        <code>{{ '<= ' + schema.maxLength + ' character(s)' }}</code>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class StringLengthComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  lengthLabel = 'Length :';\r\n\r\n  minAndMaxLength: boolean = false;\r\n\r\n  ngOnInit() {\r\n    this.minAndMaxLength =\r\n      this.schema.minLength !== undefined &&\r\n      this.schema.maxLength !== undefined;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ThenLabelComponent",
            "id": "component-ThenLabelComponent-34d512ce8f04ad06ce452e4567509f2f402699629bd3d30ffb1f05fa2799d0f14ad1d4fe7c259390e5e355b263c6746cb70823190a94249b0629f4836c05c511",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/then-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-then",
            "styleUrls": [],
            "styles": [],
            "template": "<strong>\n    Then\n</strong>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-then',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <strong>\r\n        Then\r\n    </strong>\r\n  `,\r\n})\r\nexport class ThenLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TrueLabelComponent",
            "id": "component-TrueLabelComponent-b52b6d157d399d403ed1f93db78f215725108921dd1920f3006aa0faf48d136b80ce0c77549a33c1606699cd8bdc07fc3f6ba15ea8c0d8b192ce8d55e71fc257",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/true-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-true",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  any\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-true',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      any\r\n    </span>\r\n  `,\r\n})\r\nexport class TrueLabelComponent {}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TypeLabelComponent",
            "id": "component-TypeLabelComponent-1856071c0450015c4e78f2c2f655b72359e38197ded75365c2ddf2de5b7bbdc52f2693f58025dc380a5554bfe8dcc9154cd7da91c56f68494c865cfb7393c17e",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/type-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-type",
            "styleUrls": [],
            "styles": [],
            "template": "<strong>\n  type\n</strong>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-type',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <strong>\r\n      type\r\n    </strong>\r\n  `,\r\n})\r\nexport class TypeLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TypeLabelSwitchComponent",
            "id": "component-TypeLabelSwitchComponent-b8b319df86d7994f2ed2c49c855ceff3fbfddf1cda1ef315dfb5f6b1fd9e97788b436ce9edb23d276f503f38e60f6024300a7688db56ca8fc6d56dd1c8950882",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/type-label-switch.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jsv-type-label-switch",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container [ngSwitch]=\"type\">\n  <ng-container *ngSwitchCase=\"'string'\">\n    <labels-string />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'number'\">\n    <labels-number />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'boolean'\">\n    <labels-boolean />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'object'\">\n    <labels-object />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'array'\">\n    <labels-array />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'integer'\">\n    <labels-integer />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'null'\">\n    <labels-null />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"true\">\n    <labels-true />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"false\">\n    <labels-false />\n  </ng-container>\n  <ng-container *ngSwitchDefault>\n    <span style=\"opacity: 0.6\">{{ type }}</span>\n  </ng-container>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "TypeValues |  |  | string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "StringLabelComponent",
                    "type": "component"
                },
                {
                    "name": "NumberLabelComponent",
                    "type": "component"
                },
                {
                    "name": "BooleanLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ObjectLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ArrayLabelComponent",
                    "type": "component"
                },
                {
                    "name": "IntegerLabelComponent",
                    "type": "component"
                },
                {
                    "name": "NullLabelComponent",
                    "type": "component"
                },
                {
                    "name": "TrueLabelComponent",
                    "type": "component"
                },
                {
                    "name": "FalseLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    StringLabelComponent,\r\n    NumberLabelComponent,\r\n    BooleanLabelComponent,\r\n    ObjectLabelComponent,\r\n    ArrayLabelComponent,\r\n    IntegerLabelComponent,\r\n    NullLabelComponent,\r\n    TrueLabelComponent,\r\n    FalseLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport type { TypeValues } from \"../types\"\r\n\r\n@Component({\r\n  selector: 'jsv-type-label-switch',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    StringLabelComponent,\r\n    NumberLabelComponent,\r\n    BooleanLabelComponent,\r\n    ObjectLabelComponent,\r\n    ArrayLabelComponent,\r\n    IntegerLabelComponent,\r\n    NullLabelComponent,\r\n    TrueLabelComponent,\r\n    FalseLabelComponent\r\n  ],\r\n  template: `\r\n    <ng-container [ngSwitch]=\"type\">\r\n      <ng-container *ngSwitchCase=\"'string'\">\r\n        <labels-string />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'number'\">\r\n        <labels-number />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'boolean'\">\r\n        <labels-boolean />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'object'\">\r\n        <labels-object />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'array'\">\r\n        <labels-array />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'integer'\">\r\n        <labels-integer />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'null'\">\r\n        <labels-null />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"true\">\r\n        <labels-true />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"false\">\r\n        <labels-false />\r\n      </ng-container>\r\n      <ng-container *ngSwitchDefault>\r\n        <span style=\"opacity: 0.6\">{{ type }}</span>\r\n      </ng-container>\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class TypeLabelSwitchComponent {\r\n  @Input() type!: TypeValues | true | false | string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "WriteOnlyComponent",
            "id": "component-WriteOnlyComponent-94f7b8076f0970fd5bd9eb4bc785338d7a4258469c36149631e7548c244ef9f522fb839d5fb4662f895726a9b4a181b4fed3556d537b940a9ac8edfb77bb02d6",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/writeOnly.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-write-only",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  🚨&nbsp;\n  <strong>{{ writeOnlyLabel }}</strong>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "writeOnlyLabel",
                    "defaultValue": "'write only'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-write-only',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div>\r\n      🚨&nbsp;\r\n      <strong>{{ writeOnlyLabel }}</strong>\r\n    </div>\r\n  `,\r\n})\r\nexport class WriteOnlyComponent {\r\n  writeOnlyLabel = 'write only';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "WriteOnlyLabelComponent",
            "id": "component-WriteOnlyLabelComponent-4d74a7300d949f4200ec1d8e5e000c9e8ca31232debac3a5454d25866fcdc74cc0dd95618667d54ff623bb459e4a947f3081ce182884436cd237c84f3468e5eb",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/WriteOnly/write-only-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-write-only",
            "styleUrls": [
                "./write-only-label.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./write-only-label.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-write-only',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './write-only-label.component.html',\r\n  styleUrls: ['./write-only-label.component.css']\r\n})\r\nexport class WriteOnlyLabelComponent { }",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".writeOnly {\r\n    font-size: 90%;\r\n    color: #2d66c3;\r\n}",
                    "styleUrl": "./write-only-label.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<strong class=\"writeOnly\">\r\n    writeOnly\r\n</strong>\r\n  "
        },
        {
            "name": "XorLabelComponent",
            "id": "component-XorLabelComponent-7f98e013f8165fa5dc7ea8c4d23a6ee13f82340054feba6e747089e4bf2f8a04d58981d65862cc8f9047d8df29c15a204363873ee149b39f685e5403f391ef72",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/xor-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-xor",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n<strong>XOR</strong>\n<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n\n<ng-template #spaceTemplate>\n  &nbsp;\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-xor',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n    <strong>XOR</strong>\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n\r\n    <ng-template #spaceTemplate>\r\n      &nbsp;\r\n    </ng-template>\r\n  `,\r\n})\r\nexport class XorLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "NgxJsonSchemaViewerModule",
            "id": "module-NgxJsonSchemaViewerModule-0aae714f27b042430fa6e75866edb4d55e9f3b43325a3f8676211603b6ee9dc1027923e48bf1ac12a2e5a0e98dfce6ddc75a19fbdb7d9efea7ee8836a3930382",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-json-schema-viewer/src/lib/ngx-json-schema-viewer.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport { NgxJsonSchemaViewerComponent } from './ngx-json-schema-viewer.component';\n\nimport {\n  CreateNodesComponent\n} from \"./common/index\"\n\nimport {\n  ErrorOccurredLabelComponent,\n  LoadingLabelComponent\n} from \"./labels/index\";\n\n@NgModule({\n  declarations: [\n    NgxJsonSchemaViewerComponent\n  ],\n  imports: [\n    ErrorOccurredLabelComponent,\n    LoadingLabelComponent,\n    CreateNodesComponent,\n    MatExpansionModule\n  ],\n  exports: [\n    NgxJsonSchemaViewerComponent\n  ]\n})\nexport class NgxJsonSchemaViewerModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgxJsonSchemaViewerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CreateNodesComponent"
                        },
                        {
                            "name": "ErrorOccurredLabelComponent"
                        },
                        {
                            "name": "LoadingLabelComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgxJsonSchemaViewerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "AdditionalItems1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Viewer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        schema: {\r\n            \"type\": \"array\",\r\n            \"items\": [\r\n              {\r\n                \"type\": \"integer\"\r\n              },\r\n              {\r\n                \"type\": \"string\"\r\n              }\r\n            ],\r\n            \"additionalItems\": false\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "isArrayType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"array\" ||\r\n      schema.items !== undefined ||\r\n      schema.minItems !== undefined ||\r\n      schema.maxItems !== undefined ||\r\n      schema.additionalItems !== undefined ||\r\n      schema.contains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).minContains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).maxContains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).prefixItems !== undefined ||\r\n      (schema as JSONSchemaNS.Array).unevaluatedItems !== undefined ||\r\n      Array.isArray(schema.const) ||\r\n      schema.enum?.some((s) => Array.isArray(s)))"
            },
            {
                "name": "isBoolean",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"boolean\" ||\r\n      schema.enum?.some((val) => typeof val === \"boolean\") ||\r\n      typeof schema.const === \"boolean\")"
            },
            {
                "name": "isInteger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"integer\" ||\r\n      schema.multipleOf === 1 ||\r\n      schema.enum?.some((val) => typeof val === \"bigint\") ||\r\n      typeof schema.const === \"bigint\")"
            },
            {
                "name": "isNull",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"null\" ||\r\n      schema.enum?.some((val) => val === null) ||\r\n      schema.const === null)"
            },
            {
                "name": "isNumeric",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"number\" ||\r\n      schema.multipleOf !== undefined ||\r\n      schema.minimum !== undefined ||\r\n      schema.exclusiveMinimum !== undefined ||\r\n      schema.maximum !== undefined ||\r\n      schema.exclusiveMaximum !== undefined ||\r\n      schema.enum?.some((val) => typeof val === \"number\") ||\r\n      typeof schema.const === \"number\")"
            },
            {
                "name": "isObjectType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"object\" ||\r\n      schema.properties !== undefined ||\r\n      schema.additionalProperties !== undefined ||\r\n      schema.patternProperties !== undefined ||\r\n      schema.propertyNames !== undefined ||\r\n      schema.minProperties !== undefined ||\r\n      schema.maxProperties !== undefined ||\r\n      schema.required !== undefined ||\r\n      (schema as JSONSchemaNS.Object).unevaluatedProperties !== undefined)"
            },
            {
                "name": "isSchemaComposition",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.allOf !== undefined ||\r\n      schema.anyOf !== undefined ||\r\n      schema.oneOf !== undefined ||\r\n      schema.not !== undefined)"
            },
            {
                "name": "isSchemaConditional",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.if !== undefined ||\r\n      schema.dependencies !== undefined ||\r\n      (schema as JSONSchemaNS.Object).dependentRequired !== undefined ||\r\n      (schema as JSONSchemaNS.Object).dependentSchemas !== undefined)"
            },
            {
                "name": "isStringType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"string\" ||\r\n      schema.minLength !== undefined ||\r\n      schema.maxLength !== undefined ||\r\n      schema.pattern !== undefined ||\r\n      schema.enum?.some((val) => typeof val === \"string\") ||\r\n      typeof schema.const === \"string\")"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Viewer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<NgxJsonSchemaViewerComponent>",
                "defaultValue": "{\r\n    component: NgxJsonSchemaViewerComponent\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
            }
        ],
        "functions": [
            {
                "name": "detectedTypes",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "schema",
                        "type": "Exclude",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "TypeValues[]",
                "jsdoctags": [
                    {
                        "name": "schema",
                        "type": "Exclude",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "foundUndeclaredTypes",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "schema",
                        "type": "Exclude",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Generator<TypeValues, void>",
                "jsdoctags": [
                    {
                        "name": "schema",
                        "type": "Exclude",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "CheckKey",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"nullable\" | \"deprecated\" | \"readOnly\" | \"writeOnly\" | \"enum\" | \"stringLength\" | \"objectProperties\" | \"no-extra-properties\" | \"arrayItems\" | \"arrayContains\" | \"no-extra-items\" | \"number-range\" | \"pattern\" | \"multipleOf\" | \"uniqueItems\" | \"default\" | \"const\" | \"examples\" | \"contentMediaType\" | \"contentEncoding\" | \"contentSchema\"",
                "file": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "JSONSchema",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Draft_07 | Draft_2019_09 | Draft_2020_12",
                "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "JSONSchema_Draft_07",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Draft_07",
                "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "JSONSchema_Draft_2019_09",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Draft_2019_09",
                "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "JSONSchema_Draft_2020_12",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Draft_2020_12",
                "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "JSVOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "LinkType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"AND\" | \"OR\" | \"XOR\"",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name-fallback.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<NgxJsonSchemaViewerComponent>",
                "file": "projects/ngx-json-schema-viewer/src/stories/Viewer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "typedJSONArraySchema",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "JSONSchemaNS.Array",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-contains-number.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "typedJSONArraySchema",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "JSONSchemaNS.Array",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-number-of-items.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "TypeValues",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " `${TypeName}`",
                "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 200
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/ngx-json-schema-viewer/src/stories/Viewer.stories.ts": [
                {
                    "name": "AdditionalItems1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Viewer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        schema: {\r\n            \"type\": \"array\",\r\n            \"items\": [\r\n              {\r\n                \"type\": \"integer\"\r\n              },\r\n              {\r\n                \"type\": \"string\"\r\n              }\r\n            ],\r\n            \"additionalItems\": false\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Viewer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<NgxJsonSchemaViewerComponent>",
                    "defaultValue": "{\r\n    component: NgxJsonSchemaViewerComponent\r\n}"
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts": [
                {
                    "name": "isArrayType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"array\" ||\r\n      schema.items !== undefined ||\r\n      schema.minItems !== undefined ||\r\n      schema.maxItems !== undefined ||\r\n      schema.additionalItems !== undefined ||\r\n      schema.contains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).minContains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).maxContains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).prefixItems !== undefined ||\r\n      (schema as JSONSchemaNS.Array).unevaluatedItems !== undefined ||\r\n      Array.isArray(schema.const) ||\r\n      schema.enum?.some((s) => Array.isArray(s)))"
                },
                {
                    "name": "isBoolean",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"boolean\" ||\r\n      schema.enum?.some((val) => typeof val === \"boolean\") ||\r\n      typeof schema.const === \"boolean\")"
                },
                {
                    "name": "isInteger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"integer\" ||\r\n      schema.multipleOf === 1 ||\r\n      schema.enum?.some((val) => typeof val === \"bigint\") ||\r\n      typeof schema.const === \"bigint\")"
                },
                {
                    "name": "isNull",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"null\" ||\r\n      schema.enum?.some((val) => val === null) ||\r\n      schema.const === null)"
                },
                {
                    "name": "isNumeric",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"number\" ||\r\n      schema.multipleOf !== undefined ||\r\n      schema.minimum !== undefined ||\r\n      schema.exclusiveMinimum !== undefined ||\r\n      schema.maximum !== undefined ||\r\n      schema.exclusiveMaximum !== undefined ||\r\n      schema.enum?.some((val) => typeof val === \"number\") ||\r\n      typeof schema.const === \"number\")"
                },
                {
                    "name": "isObjectType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"object\" ||\r\n      schema.properties !== undefined ||\r\n      schema.additionalProperties !== undefined ||\r\n      schema.patternProperties !== undefined ||\r\n      schema.propertyNames !== undefined ||\r\n      schema.minProperties !== undefined ||\r\n      schema.maxProperties !== undefined ||\r\n      schema.required !== undefined ||\r\n      (schema as JSONSchemaNS.Object).unevaluatedProperties !== undefined)"
                },
                {
                    "name": "isSchemaComposition",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.allOf !== undefined ||\r\n      schema.anyOf !== undefined ||\r\n      schema.oneOf !== undefined ||\r\n      schema.not !== undefined)"
                },
                {
                    "name": "isSchemaConditional",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.if !== undefined ||\r\n      schema.dependencies !== undefined ||\r\n      (schema as JSONSchemaNS.Object).dependentRequired !== undefined ||\r\n      (schema as JSONSchemaNS.Object).dependentSchemas !== undefined)"
                },
                {
                    "name": "isStringType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"string\" ||\r\n      schema.minLength !== undefined ||\r\n      schema.maxLength !== undefined ||\r\n      schema.pattern !== undefined ||\r\n      schema.enum?.some((val) => typeof val === \"string\") ||\r\n      typeof schema.const === \"string\")"
                }
            ],
            "projects/ngx-json-schema-viewer/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {
            "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts": [
                {
                    "name": "detectedTypes",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "schema",
                            "type": "Exclude",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "TypeValues[]",
                    "jsdoctags": [
                        {
                            "name": "schema",
                            "type": "Exclude",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "foundUndeclaredTypes",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "schema",
                            "type": "Exclude",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Generator<TypeValues, void>",
                    "jsdoctags": [
                        {
                            "name": "schema",
                            "type": "Exclude",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts": [
                {
                    "name": "CheckKey",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"nullable\" | \"deprecated\" | \"readOnly\" | \"writeOnly\" | \"enum\" | \"stringLength\" | \"objectProperties\" | \"no-extra-properties\" | \"arrayItems\" | \"arrayContains\" | \"no-extra-items\" | \"number-range\" | \"pattern\" | \"multipleOf\" | \"uniqueItems\" | \"default\" | \"const\" | \"examples\" | \"contentMediaType\" | \"contentEncoding\" | \"contentSchema\"",
                    "file": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                },
                {
                    "name": "JSVOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/types.ts": [
                {
                    "name": "JSONSchema",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Draft_07 | Draft_2019_09 | Draft_2020_12",
                    "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                },
                {
                    "name": "JSONSchema_Draft_07",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Draft_07",
                    "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "JSONSchema_Draft_2019_09",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Draft_2019_09",
                    "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "JSONSchema_Draft_2020_12",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Draft_2020_12",
                    "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "TypeValues",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " `${TypeName}`",
                    "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 200
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name-fallback.ts": [
                {
                    "name": "LinkType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"AND\" | \"OR\" | \"XOR\"",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name-fallback.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/Viewer.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<NgxJsonSchemaViewerComponent>",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Viewer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-contains-number.ts": [
                {
                    "name": "typedJSONArraySchema",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "JSONSchemaNS.Array",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-contains-number.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-number-of-items.ts": [
                {
                    "name": "typedJSONArraySchema",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "JSONSchemaNS.Array",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-number-of-items.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ngx-json-schema-viewer/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/additional-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAdditionalItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/contains.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateContainsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/index.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateArrayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/items.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/prefix-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreatePrefixItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/unevaluated-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateUnevaluatedItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-always-invalid.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAlwaysInvalidComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-always-valid.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAlwaysValidComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-boolean.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateBooleanComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-description.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateDescriptionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-integer.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateIntegerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-null.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateNullComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-number.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateNumberComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-string.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateStringComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/additional-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAdditionalPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/index.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateObjectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/pattern-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreatePatternPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreatePropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/property-names.ts",
                "type": "component",
                "linktype": "component",
                "name": "PropertyNamesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/unevaluated-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateUnevaluatedPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/unlisted-required-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateUnlistedPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/all-of.ts",
                "type": "component",
                "linktype": "component",
                "name": "AllOfSchemaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/any-of.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnyOfSchemaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/index.ts",
                "type": "component",
                "linktype": "component",
                "name": "SchemaCompositionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/not.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotSchemaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/one-of.ts",
                "type": "component",
                "linktype": "component",
                "name": "OneOfSchemaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependencies.ts",
                "type": "component",
                "linktype": "component",
                "name": "DependenciesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependent-required.ts",
                "type": "component",
                "linktype": "component",
                "name": "DependentRequiredComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependent-schemas.ts",
                "type": "component",
                "linktype": "component",
                "name": "DependentSchemasComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/if-else-then.ts",
                "type": "component",
                "linktype": "component",
                "name": "IfElseThenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/index.ts",
                "type": "component",
                "linktype": "component",
                "name": "SchemaConditionalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/create-edge.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateEdgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/create-nodes.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateNodesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/create-types.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateTypesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/create-valid-or-invalid.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateValidOrInvalidComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/render-multiple-types.ts",
                "type": "component",
                "linktype": "component",
                "name": "RenderMultipleTypesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/render-provided-type.ts",
                "type": "component",
                "linktype": "component",
                "name": "RenderProvidedTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/Deprecated/deprecated-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeprecatedLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/ReadOnly/read-only-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReadOnlyLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/Required/required-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RequiredLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/WriteOnly/write-only-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WriteOnlyLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/and-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "AndLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/array-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArrayLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/boolean-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooleanLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/else-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "ElseLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/error-occurred.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorOccurredLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/false-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "FalseLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/if-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "IfLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/integer-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "IntegerLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/loading-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/not-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/null-labels.ts",
                "type": "component",
                "linktype": "component",
                "name": "NullLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/number-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumberLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/object-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "ObjectLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/or-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/string-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "StringLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/then-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThenLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/true-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "TrueLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/type-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypeLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/xor-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "XorLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/ngx-json-schema-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgxJsonSchemaViewerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "JSVOptionsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/services/schema-resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SchemaResolutionService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/customized-array.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenerateFriendlyNameCustomArrayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/customized-name.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenerateFriendlyNameCustomComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name-fallback.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenerateFriendlyNameFallbackComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenerateFriendlyNameComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-contains-number.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArrayContainsNumberComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-number-of-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArrayNumberOfItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-unique-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArrayUniqueItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/constant.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConstantComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-encoding.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentEncodingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-media.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentMediaTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-schema.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentSchemaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/default-value.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultValueComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/deprecated.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeprecatedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/enum.ts",
                "type": "component",
                "linktype": "component",
                "name": "EnumComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/examples.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExamplesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/no-extra-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoExtraItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/no-extra-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoExtraPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/nullable.ts",
                "type": "component",
                "linktype": "component",
                "name": "NullableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/number-bounds.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumberBoundsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/number-multiple-of.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultipleOfComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/object-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "ObjectPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/pattern.ts",
                "type": "component",
                "linktype": "component",
                "name": "PatternComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/print-schema-type.ts",
                "type": "component",
                "linktype": "component",
                "name": "PrintSchemaTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/readOnly.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReadOnlyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/string-length.ts",
                "type": "component",
                "linktype": "component",
                "name": "StringLengthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/writeOnly.ts",
                "type": "component",
                "linktype": "component",
                "name": "WriteOnlyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "detectedTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "foundUndeclaredTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isArrayType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isBoolean",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isInteger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isNull",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isNumeric",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isObjectType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isSchemaComposition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isSchemaConditional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isStringType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/qualifier-messages.ts",
                "type": "component",
                "linktype": "component",
                "name": "QualifierMessages",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/type-label-switch.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypeLabelSwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Viewer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AdditionalItems1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Viewer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}