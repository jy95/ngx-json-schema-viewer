{
    "pipes": [
        {
            "name": "DependanciesToDependentRequiredPipe",
            "id": "pipe-DependanciesToDependentRequiredPipe-7949c153bdf49d4aa858b33b1c5764422fd1d5ea8813aa031672f5bb9e7d86f33fcbed5e74ef5f61518dc081d0fd3abead92c977cdc451dfc59042bcc0126669",
            "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependancies-to-dependent-required.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "dependentRequired",
                            "type": "ValueType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OutputType",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dependentRequired",
                            "type": "ValueType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "dependanciesTodependentRequired",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport type { JSONSchema } from \"../types\";\r\n\r\ntype ValueType = Record<string, string[] | readonly string[] | JSONSchema>;\r\ntype OutputType = Record<string, string[] | readonly string[]>;\r\n\r\n@Pipe({ \r\n    name: 'dependanciesTodependentRequired',\r\n    standalone: true \r\n})\r\nexport class DependanciesToDependentRequiredPipe implements PipeTransform {\r\n    transform(dependentRequired: ValueType) : OutputType {\r\n        const result: Record<string, string[] | readonly string[]> = {};\r\n\r\n        for (const [property, subSchema] of Object.entries(dependentRequired)) {\r\n            if (Array.isArray(subSchema)) {\r\n                // dependentRequired case\r\n                result[property] = subSchema;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"
        },
        {
            "name": "DependanciesToDependentSchemasPipe",
            "id": "pipe-DependanciesToDependentSchemasPipe-303772049d13e26a79220d6df0c637005ba53364578ca1d338d9384724b73ec510f60be6e00648e5805156c8325b063404dc9b669a5df1ffcdaedfd0ea57a9b6",
            "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependancies-to-dependent-schemas.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "dependentSchemas",
                            "type": "ValueType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OutputType",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dependentSchemas",
                            "type": "ValueType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "dependanciesTodependentSchemas",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport type { JSONSchema } from \"../types\";\r\n\r\ntype ValueType = Record<string, string[] | readonly string[] | JSONSchema>;\r\ntype OutputType = Record<string, JSONSchema>;\r\n\r\n@Pipe({ \r\n    name: 'dependanciesTodependentSchemas',\r\n    standalone: true \r\n})\r\nexport class DependanciesToDependentSchemasPipe implements PipeTransform {\r\n    transform(dependentSchemas: ValueType) : OutputType {\r\n        const result: Record<string, JSONSchema> = {};\r\n\r\n        for (const [property, subSchema] of Object.entries(dependentSchemas)) {\r\n            if (!Array.isArray(subSchema)) {\r\n                // dependentSchemas case\r\n                result[property] = subSchema as JSONSchema;\r\n            }\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}"
        },
        {
            "name": "DependentRequiredPipe",
            "id": "pipe-DependentRequiredPipe-fc925eb124e01e2c711b05dac292b886639210460129a38c72e6554dc8b91d5c18a656bdf8d1666afa079ef3f944946102aa113b3fc2851569c13a2f24ed95b7",
            "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependent-required.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "dependentRequired",
                            "type": "ValueType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OutputType",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dependentRequired",
                            "type": "ValueType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "dependentRequired",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport type { JSONSchema } from \"../types\";\r\n\r\ntype ValueType = Record<string, string[] | readonly string[]>;\r\ntype OutputType = Exclude<JSONSchema, true | false>;\r\n\r\n@Pipe({ \r\n    name: 'dependentRequired',\r\n    standalone: true \r\n})\r\nexport class DependentRequiredPipe implements PipeTransform {\r\n    transform(dependentRequired: ValueType) : OutputType {\r\n        return {\r\n            allOf: Object.entries(dependentRequired).map(\r\n                ([property, requiredProperties]) => ({\r\n                    if: {\r\n                      type: \"object\",\r\n                      required: [property],\r\n                    },\r\n                    then: {\r\n                      type: \"object\",\r\n                      required: requiredProperties,\r\n                    },\r\n                })\r\n            )\r\n        }\r\n    }\r\n}"
        },
        {
            "name": "DependentSchemasPipe",
            "id": "pipe-DependentSchemasPipe-5f06ba90d13da0dd28a08ecca574213153a39241362267054556400a584ecaef6a64d10ae4ba2c681508ac1f0eefabcbc2f42b92fc769e561b64f6220299269e",
            "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependent-schemas.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "dependentSchemas",
                            "type": "ValueType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OutputType",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dependentSchemas",
                            "type": "ValueType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "dependentSchemas",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport type { JSONSchema } from \"../types\";\r\n\r\ntype ValueType = Record<string, JSONSchema>;\r\ntype OutputType = Exclude<JSONSchema, true | false>;\r\n\r\n@Pipe({ \r\n    name: 'dependentSchemas',\r\n    standalone: true \r\n})\r\nexport class DependentSchemasPipe implements PipeTransform {\r\n    transform(dependentSchemas: ValueType) : OutputType {\r\n        return {\r\n            allOf: Object.entries(dependentSchemas).map(\r\n                ([property, subSchema]) => ({\r\n                    if: {\r\n                      type: \"object\",\r\n                      required: [property],\r\n                    },\r\n                    then: subSchema,\r\n                })\r\n            )\r\n        }\r\n    }\r\n}"
        }
    ],
    "interfaces": [],
    "injectables": [
        {
            "name": "JSVOptionsService",
            "id": "injectable-JSVOptionsService-64e9d6382bec6ea6a3fde1450bf67f5df65b416671aef23334a417bd4614a566f0f7b3f9d538d34450845fc3dbf9b1e1fdd3c2b3d2268b26a7136a7d6daa0f9d",
            "file": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
            "properties": [
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JSVOptions",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "JSVOptions",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setOptions",
                    "args": [
                        {
                            "name": "userOptions",
                            "type": "Partial<JSVOptions>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userOptions",
                            "type": "Partial<JSVOptions>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nexport type CheckKey =\r\n  | \"nullable\"\r\n  | \"deprecated\"\r\n  | \"readOnly\"\r\n  | \"writeOnly\"\r\n  | \"enum\"\r\n  | \"stringLength\"\r\n  | \"objectProperties\"\r\n  | \"no-extra-properties\"\r\n  | \"arrayItems\"\r\n  | \"arrayContains\"\r\n  | \"no-extra-items\"\r\n  | \"number-range\"\r\n  | \"pattern\"\r\n  | \"multipleOf\"\r\n  | \"uniqueItems\"\r\n  | \"default\"\r\n  | \"const\"\r\n  | \"examples\"\r\n  | \"contentMediaType\"\r\n  | \"contentEncoding\"\r\n  | \"contentSchema\"\r\n\r\nexport type JSVOptions = {\r\n    /**\r\n     * Should we display \"examples\" ?\r\n     * @default false\r\n     */\r\n    showExamples: boolean\r\n    /**\r\n     * To overwrite the order to display qualifier messages\r\n     * @default [\"nullable\",\"deprecated\",\"readOnly\",\"writeOnly\",\"enum\",\"stringLength\",\"objectProperties\",\"no-extra-properties\",\"arrayItems\",\"arrayContains\",\"no-extra-items\",\"number-range\",\"pattern\",\"multipleOf\",\"uniqueItems\",\"contentEncoding\",\"contentMediaType\",\"contentSchema\",\"default\",\"const\",\"examples\"]\r\n     */\r\n    qualifierMessagesOrder: CheckKey[]\r\n}\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class JSVOptionsService {\r\n\r\n    private options: JSVOptions;\r\n\r\n    constructor() {\r\n        this.options = {\r\n            showExamples: false,\r\n            qualifierMessagesOrder: [\r\n                \"nullable\",\r\n                \"deprecated\",\r\n                \"readOnly\",\r\n                \"writeOnly\",\r\n                \"enum\",\r\n                \"stringLength\",\r\n                \"objectProperties\",\r\n                \"no-extra-properties\",\r\n                \"arrayItems\",\r\n                \"arrayContains\",\r\n                \"no-extra-items\",\r\n                \"number-range\",\r\n                \"pattern\",\r\n                \"multipleOf\",\r\n                \"uniqueItems\",\r\n                \"contentEncoding\",\r\n                \"contentMediaType\",\r\n                \"contentSchema\",\r\n                \"default\",\r\n                \"const\",\r\n                \"examples\"\r\n            ]\r\n        }\r\n    }\r\n\r\n    setOptions(userOptions?: Partial<JSVOptions>) {\r\n        this.options = {\r\n            ...this.options,\r\n            ...userOptions\r\n        }\r\n    }\r\n\r\n    getOptions(): JSVOptions {\r\n        return this.options;\r\n    }\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 44
            },
            "type": "injectable"
        },
        {
            "name": "SchemaResolutionService",
            "id": "injectable-SchemaResolutionService-5f8aaf0fe6af184844c88c7095b8b73f1beabb13e9bb1825f615b5600e77a780e6acf3f93eace573f1c9de5e721c4e7f722d81f8c063a1fb470e67eacbedf3e4",
            "file": "projects/ngx-json-schema-viewer/src/lib/services/schema-resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolveSchema",
                    "args": [
                        {
                            "name": "schema",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "resolverOptions",
                            "type": "IResolveOpts",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<JSONSchema>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "schema",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "resolverOptions",
                            "type": "IResolveOpts",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Resolver } from '@stoplight/json-ref-resolver';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport type { IResolveOpts } from \"@stoplight/json-ref-resolver/types\"\r\nimport type { JSONSchema } from \"../types\";\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class SchemaResolutionService {\r\n\r\n    resolveSchema(schema: unknown, resolverOptions?: IResolveOpts): Observable<JSONSchema> {\r\n        return new Observable((observer) => {\r\n          new Resolver()\r\n            .resolve(schema, resolverOptions)\r\n            .then((result) => {\r\n              observer.next(result.result);\r\n              observer.complete();\r\n            })\r\n            .catch((err) => {\r\n              observer.error(err);\r\n            });\r\n        });\r\n    }\r\n}",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AllOfSchemaComponent",
            "id": "component-AllOfSchemaComponent-484f7f1f973b4579344061bbdf93b4eb5bd70e271dae788e30be2f46d0f74b32861b51b98871f0574731968a2b3c6a0e61505759c21d9bd2c33e6c35d9659483",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/all-of.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-composition-all-of",
            "styleUrls": [
                "./all-of.css"
            ],
            "styles": [],
            "template": "<div>\n  <span class=\"badge allOf\">{{ typeOf }}</span>\n  <mat-tab-group>\n    <ng-container *ngFor=\"let compositeSchema of typedSchema\">\n      <mat-tab>\n        <ng-template mat-tab-label>\n          <jsv-friendly-name [schema]=\"compositeSchema\" />\n        </ng-template>\n        <jse-common-create-nodes [schema]=\"compositeSchema\" />\n      </mat-tab>\n    </ng-container>\n  </mat-tab-group>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 38,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateNodesComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\n\r\nimport { GenerateFriendlyNameComponent } from \"../../utils/index\";\r\nimport { CreateNodesComponent } from \"../../common/create-nodes\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-composition-all-of',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    MatTabsModule, \r\n    forwardRef(() => GenerateFriendlyNameComponent),\r\n    forwardRef(() => CreateNodesComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <span class=\"badge allOf\">{{ typeOf }}</span>\r\n      <mat-tab-group>\r\n        <ng-container *ngFor=\"let compositeSchema of typedSchema\">\r\n          <mat-tab>\r\n            <ng-template mat-tab-label>\r\n              <jsv-friendly-name [schema]=\"compositeSchema\" />\r\n            </ng-template>\r\n            <jse-common-create-nodes [schema]=\"compositeSchema\" />\r\n          </mat-tab>\r\n        </ng-container>\r\n      </mat-tab-group>\r\n    </div>\r\n  `,\r\n  styleUrls: [\"./all-of.css\"]\r\n})\r\nexport class AllOfSchemaComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): JSONSchema[] {\r\n    return this.schema.allOf! as JSONSchema[];\r\n  }\r\n\r\n  get typeOf(): string {\r\n    return \"allOf\";\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".badge.allOf {\r\n    display: inline-block;\r\n    padding: 6px 12px;\r\n    background-color: blue; /* Custom background color for \"allOf\" */\r\n    border-radius: 50%;\r\n    color: #fff; /* Custom font color for \"allOf\" */\r\n    font-weight: bold; /* Make text bold */\r\n}\r\n  ",
                    "styleUrl": "./all-of.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 40
                    }
                },
                "typeOf": {
                    "name": "typeOf",
                    "getSignature": {
                        "name": "typeOf",
                        "type": "string",
                        "returnType": "string",
                        "line": 44
                    }
                }
            }
        },
        {
            "name": "AndLabelComponent",
            "id": "component-AndLabelComponent-7493b7a89dc0f815d2af218555baf99fc88d3e28ba71bd6808371ae19faedc7afb1c750d9fb46c408514062a3f506e5deac1a1ee00483183d0b90274ff7930c8",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/and-label.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-and",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n<strong>AND</strong>\n<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n\n<ng-template #spaceTemplate>\n  &nbsp;\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgTemplateOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-and',\r\n  standalone: true,\r\n  imports: [NgTemplateOutlet],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n    <strong>AND</strong>\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n\r\n    <ng-template #spaceTemplate>\r\n      &nbsp;\r\n    </ng-template>\r\n  `,\r\n})\r\nexport class AndLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "AnyOfSchemaComponent",
            "id": "component-AnyOfSchemaComponent-629e07d964051cad998fe201e86fa39bb8c01f2047070aecc412a1f3e7d346b6eddcc613ed07c3f6c07e0d9309d12732f3e51574f598da947fbc00a5f44e0261",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/any-of.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-composition-any-of",
            "styleUrls": [
                "./any-of.css"
            ],
            "styles": [],
            "template": "<div>\n  <span class=\"badge anyOf\">{{ typeOf }}</span>\n  <mat-tab-group>\n    <ng-container *ngFor=\"let compositeSchema of typedSchema\">\n      <mat-tab>\n        <ng-template mat-tab-label>\n          <jsv-friendly-name [schema]=\"compositeSchema\" />\n        </ng-template>\n        <jse-common-create-nodes [schema]=\"compositeSchema\" />\n      </mat-tab>\n    </ng-container>\n  </mat-tab-group>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 38,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateNodesComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\n\r\nimport { GenerateFriendlyNameComponent } from \"../../utils/index\";\r\nimport { CreateNodesComponent } from \"../../common/create-nodes\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-composition-any-of',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatTabsModule, \r\n    forwardRef(() => GenerateFriendlyNameComponent), \r\n    forwardRef(() => CreateNodesComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <span class=\"badge anyOf\">{{ typeOf }}</span>\r\n      <mat-tab-group>\r\n        <ng-container *ngFor=\"let compositeSchema of typedSchema\">\r\n          <mat-tab>\r\n            <ng-template mat-tab-label>\r\n              <jsv-friendly-name [schema]=\"compositeSchema\" />\r\n            </ng-template>\r\n            <jse-common-create-nodes [schema]=\"compositeSchema\" />\r\n          </mat-tab>\r\n        </ng-container>\r\n      </mat-tab-group>\r\n    </div>\r\n  `,\r\n  styleUrls: [\"./any-of.css\"]\r\n})\r\nexport class AnyOfSchemaComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): JSONSchema[] {\r\n    return this.schema.anyOf! as JSONSchema[];\r\n  }\r\n\r\n  get typeOf(): string {\r\n    return \"anyOf\";\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".badge.anyOf {\r\n    display: inline-block;\r\n    padding: 6px 12px;\r\n    background-color: orange; /* Custom background color for \"anyOf\" */\r\n    border-radius: 50%;\r\n    color: #000; /* Custom font color for \"anyOf\" */\r\n    font-weight: bold; /* Make text bold */\r\n}\r\n  ",
                    "styleUrl": "./any-of.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 40
                    }
                },
                "typeOf": {
                    "name": "typeOf",
                    "getSignature": {
                        "name": "typeOf",
                        "type": "string",
                        "returnType": "string",
                        "line": 44
                    }
                }
            }
        },
        {
            "name": "ArrayContainsNumberComponent",
            "id": "component-ArrayContainsNumberComponent-61b2fb92bb9f0e19a0e71e143f00583a07fe07f7a22bed02c5ce8ffa351ebee8d36b2665e5f13a47b8eda900075c6e8f78a9f3eaedabb298b028f0d6c97f5a2b",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-contains-number.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-array-contains",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <strong>Must contain : </strong>\n    <ng-container *ngIf=\"typedSchema.minContains\">\n      <code>\n        {{ getMinContainsLabel(typedSchema.minContains) }}\n      </code>\n    </ng-container>\n    <ng-container *ngIf=\"hasMinAndMax\">\n      <labels-and></labels-and>\n    </ng-container>\n    <ng-container *ngIf=\"typedSchema.maxContains !== undefined\">\n      <code>\n        {{ getMaxContainsLabel(typedSchema.maxContains) }}\n      </code>\n    </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 35,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getMaxContainsLabel",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMinContainsLabel",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AndLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AndLabelComponent } from \"../../labels/and-label\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from '../../types';\r\n\r\ntype typedJSONArraySchema = JSONSchemaNS.Array;\r\n\r\n@Component({\r\n    selector: 'qm-array-contains',\r\n    standalone: true,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    template: `\r\n  <div>\r\n      <strong>Must contain : </strong>\r\n      <ng-container *ngIf=\"typedSchema.minContains\">\r\n        <code>\r\n          {{ getMinContainsLabel(typedSchema.minContains) }}\r\n        </code>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"hasMinAndMax\">\r\n        <labels-and></labels-and>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"typedSchema.maxContains !== undefined\">\r\n        <code>\r\n          {{ getMaxContainsLabel(typedSchema.maxContains) }}\r\n        </code>\r\n      </ng-container>\r\n  </div>\r\n  `,\r\n    imports: [CommonModule, AndLabelComponent]\r\n})\r\nexport class ArrayContainsNumberComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): typedJSONArraySchema {\r\n    return this.schema as typedJSONArraySchema;\r\n  }\r\n\r\n  // minContains\r\n  getMinContainsLabel(value: number): string {\r\n    return `at least ${value} valid item(s)`;\r\n  }\r\n\r\n  // maxContains\r\n  getMaxContainsLabel(value: number): string {\r\n    return `at most ${value} valid item(s)`;\r\n  }\r\n\r\n  get hasMinAndMax() : boolean {\r\n    return this.typedSchema.minContains !== undefined && this.typedSchema.maxContains !== undefined;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "typedJSONArraySchema",
                        "line": 37
                    }
                },
                "hasMinAndMax": {
                    "name": "hasMinAndMax",
                    "getSignature": {
                        "name": "hasMinAndMax",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "ArrayLabelComponent",
            "id": "component-ArrayLabelComponent-5b024a500e841d760cd029ab8bead83ce30b1f1f2e275895cd5fdb2228722f77e07b77a1769a65c806378e3bfaa8d8f82860030311f85a59d6bba6c6b698e64e",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/array-label.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-array",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n    array\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-array',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n        array\r\n    </span>\r\n  `,\r\n})\r\nexport class ArrayLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ArrayNumberOfItemsComponent",
            "id": "component-ArrayNumberOfItemsComponent-013c80d48e4aa2047fbd7cfd3ef8e728ac22a46fea5c3b14584e70269cc014c612a66519eab8d93152ec81d5a1f30c1a624bec5381d498ef3f79a6b785e1844d",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-number-of-items.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-array-number-of-items",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <strong>Length :</strong>\n    &nbsp;\n    <ng-container *ngIf=\"typedSchema.minItems !== undefined\">\n      <code>\n        {{ getMinItemsLabel(typedSchema.minItems!) }}\n      </code>\n    </ng-container>\n    <ng-container *ngIf=\"hasMinAndMax\">\n      <labels-and></labels-and>\n    </ng-container>\n    <ng-container *ngIf=\"typedSchema.maxItems !== undefined\">\n      <code>\n        {{ getMaxItemsLabel(typedSchema.maxItems!) }}\n      </code>\n    </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 35,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getMaxItemsLabel",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMinItemsLabel",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AndLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AndLabelComponent } from \"../../labels/and-label\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from '../../types';\r\ntype typedJSONArraySchema = JSONSchemaNS.Array;\r\n\r\n@Component({\r\n  selector: 'qm-array-number-of-items',\r\n  standalone: true,\r\n  imports: [CommonModule,AndLabelComponent],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n        <strong>Length :</strong>\r\n        &nbsp;\r\n        <ng-container *ngIf=\"typedSchema.minItems !== undefined\">\r\n          <code>\r\n            {{ getMinItemsLabel(typedSchema.minItems!) }}\r\n          </code>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"hasMinAndMax\">\r\n          <labels-and></labels-and>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"typedSchema.maxItems !== undefined\">\r\n          <code>\r\n            {{ getMaxItemsLabel(typedSchema.maxItems!) }}\r\n          </code>\r\n        </ng-container>\r\n    </div>\r\n  `\r\n})\r\nexport class ArrayNumberOfItemsComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): typedJSONArraySchema {\r\n    return this.schema as typedJSONArraySchema;\r\n  }\r\n\r\n  // minItems\r\n  getMinItemsLabel(value: number): string {\r\n    return `>= ${value}`;\r\n  }\r\n\r\n  // maxItems\r\n  getMaxItemsLabel(value: number): string {\r\n    return `<= ${value}`;\r\n  }\r\n\r\n  get hasMinAndMax(): boolean {\r\n    return this.typedSchema.minItems !== undefined && this.typedSchema.maxItems !== undefined;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "typedJSONArraySchema",
                        "line": 37
                    }
                },
                "hasMinAndMax": {
                    "name": "hasMinAndMax",
                    "getSignature": {
                        "name": "hasMinAndMax",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "ArrayUniqueItemsComponent",
            "id": "component-ArrayUniqueItemsComponent-b09932b937104625d642a2889324a91fbf283efc221057f56f720bafd20bfc841578dcccf9b10dd979382347a88666d438464db3c2cd689a728b6461cdf83747",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-unique-items.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-array-unique-items",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <strong>Unique items :</strong>\n    &nbsp;\n    <code>yes</code>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-array-unique-items',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n  <div>\r\n      <strong>Unique items :</strong>\r\n      &nbsp;\r\n      <code>yes</code>\r\n  </div>\r\n  `\r\n})\r\nexport class ArrayUniqueItemsComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "BooleanLabelComponent",
            "id": "component-BooleanLabelComponent-b42e48b74659af6c4424f7df2fb75a4c036edf4fc6609b6f7cac5b5402de71891054314b0f1aa119a21c88e4e9555cbddea38d81f1f445aeca765c48f53fa997",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/boolean-label.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-boolean",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n    boolean\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-boolean',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n        boolean\r\n    </span>\r\n  `,\r\n})\r\nexport class BooleanLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ConstantComponent",
            "id": "component-ConstantComponent-d49a2899858530e32e7ed9323d039c0e62feb60e04b047bd315dd48c8fed402dd036448c747153c447b52b7458c5e265b206aebec36ccd9ece87cc0460ab232c",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/constant.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-constant",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <strong>Constant value :</strong>\n    &nbsp;\n    <lib-print-schema-type [obj]=\"constValue\" />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 20,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-constant',\r\n  standalone: true,\r\n  imports: [PrintSchemaTypeComponent],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n  <div>\r\n      <strong>Constant value :</strong>\r\n      &nbsp;\r\n      <lib-print-schema-type [obj]=\"constValue\" />\r\n  </div>\r\n  `\r\n})\r\nexport class ConstantComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get constValue(): any {\r\n    return this.schema.const;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "constValue": {
                    "name": "constValue",
                    "getSignature": {
                        "name": "constValue",
                        "type": "any",
                        "returnType": "any",
                        "line": 22
                    }
                }
            }
        },
        {
            "name": "ContentEncodingComponent",
            "id": "component-ContentEncodingComponent-141202cd52e9d77c3548cba66bbbaf75d70814af1ff5de7cf7f2510469cec0412b01a8834b095503c30157c1b4af9c33a92c070e0624c8cee55ebc86523aac50",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-encoding.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-content-encoding",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"schema\">\n  <div>\n    <strong>Encoding :</strong>\n    &nbsp;\n    <lib-print-schema-type [obj]=\"schema.contentEncoding\" />\n  </div>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 23,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport type { JSONSchema } from '../../types';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\n@Component({\r\n  selector: 'qm-content-encoding',\r\n  standalone: true,\r\n  imports: [CommonModule,PrintSchemaTypeComponent],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ng-container *ngIf=\"schema\">\r\n      <div>\r\n        <strong>Encoding :</strong>\r\n        &nbsp;\r\n        <lib-print-schema-type [obj]=\"schema.contentEncoding\" />\r\n      </div>\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class ContentEncodingComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ContentMediaTypeComponent",
            "id": "component-ContentMediaTypeComponent-4c95900f9c43b7909297fe3fc321fe9e946938c21bb99bf65f2787d0c089a9e1cb9f2205ece450fde02ec25b5953148dfc5e40c81c8a2f80032d6121a127319c",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-media.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-content-media-type",
            "styleUrls": [],
            "styles": [],
            "template": "<div key=\"contentMediaType\">\n  <strong>Media type :</strong>\n  &nbsp;\n  <lib-print-schema-type [obj]=\"schema.contentMediaType\" />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 20,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-content-media-type',\r\n  standalone: true,\r\n  imports: [PrintSchemaTypeComponent],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div key=\"contentMediaType\">\r\n      <strong>Media type :</strong>\r\n      &nbsp;\r\n      <lib-print-schema-type [obj]=\"schema.contentMediaType\" />\r\n    </div>\r\n  `,\r\n})\r\nexport class ContentMediaTypeComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ContentSchemaComponent",
            "id": "component-ContentSchemaComponent-3467c8fb314d70e3f3c8384a5fee75fe7f667114055f5e1b3dce4114e730184b120337cbe439a48f5e3d3aed5f38ceb50e4d8ea4e2d627d4ae028e108f3d0382",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-schema.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-content-schema",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ contentSchemaLabel }}</strong>\n  &nbsp;\n  <mat-accordion>\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          {{ title }}\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <ng-template matExpansionPanelContent>\n        <jse-common-create-nodes [schema]=\"schema.contentSchema!\"/>\n      </ng-template>\n    </mat-expansion-panel>\n  </mat-accordion>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 39,
                    "type": "JSONSchemaNS.String",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contentSchemaLabel",
                    "defaultValue": "'Decoded content must be validated against this schema :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "title",
                    "defaultValue": "'Schema'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateNodesComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\n\r\nimport {\r\n  CreateNodesComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\"\r\n\r\n@Component({\r\n  selector: 'qm-content-schema',\r\n  standalone: true,\r\n  imports: [\r\n    MatExpansionModule,\r\n    forwardRef(() => CreateNodesComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <strong>{{ contentSchemaLabel }}</strong>\r\n      &nbsp;\r\n      <mat-accordion>\r\n        <mat-expansion-panel>\r\n          <mat-expansion-panel-header>\r\n            <mat-panel-title>\r\n              {{ title }}\r\n            </mat-panel-title>\r\n          </mat-expansion-panel-header>\r\n          <ng-template matExpansionPanelContent>\r\n            <jse-common-create-nodes [schema]=\"schema.contentSchema!\"/>\r\n          </ng-template>\r\n        </mat-expansion-panel>\r\n      </mat-accordion>\r\n    </div>\r\n  `,\r\n})\r\nexport class ContentSchemaComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.String;\r\n\r\n  // Translated Label\r\n  contentSchemaLabel = 'Decoded content must be validated against this schema :';\r\n\r\n  // TODO maybe later refactor this name ...\r\n  title = 'Schema';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateAdditionalItemsComponent",
            "id": "component-CreateAdditionalItemsComponent-8c1e5497bd67d437bac9ff7e9163a7af580118a8fc1e948032d20eb3a33bd87baa83dcc623a742c61ceccb19b1deaaff7252b93cdd388d98bbc0fcee7962a1ed",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/additional-items.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array-additional-items",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <jse-common-create-edge [schema]=\"items\" [required]=\"isMinItemsValid()\">\n    <code name>\n      {{ additionalItemsLabel(startingIndex) }}\n    </code>\n  </jse-common-create-edge>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 29,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "additionalItemsLabel",
                    "args": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isMinItemsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'jse-array-additional-items',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ul>\r\n      <jse-common-create-edge [schema]=\"items\" [required]=\"isMinItemsValid()\">\r\n        <code name>\r\n          {{ additionalItemsLabel(startingIndex) }}\r\n        </code>\r\n      </jse-common-create-edge>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateAdditionalItemsComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n  get items() : JSONSchema {\r\n    return this.schema.additionalItems!;\r\n  }\r\n  \r\n  get startingIndex() : number {\r\n    return Array.isArray(this.schema.items) ? this.schema.items.length : 1;\r\n  }\r\n\r\n  isMinItemsValid(): boolean {\r\n    return (\r\n      this.schema.minItems !== undefined && this.startingIndex >= this.schema.minItems - 1\r\n    );\r\n  }\r\n\r\n  additionalItemsLabel(count: number): string {\r\n    return `items[${count},...]`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "items": {
                    "name": "items",
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "JSONSchema",
                        "line": 31
                    }
                },
                "startingIndex": {
                    "name": "startingIndex",
                    "getSignature": {
                        "name": "startingIndex",
                        "type": "number",
                        "returnType": "number",
                        "line": 35
                    }
                }
            }
        },
        {
            "name": "CreateAdditionalPropertiesComponent",
            "id": "component-CreateAdditionalPropertiesComponent-7eeb0401dfc810648ffaad6e8327ee11adf5dfede9a89cfe02361e84dc1a5c5b39f35595cbedc2659f0985b72779857c0fe6c3862122178c7d0b46c9523e9f9d",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/additional-properties.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-additional-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"!isUndefinedOrBoolean(additionalProperties)\">\n  <ul>\n    <jse-common-create-edge [schema]=\"additionalProperties!\" [required]=\"false\">\n      <code name>\n        {{ additionalPropertiesLabel() }}\n      </code>\n    </jse-common-create-edge>\n  </ul>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 31,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "additionalPropertiesLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isUndefinedOrBoolean",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-additional-properties',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ng-container *ngIf=\"!isUndefinedOrBoolean(additionalProperties)\">\r\n      <ul>\r\n        <jse-common-create-edge [schema]=\"additionalProperties!\" [required]=\"false\">\r\n          <code name>\r\n            {{ additionalPropertiesLabel() }}\r\n          </code>\r\n        </jse-common-create-edge>\r\n      </ul>\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class CreateAdditionalPropertiesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  get additionalProperties() {\r\n    return this.schema.additionalProperties;\r\n  }\r\n\r\n  isUndefinedOrBoolean(value: any): boolean {\r\n    return value === undefined || typeof value === 'boolean';\r\n  }\r\n\r\n  additionalPropertiesLabel(): string {\r\n    return `property name*`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "additionalProperties": {
                    "name": "additionalProperties",
                    "getSignature": {
                        "name": "additionalProperties",
                        "type": "",
                        "returnType": "",
                        "line": 33
                    }
                }
            }
        },
        {
            "name": "CreateAlwaysInvalidComponent",
            "id": "component-CreateAlwaysInvalidComponent-c6255780d4b037407cbe3d0d70cc14fb3583190eea3c0eb2a3a1337c06d44b4cbf43666188ee831c422b296b8acee6bbc4d2c84d5d9a9ee4d61aab13b8ba4542",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-always-invalid.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-always-invalid",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-false></labels-false>\n  <div style=\"margin-top: 0.75rem;\">\n    {{ \"Always invalid\" }}\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "FalseLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    FalseLabelComponent\r\n} from \"../labels/index\";\r\n\r\n@Component({\r\n  selector: 'jse-always-invalid',\r\n  standalone: true,\r\n  imports: [TypeLabelComponent, FalseLabelComponent],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-false></labels-false>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        {{ \"Always invalid\" }}\r\n      </div>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateAlwaysInvalidComponent {\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateAlwaysValidComponent",
            "id": "component-CreateAlwaysValidComponent-9fe7785ee1520efaed89e096e71ede6ec5f0632df887e69be540edd24b988bce01525c02d8fe70c59f5c7c0e2c846640aefa033ac3baf2bfc8fb03a41669c87c",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-always-valid.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-always-valid",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-true></labels-true>\n  <div style=\"margin-top: 0.75rem;\">\n    {{ \"Always valid\" }}\n  </div>\n  <ng-container *ngIf=\"notBoolean\">\n    <div style=\"margin-top: 0.75rem;\">\n      <qm-messages [schema]=\"typedSchema\" />\n    </div>\n  </ng-container>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\" />\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 51,
                    "type": "JSONSchema",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "TrueLabelComponent",
                    "type": "component"
                },
                {
                    "name": "QualifierMessages"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateDescriptionComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    TrueLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n  CreateDescriptionComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n  QualifierMessages\r\n} from \"../utils/index\";\r\n\r\nimport type { JSONSchema } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-always-valid',\r\n  standalone: true,\r\n  imports: [\r\n    TypeLabelComponent, \r\n    TrueLabelComponent, \r\n    QualifierMessages, \r\n    CommonModule,\r\n    forwardRef(() => CreateDescriptionComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-true></labels-true>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        {{ \"Always valid\" }}\r\n      </div>\r\n      <ng-container *ngIf=\"notBoolean\">\r\n        <div style=\"margin-top: 0.75rem;\">\r\n          <qm-messages [schema]=\"typedSchema\" />\r\n        </div>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\" />\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateAlwaysValidComponent {\r\n  @Input({ required: true }) schema!: JSONSchema;\r\n\r\n  get notBoolean(): boolean {\r\n    return typeof this.schema !== \"boolean\";\r\n  }\r\n\r\n  get typedSchema(): Exclude<JSONSchema, true | false> {\r\n    return this.schema as Exclude<JSONSchema, true | false>;\r\n  }\r\n\r\n  get description(): string | undefined {\r\n    return typeof this.schema !== \"boolean\" ? this.schema.description : undefined;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "notBoolean": {
                    "name": "notBoolean",
                    "getSignature": {
                        "name": "notBoolean",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 53
                    }
                },
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "Exclude<JSONSchema,  | >",
                        "line": 57
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 61
                    }
                }
            }
        },
        {
            "name": "CreateArrayComponent",
            "id": "component-CreateArrayComponent-b816c2223783528b003ddc71f59ebdea8c946de8741531bfc45de6108eb9c937f881c6d14ecebecae1b863eb92a01fedf84b7002e69f98c19e6ddc9ffdf87301",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/index.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type />\n  &nbsp;&#58;&nbsp;\n  <labels-array />\n  <ng-container *ngIf=\"schema.prefixItems !== undefined\">\n    <jse-array-prefix-items [schema]=\"schema\" />\n  </ng-container>\n  <ng-container *ngIf=\"schema.items !== undefined\">\n    <jse-array-items [schema]=\"schema\" />\n  </ng-container>\n  <ng-container *ngIf=\"schema.additionalItems !== undefined\">\n    <jse-array-additional-items [schema]=\"schema\" />\n  </ng-container>\n  <ng-container *ngIf=\"schema.unevaluatedItems !== undefined\">\n    <jse-array-unevaluated-items [schema]=\"schema\" />\n  </ng-container>\n  <ng-container *ngIf=\"schema.contains !== undefined\">\n    <jse-array-contains [schema]=\"schema\" />\n  </ng-container>\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\" />\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 67,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ArrayLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateDescriptionComponent)",
                    "type": "component"
                },
                {
                    "name": "QualifierMessages"
                },
                {
                    "name": "CreateAdditionalItemsComponent",
                    "type": "component"
                },
                {
                    "name": "CreateContainsComponent",
                    "type": "component"
                },
                {
                    "name": "CreateItemsComponent",
                    "type": "component"
                },
                {
                    "name": "CreatePrefixItemsComponent",
                    "type": "component"
                },
                {
                    "name": "CreateUnevaluatedItemsComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport { \r\n    TypeLabelComponent,\r\n    ArrayLabelComponent\r\n } from \"../../labels/index\";\r\nimport { \r\n    CreateDescriptionComponent\r\n } from \"../index\";\r\nimport { CreatePrefixItemsComponent } from \"./prefix-items\";\r\nimport { CreateItemsComponent } from \"./items\";\r\nimport { CreateAdditionalItemsComponent } from \"./additional-items\";\r\nimport { CreateUnevaluatedItemsComponent } from \"./unevaluated-items\";\r\nimport { CreateContainsComponent } from \"./contains\";\r\n\r\nimport { QualifierMessages } from \"../../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-array',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    TypeLabelComponent, \r\n    ArrayLabelComponent,\r\n    forwardRef(() => CreateDescriptionComponent),\r\n    QualifierMessages,\r\n    CreateAdditionalItemsComponent,\r\n    CreateContainsComponent,\r\n    CreateItemsComponent,\r\n    CreatePrefixItemsComponent,\r\n    CreateUnevaluatedItemsComponent\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <labels-type />\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-array />\r\n      <ng-container *ngIf=\"schema.prefixItems !== undefined\">\r\n        <jse-array-prefix-items [schema]=\"schema\" />\r\n      </ng-container>\r\n      <ng-container *ngIf=\"schema.items !== undefined\">\r\n        <jse-array-items [schema]=\"schema\" />\r\n      </ng-container>\r\n      <ng-container *ngIf=\"schema.additionalItems !== undefined\">\r\n        <jse-array-additional-items [schema]=\"schema\" />\r\n      </ng-container>\r\n      <ng-container *ngIf=\"schema.unevaluatedItems !== undefined\">\r\n        <jse-array-unevaluated-items [schema]=\"schema\" />\r\n      </ng-container>\r\n      <ng-container *ngIf=\"schema.contains !== undefined\">\r\n        <jse-array-contains [schema]=\"schema\" />\r\n      </ng-container>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\" />\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateArrayComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateBooleanComponent",
            "id": "component-CreateBooleanComponent-6418147643d5885113f8d3113dc241b8e44b7388216c0a35d2bacc46e870802bbddf57d0ece4080868592260ef342c75dcf48ba30047c3fc94724b2737b6f702",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-boolean.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-boolean",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-boolean></labels-boolean>\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\" />\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 46,
                    "type": "JSONSchemaNS.Boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "BooleanLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateDescriptionComponent)",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    CreateDescriptionComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    BooleanLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    QualifierMessages\r\n} from \"../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-boolean',\r\n  standalone: true,\r\n  imports: [\r\n    TypeLabelComponent, \r\n    BooleanLabelComponent,\r\n    forwardRef(() => CreateDescriptionComponent),\r\n    CommonModule,\r\n    QualifierMessages\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-boolean></labels-boolean>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\" />\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateBooleanComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Boolean;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateContainsComponent",
            "id": "component-CreateContainsComponent-013fef9af4df5b66aeb1d12ccd5464691ade4f8e6b9ec45ccf5a4921087ddd8dcf154fb2aa45451ea15a5293587214c15105cd598e3ab6ce540fa28caba44d40",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/contains.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array-contains",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <jse-common-create-edge [schema]=\"item\" [required]=\"isMinContainsValid()\">\n    <code name>\n      {{ containsLabel }}\n    </code>\n  </jse-common-create-edge>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 29,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isMinContainsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'jse-array-contains',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ul>\r\n      <jse-common-create-edge [schema]=\"item\" [required]=\"isMinContainsValid()\">\r\n        <code name>\r\n          {{ containsLabel }}\r\n        </code>\r\n      </jse-common-create-edge>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateContainsComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n  get item() : JSONSchema {\r\n    return this.schema.contains!;\r\n  }\r\n\r\n  get containsLabel() {\r\n    return `items[..., x, ...]`;\r\n  }\r\n\r\n  isMinContainsValid(): boolean {\r\n    return this.schema.minContains !== undefined && this.schema.minContains > 0;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "item": {
                    "name": "item",
                    "getSignature": {
                        "name": "item",
                        "type": "",
                        "returnType": "JSONSchema",
                        "line": 31
                    }
                },
                "containsLabel": {
                    "name": "containsLabel",
                    "getSignature": {
                        "name": "containsLabel",
                        "type": "",
                        "returnType": "",
                        "line": 35
                    }
                }
            }
        },
        {
            "name": "CreateDescriptionComponent",
            "id": "component-CreateDescriptionComponent-58d4fed3db0e8df1b1829b618472a47b59f2ccafe5576f70b93fd07ee783681813b70117fa66cab4feefd8f2327eb7b30c2d74c484184160f1c342e21941462a",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-description.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-description",
            "styleUrls": [],
            "styles": [],
            "template": "<div style=\"margin-top: 0.75rem;\">\n  {{ description }}\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'jse-description',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div style=\"margin-top: 0.75rem;\">\r\n      {{ description }}\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateDescriptionComponent {\r\n  @Input({ required: true }) description!: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateEdgeComponent",
            "id": "component-CreateEdgeComponent-e5574b537797a060337de8cab7bbaee6346d052c512e823d682088b85f76ab21184f9063a600f668f4ab94ffd2581e797612736c96fd1963ac8e06e386109cca",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/create-edge.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-create-edge",
            "styleUrls": [
                "./create-edge.component.css"
            ],
            "styles": [],
            "template": "<li class=\"schemaItem\">\n    <mat-accordion>\n        <mat-expansion-panel>\n            <mat-expansion-panel-header>\n                <mat-panel-title>\n                    <ng-content select=\"[name]\" />\n                    &nbsp;\n                    <jsv-friendly-name [schema]=\"schema\" />\n                </mat-panel-title>\n                <mat-panel-description>\n                  <ng-container *ngIf=\"isRequired\">\n                      <labels-required />\n                  </ng-container>\n                  <ng-container *ngIf=\"isDeprecated\">\n                      <labels-deprecated />\n                  </ng-container>\n                  <ng-container *ngIf=\"isReadOnly\">\n                      <labels-read-only />\n                  </ng-container>\n                  <ng-container *ngIf=\"isWriteOnly\">\n                      <labels-write-only />\n                  </ng-container>\n                </mat-panel-description>\n            </mat-expansion-panel-header>\n            <ng-template matExpansionPanelContent>\n              <jse-common-create-nodes [schema]=\"schema\" />\n            </ng-template>\n        </mat-expansion-panel>\n    </mat-accordion>\n</li>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 71,
                    "type": "JSONSchema",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "GenerateFriendlyNameComponent",
                    "type": "component"
                },
                {
                    "name": "RequiredLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ReadOnlyLabelComponent",
                    "type": "component"
                },
                {
                    "name": "WriteOnlyLabelComponent",
                    "type": "component"
                },
                {
                    "name": "DeprecatedLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateNodesComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\n\r\nimport {\r\n    GenerateFriendlyNameComponent\r\n} from \"../utils/index\";\r\n\r\nimport {\r\n    RequiredLabelComponent,\r\n    ReadOnlyLabelComponent,\r\n    WriteOnlyLabelComponent,\r\n    DeprecatedLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    CreateNodesComponent\r\n} from \"./index\";\r\n\r\nimport type { JSONSchema, JSONSchema_Draft_2019_09 } from '../types';\r\n\r\n@Component({\r\n  selector: 'jse-common-create-edge',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatExpansionModule,\r\n    GenerateFriendlyNameComponent,\r\n    RequiredLabelComponent,\r\n    ReadOnlyLabelComponent,\r\n    WriteOnlyLabelComponent,\r\n    DeprecatedLabelComponent,\r\n    forwardRef(() => CreateNodesComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <li class=\"schemaItem\">\r\n        <mat-accordion>\r\n            <mat-expansion-panel>\r\n                <mat-expansion-panel-header>\r\n                    <mat-panel-title>\r\n                        <ng-content select=\"[name]\" />\r\n                        &nbsp;\r\n                        <jsv-friendly-name [schema]=\"schema\" />\r\n                    </mat-panel-title>\r\n                    <mat-panel-description>\r\n                      <ng-container *ngIf=\"isRequired\">\r\n                          <labels-required />\r\n                      </ng-container>\r\n                      <ng-container *ngIf=\"isDeprecated\">\r\n                          <labels-deprecated />\r\n                      </ng-container>\r\n                      <ng-container *ngIf=\"isReadOnly\">\r\n                          <labels-read-only />\r\n                      </ng-container>\r\n                      <ng-container *ngIf=\"isWriteOnly\">\r\n                          <labels-write-only />\r\n                      </ng-container>\r\n                    </mat-panel-description>\r\n                </mat-expansion-panel-header>\r\n                <ng-template matExpansionPanelContent>\r\n                  <jse-common-create-nodes [schema]=\"schema\" />\r\n                </ng-template>\r\n            </mat-expansion-panel>\r\n        </mat-accordion>\r\n    </li>\r\n  `,\r\n  styleUrls: ['./create-edge.component.css']\r\n})\r\nexport class CreateEdgeComponent {\r\n  @Input({ required: true }) schema!: JSONSchema;\r\n  @Input({ required: true }) required!: boolean;\r\n\r\n  get isDeprecated(): boolean {\r\n    const typedSchema = this.schema as JSONSchema_Draft_2019_09;\r\n    return typeof typedSchema !== \"boolean\" && typedSchema.deprecated === true;\r\n  }\r\n\r\n  get isReadOnly(): boolean {\r\n    return typeof this.schema !== \"boolean\" && this.schema.readOnly === true;\r\n  }\r\n\r\n  get isWriteOnly(): boolean {\r\n    return typeof this.schema !== \"boolean\" && this.schema.writeOnly === true;\r\n  }\r\n\r\n  get isRequired(): boolean {\r\n    return !this.isDeprecated && this.required;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* create-edge.component.css or create-edge.component.scss */\r\n\r\n.schemaItem {\r\n    list-style: none;\r\n    position: relative;\r\n    margin: 0 !important;\r\n    padding: 5px 0 5px 1rem;\r\n    border-left: thin solid #bec3c9 !important;\r\n}\r\n\r\n.schemaItem:hover {\r\n    background-color: #ffffff0d;\r\n}\r\n\r\n.schemaItem:focus {\r\n    background-color: #ffffff0d;\r\n}\r\n  \r\n[class^=\"schemaItem\"]::before {\r\n    border-bottom: thin solid #bec3c9;\r\n    content: \"\";\r\n    display: inline-block;\r\n    height: 0.5rem;\r\n    left: 0;\r\n    position: absolute;\r\n    top: 10px;\r\n    vertical-align: top;\r\n    width: 0.7rem;\r\n}\r\n  \r\n.schemaName {\r\n    opacity: 0.6;\r\n}\r\n\r\n.strikethrough {\r\n    text-decoration: line-through;\r\n}\r\n  ",
                    "styleUrl": "./create-edge.component.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "isDeprecated": {
                    "name": "isDeprecated",
                    "getSignature": {
                        "name": "isDeprecated",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 74
                    }
                },
                "isReadOnly": {
                    "name": "isReadOnly",
                    "getSignature": {
                        "name": "isReadOnly",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 79
                    }
                },
                "isWriteOnly": {
                    "name": "isWriteOnly",
                    "getSignature": {
                        "name": "isWriteOnly",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 83
                    }
                },
                "isRequired": {
                    "name": "isRequired",
                    "getSignature": {
                        "name": "isRequired",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 87
                    }
                }
            }
        },
        {
            "name": "CreateIntegerComponent",
            "id": "component-CreateIntegerComponent-346736b32bd5288bef1e03170caf77b28d337dfec1c4545798f8bff38304032e0e213dc62f23d0cec0cff66868e9b92997e47eb234e8bbb987e170c839beee4c",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-integer.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-integer",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-integer></labels-integer>\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\" />\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 46,
                    "type": "JSONSchemaNS.Integer",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "IntegerLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateDescriptionComponent)",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    CreateDescriptionComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    IntegerLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    QualifierMessages\r\n} from \"../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-integer',\r\n  standalone: true,\r\n  imports: [\r\n    TypeLabelComponent, \r\n    IntegerLabelComponent,\r\n    forwardRef(() => CreateDescriptionComponent),\r\n    CommonModule,\r\n    QualifierMessages\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-integer></labels-integer>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\" />\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateIntegerComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Integer;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateItemsComponent",
            "id": "component-CreateItemsComponent-4a94b2dbd07000f59b4ec9dc06341c106646186138b2c54353a4a6aa98600aa88b1b355ba1429b192aa1fcabc386f91e258e005483795071a75571a619dbe92f",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/items.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array-items",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <ng-container *ngFor=\"let item of itemsAsArray; let idx = index\">\n    <jse-common-create-edge [schema]=\"item\" [required]=\"isMinItemsValid()\">\n      <code name>\n        {{ itemsLabel(startingIndex + idx, isArray) }}\n      </code>\n    </jse-common-create-edge>\n  </ng-container>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 31,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isMinItemsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "itemsLabel",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isArray",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isArray",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-array-items',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ul>\r\n      <ng-container *ngFor=\"let item of itemsAsArray; let idx = index\">\r\n        <jse-common-create-edge [schema]=\"item\" [required]=\"isMinItemsValid()\">\r\n          <code name>\r\n            {{ itemsLabel(startingIndex + idx, isArray) }}\r\n          </code>\r\n        </jse-common-create-edge>\r\n      </ng-container>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateItemsComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n  get itemsAsArray(): JSONSchema[] {\r\n    if (this.schema.items === undefined) {\r\n      return [];\r\n    }\r\n    return Array.isArray(this.schema.items) ? this.schema.items : [this.schema.items];\r\n  }\r\n\r\n  get startingIndex(): number {\r\n    return Array.isArray(this.schema.prefixItems) ? this.schema.prefixItems.length : 0;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return Array.isArray(this.schema.items);\r\n  }\r\n\r\n  isMinItemsValid(): boolean {\r\n    return this.schema.minItems !== undefined && this.schema.minItems >= this.itemsAsArray.length;\r\n  }\r\n\r\n  itemsLabel(index: number, isArray: boolean): string {\r\n    const finalIdx = isArray ? index.toString() : 'x';\r\n    return `items[${finalIdx}]`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "itemsAsArray": {
                    "name": "itemsAsArray",
                    "getSignature": {
                        "name": "itemsAsArray",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 33
                    }
                },
                "startingIndex": {
                    "name": "startingIndex",
                    "getSignature": {
                        "name": "startingIndex",
                        "type": "number",
                        "returnType": "number",
                        "line": 40
                    }
                },
                "isArray": {
                    "name": "isArray",
                    "getSignature": {
                        "name": "isArray",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 44
                    }
                }
            }
        },
        {
            "name": "CreateNodesComponent",
            "id": "component-CreateNodesComponent-09ff08841fe089fa3cb71dd5cb39778f84365959c242919091a8066bd004466baec7a85430a284a21c2608f9f5b4caa6f225f03a857c2261a381512939a5a650",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/create-nodes.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-create-nodes",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"typedSchema !== undefined; else BooleanSchema\">\n\n  <!-- Handle standard types -->\n  <jse-common-create-types [schema]=\"typedSchema\" />\n\n  <!-- Handle Composition -->\n  <ng-container *ngIf=\"isCompositionSchema\">\n    <jse-schema-composition [schema]=\"typedSchema\" />\n  </ng-container>\n\n  <!-- Handle Conditional -->\n  <ng-container *ngIf=\"isConditionalSchema\">\n    <jse-schema-conditional [schema]=\"typedSchema\" />\n  </ng-container>\n\n</ng-container>\n\n<ng-template #BooleanSchema>\n  <jse-common-create-valid-or-invalid [schema]=\"schema\" />\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 57,
                    "type": "JSONSchema",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => SchemaConditionalComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => SchemaCompositionComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateTypesComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateValidOrInvalidComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n    SchemaConditionalComponent,\r\n    SchemaCompositionComponent,\r\n} from \"../JSONSchemaElements/index\";\r\n\r\nimport {\r\n  isSchemaComposition,\r\n  isSchemaConditional,\r\n} from '../utils/index';\r\n\r\nimport {\r\n    CreateTypesComponent,\r\n    CreateValidOrInvalidComponent\r\n} from \"./index\";\r\n\r\nimport type { JSONSchema } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-common-create-nodes',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => SchemaConditionalComponent),\r\n    forwardRef(() => SchemaCompositionComponent),\r\n    forwardRef(() => CreateTypesComponent),\r\n    forwardRef(() => CreateValidOrInvalidComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ng-container *ngIf=\"typedSchema !== undefined; else BooleanSchema\">\r\n\r\n      <!-- Handle standard types -->\r\n      <jse-common-create-types [schema]=\"typedSchema\" />\r\n\r\n      <!-- Handle Composition -->\r\n      <ng-container *ngIf=\"isCompositionSchema\">\r\n        <jse-schema-composition [schema]=\"typedSchema\" />\r\n      </ng-container>\r\n\r\n      <!-- Handle Conditional -->\r\n      <ng-container *ngIf=\"isConditionalSchema\">\r\n        <jse-schema-conditional [schema]=\"typedSchema\" />\r\n      </ng-container>\r\n      \r\n    </ng-container>\r\n\r\n    <ng-template #BooleanSchema>\r\n      <jse-common-create-valid-or-invalid [schema]=\"schema\" />\r\n    </ng-template>\r\n  `,\r\n})\r\nexport class CreateNodesComponent {\r\n  @Input({ required: true }) schema!: JSONSchema;\r\n\r\n  // Check if the schema is a composition\r\n  get isCompositionSchema() : boolean {\r\n    return isSchemaComposition(this.schema);\r\n  };\r\n\r\n  // Check if the schema is conditional\r\n  get isConditionalSchema() : boolean {\r\n    return isSchemaConditional(this.schema);\r\n  };\r\n  // Typed schema, if not a boolean\r\n  get typedSchema(): Exclude<JSONSchema, false | true> | undefined {\r\n    let isBooleanSchema = typeof this.schema === 'boolean';\r\n    if (!isBooleanSchema) {\r\n      return this.schema as Exclude<JSONSchema, false | true>;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  };\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "isCompositionSchema": {
                    "name": "isCompositionSchema",
                    "getSignature": {
                        "name": "isCompositionSchema",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 60
                    }
                },
                "isConditionalSchema": {
                    "name": "isConditionalSchema",
                    "getSignature": {
                        "name": "isConditionalSchema",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 65
                    }
                },
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "Exclude | undefined",
                        "line": 69
                    }
                }
            }
        },
        {
            "name": "CreateNullComponent",
            "id": "component-CreateNullComponent-d45676812a1ccaf7a0b8853749387ddb3a8af0050ca1587667f33ac5715e44b676bf5f1ca5a9b1b0b864ff4bf0bfe9a98d216575f814ae2819f80a000aa64587",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-null.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-null",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-null></labels-null>\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\" />\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 46,
                    "type": "JSONSchemaNS.Null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "NullLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateDescriptionComponent)",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    CreateDescriptionComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    NullLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    QualifierMessages\r\n} from \"../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-null',\r\n  standalone: true,\r\n  imports: [\r\n    TypeLabelComponent, \r\n    NullLabelComponent,\r\n    forwardRef(() => CreateDescriptionComponent),\r\n    CommonModule,\r\n    QualifierMessages\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-null></labels-null>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\" />\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateNullComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Null;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateNumberComponent",
            "id": "component-CreateNumberComponent-fbfb7a1c8878d9964fd223a0336df578f231a4954fafe67d5991a7b4f2f446cafdf55ba1eb2c1fbf1db322b32f2fc4e41e6f96f75b9c5e6f6388f1705daba1e9",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-number.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-number",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-number></labels-number>\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\" />\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 46,
                    "type": "JSONSchemaNS.Number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "NumberLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateDescriptionComponent)",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    CreateDescriptionComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    NumberLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    QualifierMessages\r\n} from \"../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-number',\r\n  standalone: true,\r\n  imports: [\r\n    TypeLabelComponent, \r\n    NumberLabelComponent,\r\n    forwardRef(() => CreateDescriptionComponent),\r\n    CommonModule,\r\n    QualifierMessages\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-number></labels-number>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\" />\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateNumberComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Number;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateObjectComponent",
            "id": "component-CreateObjectComponent-2faaa581d367703fa3f0cec0d52dc13ba1845b8bc1e35af3b15e0a6bb57d285ecea8eccd0af578f1a08b759a2f0ebba22049ace7ce10a3e6d3efcd68f5b1021d",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/index.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type />\n  &nbsp;&#58;&nbsp;\n  <labels-object />\n  <jse-object-unlisted-properties [schema]=\"schema\" />\n  <ng-container *ngIf=\"schema.properties !== undefined\">\n    <jse-object-properties [schema]=\"schema\" />\n  </ng-container>\n  <ng-container *ngIf=\"schema.patternProperties !== undefined\">\n    <jse-object-pattern-properties [schema]=\"schema\" />\n  </ng-container>\n  <ng-container *ngIf=\"schema.propertyNames !== undefined\">\n    <jse-object-property-names [schema]=\"schema\" />\n  </ng-container>\n  <ng-container *ngIf=\"schema.additionalProperties !== undefined\">\n    <jse-object-additional-properties [schema]=\"schema\" />\n  </ng-container>\n  <ng-container *ngIf=\"schema.unevaluatedProperties !== undefined\">\n    <jse-object-unevaluated-properties [schema]=\"schema\" />\n  </ng-container>\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\" />\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 70,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                },
                {
                    "name": "CreateUnlistedPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "CreatePropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "CreatePatternPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "PropertyNamesComponent",
                    "type": "component"
                },
                {
                    "name": "CreateAdditionalPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "CreateUnevaluatedPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "ObjectLabelComponent",
                    "type": "component"
                },
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateDescriptionComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport { CreateUnlistedPropertiesComponent } from \"./unlisted-required-properties\";\r\nimport { CreatePropertiesComponent } from \"./properties\";\r\nimport { CreatePatternPropertiesComponent } from \"./pattern-properties\";\r\nimport { PropertyNamesComponent } from \"./property-names\";\r\nimport { CreateAdditionalPropertiesComponent } from \"./additional-properties\";\r\nimport { CreateUnevaluatedPropertiesComponent } from \"./unevaluated-properties\";\r\n\r\nimport { QualifierMessages } from \"../../utils/index\";\r\n\r\nimport { \r\n    ObjectLabelComponent,\r\n    TypeLabelComponent\r\n} from \"../../labels/index\";\r\n\r\nimport { CreateDescriptionComponent } from \"../index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    QualifierMessages,\r\n    CreateUnlistedPropertiesComponent,\r\n    CreatePropertiesComponent,\r\n    CreatePatternPropertiesComponent,\r\n    PropertyNamesComponent,\r\n    CreateAdditionalPropertiesComponent,\r\n    CreateUnevaluatedPropertiesComponent,\r\n    ObjectLabelComponent,\r\n    TypeLabelComponent,\r\n    forwardRef(() => CreateDescriptionComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <labels-type />\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-object />\r\n      <jse-object-unlisted-properties [schema]=\"schema\" />\r\n      <ng-container *ngIf=\"schema.properties !== undefined\">\r\n        <jse-object-properties [schema]=\"schema\" />\r\n      </ng-container>\r\n      <ng-container *ngIf=\"schema.patternProperties !== undefined\">\r\n        <jse-object-pattern-properties [schema]=\"schema\" />\r\n      </ng-container>\r\n      <ng-container *ngIf=\"schema.propertyNames !== undefined\">\r\n        <jse-object-property-names [schema]=\"schema\" />\r\n      </ng-container>\r\n      <ng-container *ngIf=\"schema.additionalProperties !== undefined\">\r\n        <jse-object-additional-properties [schema]=\"schema\" />\r\n      </ng-container>\r\n      <ng-container *ngIf=\"schema.unevaluatedProperties !== undefined\">\r\n        <jse-object-unevaluated-properties [schema]=\"schema\" />\r\n      </ng-container>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\" />\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateObjectComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreatePatternPropertiesComponent",
            "id": "component-CreatePatternPropertiesComponent-ec132f60ca724f6710852f6cef662c1b95a639ccfe1b80323eb363b27f2517c547398aa14fc5d11f959dc515878218bd4ee1bfa8d2583c7f522fb9288889d0ee",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/pattern-properties.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-pattern-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <ng-container *ngFor=\"let entry of schema.patternProperties | keyvalue\">\n    <jse-common-create-edge [schema]=\"entry.value\" [required]=\"false\">\n      <code name>\n        {{ generatePropertyName(entry.key) }}\n      </code>\n    </jse-common-create-edge>\n  </ng-container>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 31,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "generatePropertyName",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-pattern-properties',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ul>\r\n      <ng-container *ngFor=\"let entry of schema.patternProperties | keyvalue\">\r\n        <jse-common-create-edge [schema]=\"entry.value\" [required]=\"false\">\r\n          <code name>\r\n            {{ generatePropertyName(entry.key) }}\r\n          </code>\r\n        </jse-common-create-edge>\r\n      </ng-container>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreatePatternPropertiesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  generatePropertyName(key: string): string {\r\n    return `${key}`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreatePrefixItemsComponent",
            "id": "component-CreatePrefixItemsComponent-85a2396770ab07117dc373e7ad06e69240bb1425d47709ac56e8645890e6aff276f0f730e5b6f40357609e1c0dc4c2e3c2a8e62cefcdd4cc3641588ae98181f4",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/prefix-items.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array-prefix-items",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <ng-container *ngFor=\"let val of arrayItems; let idx = index\">\n    <jse-common-create-edge [schema]=\"val\" [required]=\"isMinItemsValid()\">\n      <code name>\n        {{ prefixItemsLabel(idx) }}\n      </code>\n    </jse-common-create-edge>\n  </ng-container>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 31,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isMinItemsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prefixItemsLabel",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchema, JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-array-prefix-items',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ul>\r\n      <ng-container *ngFor=\"let val of arrayItems; let idx = index\">\r\n        <jse-common-create-edge [schema]=\"val\" [required]=\"isMinItemsValid()\">\r\n          <code name>\r\n            {{ prefixItemsLabel(idx) }}\r\n          </code>\r\n        </jse-common-create-edge>\r\n      </ng-container>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreatePrefixItemsComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n  get arrayItems() : JSONSchema[] {\r\n    if (this.schema.prefixItems === undefined) {\r\n      return [];\r\n    }\r\n    return Array.isArray(this.schema.prefixItems) ? this.schema.prefixItems : [this.schema.prefixItems] as JSONSchema[];\r\n  } \r\n\r\n  isMinItemsValid(): boolean {\r\n    return this.schema.minItems !== undefined && this.schema.minItems >= this.arrayItems.length;\r\n  }\r\n\r\n  prefixItemsLabel(index: number): string {\r\n    return `items[${index}]`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "arrayItems": {
                    "name": "arrayItems",
                    "getSignature": {
                        "name": "arrayItems",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 33
                    }
                }
            }
        },
        {
            "name": "CreatePropertiesComponent",
            "id": "component-CreatePropertiesComponent-1c959b324b5e094373c4060419c4b183529714dd87be37f82445a6fe0aa1385f83dcc7232c0d5a191666207bac265aeab82ba68b4ee5713a4651dcf963fdae39",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/properties.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <ng-container *ngFor=\"let entry of schema.properties | keyvalue\">\n    <jse-common-create-edge [schema]=\"entry.value\" [required]=\"isRequired(entry.key)\">\n      <strong name>\n        {{ generatePropertyName(entry.key) }}\n      </strong>\n    </jse-common-create-edge>\n  </ng-container>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 31,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "generatePropertyName",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isRequired",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-properties',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ul>\r\n      <ng-container *ngFor=\"let entry of schema.properties | keyvalue\">\r\n        <jse-common-create-edge [schema]=\"entry.value\" [required]=\"isRequired(entry.key)\">\r\n          <strong name>\r\n            {{ generatePropertyName(entry.key) }}\r\n          </strong>\r\n        </jse-common-create-edge>\r\n      </ng-container>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreatePropertiesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  generatePropertyName(key: string): string {\r\n    return `${key}`;\r\n  }\r\n\r\n  isRequired(key: string): boolean {\r\n    return Array.isArray(this.schema.required) ? this.schema.required.includes(key) : false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateStringComponent",
            "id": "component-CreateStringComponent-9746f19fa26e2f6c08b90108e110d5208bd6eebc6aef64d3697180a42576b42055ffb7ada179f16a338569f7a439c776d76635a8bb35fa7e23f815568d405918",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-string.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-string",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-string></labels-string>\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\" />\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 46,
                    "type": "JSONSchemaNS.String",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "StringLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateDescriptionComponent)",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    CreateDescriptionComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    StringLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    QualifierMessages\r\n} from \"../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-string',\r\n  standalone: true,\r\n  imports: [\r\n    TypeLabelComponent, \r\n    StringLabelComponent,\r\n    forwardRef(() => CreateDescriptionComponent),\r\n    CommonModule,\r\n    QualifierMessages\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-string></labels-string>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\" />\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateStringComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.String;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateTypesComponent",
            "id": "component-CreateTypesComponent-e91811bfa27570855a8f31a35f8ccce7a1e07532d93ab4331e59a1ebcbcf3a0fcba67a385bef7b0a580eb0e8202835f24b48ea7d577d3abfed833f45e5312aaf",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/create-types.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-create-types",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container>\n\n  <ng-container *ngIf=\"foundTypes.length > 0; else defaultCase\">\n    <!-- Case 1: Single type or type with null -->\n    <ng-container *ngIf=\"hasSingleType; else case2\">\n      <jse-common-render-provided-type [schema]=\"schema\" [type]=\"firstType\" [nullable]=\"hasNull\" />\n    </ng-container>\n\n    <!-- Case 2: Multiple types -->\n    <ng-template #case2>\n      <jse-common-multiple-types [schema]=\"schema\" [types]=\"notNullTypeValues\" [nullable]=\"hasNull\" />\n    </ng-template>\n  </ng-container>\n\n  <!-- Default Case: Handle cases like { \"allOf\": ... } or { \"if\": ... } -->\n  <ng-template #defaultCase>\n    <ng-container *ngIf=\"!hasSchemaComposition; else compositionCase\">\n      <jse-common-create-valid-or-invalid [schema]=\"schema\" />\n    </ng-container>\n\n    <ng-template #compositionCase>\n      <!--  Otherwise, we have a SchemaComposition, which will be handled by CreateNodes -->\n      <div></div>\n    </ng-template>\n  </ng-template>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 60,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CreateValidOrInvalidComponent",
                    "type": "component"
                },
                {
                    "name": "RenderProvidedTypeComponent",
                    "type": "component"
                },
                {
                    "name": "RenderMultipleTypesComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport {\r\n    CreateValidOrInvalidComponent,\r\n    RenderProvidedTypeComponent,\r\n    RenderMultipleTypesComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    detectedTypes,\r\n    isSchemaComposition\r\n} from \"../utils/index\"\r\n\r\nimport type {\r\n    TypeValues,\r\n    JSONSchema\r\n} from \"../types\";\r\n\r\n@Component({\r\n  selector: 'jse-common-create-types',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    CreateValidOrInvalidComponent, \r\n    RenderProvidedTypeComponent,\r\n    RenderMultipleTypesComponent\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ng-container>\r\n\r\n      <ng-container *ngIf=\"foundTypes.length > 0; else defaultCase\">\r\n        <!-- Case 1: Single type or type with null -->\r\n        <ng-container *ngIf=\"hasSingleType; else case2\">\r\n          <jse-common-render-provided-type [schema]=\"schema\" [type]=\"firstType\" [nullable]=\"hasNull\" />\r\n        </ng-container>\r\n\r\n        <!-- Case 2: Multiple types -->\r\n        <ng-template #case2>\r\n          <jse-common-multiple-types [schema]=\"schema\" [types]=\"notNullTypeValues\" [nullable]=\"hasNull\" />\r\n        </ng-template>\r\n      </ng-container>\r\n\r\n      <!-- Default Case: Handle cases like { \"allOf\": ... } or { \"if\": ... } -->\r\n      <ng-template #defaultCase>\r\n        <ng-container *ngIf=\"!hasSchemaComposition; else compositionCase\">\r\n          <jse-common-create-valid-or-invalid [schema]=\"schema\" />\r\n        </ng-container>\r\n\r\n        <ng-template #compositionCase>\r\n          <!--  Otherwise, we have a SchemaComposition, which will be handled by CreateNodes -->\r\n          <div></div>\r\n        </ng-template>\r\n      </ng-template>\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class CreateTypesComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get foundTypes() : TypeValues[] {\r\n    return detectedTypes(this.schema);\r\n  }\r\n\r\n  // Single type or type with null\r\n  get hasSingleType(): boolean {\r\n    return this.foundTypes.length === 1 || (this.hasNull && this.foundTypes.length === 2);\r\n  }\r\n\r\n  get hasNull() : boolean {\r\n    return this.foundTypes.includes(\"null\");\r\n  }\r\n\r\n  get hasSchemaComposition() : boolean {\r\n    return isSchemaComposition(this.schema);\r\n  }\r\n\r\n  get firstType(): TypeValues {\r\n    return this.foundTypes.find((s) => s !== \"null\") || this.foundTypes[0];\r\n  }\r\n\r\n  get notNullTypeValues(): TypeValues[] {\r\n    return this.foundTypes.filter((s) => s !== \"null\");\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "foundTypes": {
                    "name": "foundTypes",
                    "getSignature": {
                        "name": "foundTypes",
                        "type": "[]",
                        "returnType": "TypeValues[]",
                        "line": 62
                    }
                },
                "hasSingleType": {
                    "name": "hasSingleType",
                    "getSignature": {
                        "name": "hasSingleType",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 67
                    }
                },
                "hasNull": {
                    "name": "hasNull",
                    "getSignature": {
                        "name": "hasNull",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 71
                    }
                },
                "hasSchemaComposition": {
                    "name": "hasSchemaComposition",
                    "getSignature": {
                        "name": "hasSchemaComposition",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 75
                    }
                },
                "firstType": {
                    "name": "firstType",
                    "getSignature": {
                        "name": "firstType",
                        "type": "",
                        "returnType": "TypeValues",
                        "line": 79
                    }
                },
                "notNullTypeValues": {
                    "name": "notNullTypeValues",
                    "getSignature": {
                        "name": "notNullTypeValues",
                        "type": "[]",
                        "returnType": "TypeValues[]",
                        "line": 83
                    }
                }
            }
        },
        {
            "name": "CreateUnevaluatedItemsComponent",
            "id": "component-CreateUnevaluatedItemsComponent-48cddcc0846347022c15c856fa72c7e1fb7087c86e86843b71814190baae1948e3d058b12569f091778ecf74a69714581e893516b479dba37a9b621bc537c55a",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/unevaluated-items.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array-unevaluated-items",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <jse-common-create-edge [schema]=\"items\" [required]=\"false\">\n    <code name>\n      {{ unevaluatedItemsLabel() }}\n    </code>\n  </jse-common-create-edge>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 29,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "unevaluatedItemsLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-array-unevaluated-items',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ul>\r\n      <jse-common-create-edge [schema]=\"items\" [required]=\"false\">\r\n        <code name>\r\n          {{ unevaluatedItemsLabel() }}\r\n        </code>\r\n      </jse-common-create-edge>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateUnevaluatedItemsComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n  get items() : JSONSchema {\r\n    return this.schema.unevaluatedItems!;\r\n  }\r\n\r\n  unevaluatedItemsLabel(): string {\r\n    return `items[y]`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "items": {
                    "name": "items",
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "JSONSchema",
                        "line": 31
                    }
                }
            }
        },
        {
            "name": "CreateUnevaluatedPropertiesComponent",
            "id": "component-CreateUnevaluatedPropertiesComponent-1c0ab6eae38dda1ed8961eef8001f871f62dfa784a4fa2ba2eea5120ab139ed7bb1c17883d36d3525f365f4959f7ca1fb8df31e4305dd321bae1b2646c54cb27",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/unevaluated-properties.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-unevaluated-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"!isUndefinedOrBoolean(unevaluatedProperties)\">\n  <ul>\n    <jse-common-create-edge [schema]=\"unevaluatedProperties!\" [required]=\"false\">\n      <code name>\n        {{ unevaluatedPropertiesLabel() }}\n      </code>\n    </jse-common-create-edge>\n  </ul>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 31,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isUndefinedOrBoolean",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unevaluatedPropertiesLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-unevaluated-properties',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ng-container *ngIf=\"!isUndefinedOrBoolean(unevaluatedProperties)\">\r\n      <ul>\r\n        <jse-common-create-edge [schema]=\"unevaluatedProperties!\" [required]=\"false\">\r\n          <code name>\r\n            {{ unevaluatedPropertiesLabel() }}\r\n          </code>\r\n        </jse-common-create-edge>\r\n      </ul>\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class CreateUnevaluatedPropertiesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  get unevaluatedProperties() {\r\n    return this.schema.unevaluatedProperties;\r\n  }\r\n\r\n  isUndefinedOrBoolean(value: any): boolean {\r\n    return value === undefined || typeof value === 'boolean';\r\n  }\r\n\r\n  unevaluatedPropertiesLabel(): string {\r\n    return `property name*`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "unevaluatedProperties": {
                    "name": "unevaluatedProperties",
                    "getSignature": {
                        "name": "unevaluatedProperties",
                        "type": "",
                        "returnType": "",
                        "line": 33
                    }
                }
            }
        },
        {
            "name": "CreateUnlistedPropertiesComponent",
            "id": "component-CreateUnlistedPropertiesComponent-b35a0392dcbaf1052f0ba03a18bc123c0a1707c56419d1f59b5e9fbad2a6b82e65bc5b4ecb31c67893809773ac4f9a4b60361747c81b5119c0520c3d61cbf47b",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/unlisted-required-properties.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-unlisted-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <ng-container *ngFor=\"let prop of unlistedProperties\">\n    <jse-common-create-edge\n      [schema]=\"true\"\n      [required]=\"true\"\n    >\n      <strong name>\n        {{ generatePropertyName(prop) }}\n      </strong>\n    </jse-common-create-edge>\n  </ng-container>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 34,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "generatePropertyName",
                    "args": [
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-unlisted-properties',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ul>\r\n      <ng-container *ngFor=\"let prop of unlistedProperties\">\r\n        <jse-common-create-edge\r\n          [schema]=\"true\"\r\n          [required]=\"true\"\r\n        >\r\n          <strong name>\r\n            {{ generatePropertyName(prop) }}\r\n          </strong>\r\n        </jse-common-create-edge>\r\n      </ng-container>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateUnlistedPropertiesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  get unlistedProperties() : string[] {\r\n    const required: string[] = (this.schema.required || []) as string[];\r\n    const listedProperties = Object.keys(this.schema.properties || {});\r\n    return required.filter((r) => !listedProperties.includes(r));\r\n  }\r\n\r\n  generatePropertyName(prop: string): string {\r\n    return `${prop}`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "unlistedProperties": {
                    "name": "unlistedProperties",
                    "getSignature": {
                        "name": "unlistedProperties",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 36
                    }
                }
            }
        },
        {
            "name": "CreateValidOrInvalidComponent",
            "id": "component-CreateValidOrInvalidComponent-6bac6d9ecaba81a28e8fd6ed42813023c47c2680271e032fe89844b09667afd12b05a2c0f330d779be4aa3045ade85fcb907c28a61bc4bac39fb870e77095019",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/create-valid-or-invalid.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-create-valid-or-invalid",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"schema; else alwaysInvalid\">\n  <jse-always-valid [schema]=\"schema\" />\n</ng-container>\n<ng-template #alwaysInvalid>\n  <jse-always-invalid />\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 30,
                    "type": "JSONSchema",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateAlwaysInvalidComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateAlwaysValidComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n    CreateAlwaysInvalidComponent,\r\n    CreateAlwaysValidComponent\r\n} from \"../JSONSchemaElements/index\";\r\n\r\nimport type { JSONSchema } from '../types';\r\n\r\n@Component({\r\n  selector: 'jse-common-create-valid-or-invalid',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateAlwaysInvalidComponent),\r\n    forwardRef(() => CreateAlwaysValidComponent),\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ng-container *ngIf=\"schema; else alwaysInvalid\">\r\n      <jse-always-valid [schema]=\"schema\" />\r\n    </ng-container>\r\n    <ng-template #alwaysInvalid>\r\n      <jse-always-invalid />\r\n    </ng-template>\r\n  `,\r\n})\r\nexport class CreateValidOrInvalidComponent {\r\n  @Input({ required: true }) schema!: JSONSchema;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "DefaultValueComponent",
            "id": "component-DefaultValueComponent-97c0f85c992980dce29b9acd965286c12b7599a8d01fc9538d95b988a72b2df0dfc77ffe8f9500ea5e9ca63bd7089eb92ee5f9554e234c3990b3911d32970689",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/default-value.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-default-value",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ defaultLabel }}</strong>\n  &nbsp;\n  <lib-print-schema-type [obj]=\"schema.default\" />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 20,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "defaultLabel",
                    "defaultValue": "'Default value :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-default-value',\r\n  standalone: true,\r\n  imports: [PrintSchemaTypeComponent],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <strong>{{ defaultLabel }}</strong>\r\n      &nbsp;\r\n      <lib-print-schema-type [obj]=\"schema.default\" />\r\n    </div>\r\n  `,\r\n})\r\nexport class DefaultValueComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  defaultLabel = 'Default value :';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "DependenciesComponent",
            "id": "component-DependenciesComponent-3fc4492dc5d94a8837e468740fd0a3f6bd52a9fa739279faf0e6e214fbb6fa88907b0d3e51a5f9d693ea8da9ca950473da2a0c3f58009ddf3a98df2dfd44ae73",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependencies.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-conditional-dependencies",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"schema | dependanciesTodependentRequired as dependentRequired\">\n  <ng-container *ngIf=\"!isEmptyObject(dependentRequired)\">\n    <jse-schema-conditional-dependent-required [schema]=\"dependentRequired\" />\n  </ng-container>\n</ng-container>\n<ng-container *ngIf=\"schema | dependanciesTodependentSchemas as dependentSchemas\">\n  <ng-container *ngIf=\"!isEmptyObject(dependentSchemas)\">\n    <jse-schema-conditional-dependent-schemas [schema]=\"dependentSchemas\" />\n  </ng-container>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 39,
                    "type": "Record<string | [] |  | JSONSchema>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isEmptyObject",
                    "args": [
                        {
                            "name": "obj",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "Record<string | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "DependentRequiredComponent",
                    "type": "component"
                },
                {
                    "name": "DependentSchemasComponent",
                    "type": "component"
                },
                {
                    "name": "DependanciesToDependentRequiredPipe",
                    "type": "pipe"
                },
                {
                    "name": "DependanciesToDependentSchemasPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  DependentRequiredComponent,\r\n  DependentSchemasComponent\r\n} from \"./index\";\r\n\r\nimport { DependanciesToDependentRequiredPipe } from '../../pipes/dependancies-to-dependent-required.pipe';\r\nimport { DependanciesToDependentSchemasPipe } from '../../pipes/dependancies-to-dependent-schemas.pipe';\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-conditional-dependencies',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    DependentRequiredComponent,\r\n    DependentSchemasComponent,\r\n    DependanciesToDependentRequiredPipe,\r\n    DependanciesToDependentSchemasPipe\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ng-container *ngIf=\"schema | dependanciesTodependentRequired as dependentRequired\">\r\n      <ng-container *ngIf=\"!isEmptyObject(dependentRequired)\">\r\n        <jse-schema-conditional-dependent-required [schema]=\"dependentRequired\" />\r\n      </ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"schema | dependanciesTodependentSchemas as dependentSchemas\">\r\n      <ng-container *ngIf=\"!isEmptyObject(dependentSchemas)\">\r\n        <jse-schema-conditional-dependent-schemas [schema]=\"dependentSchemas\" />\r\n      </ng-container>\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class DependenciesComponent {\r\n  @Input({ required: true }) schema!: Record<string, string[] | readonly string[] | JSONSchema>;\r\n\r\n  isEmptyObject(obj : Record<string, any>) : boolean {\r\n    return Object.keys(obj).length === 0;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "DependentRequiredComponent",
            "id": "component-DependentRequiredComponent-67134a4bd090cf1b8332d5509ccb2073f525e0950ccb13a2f06a3add94b582e85d359184f75c54c5029cd164f81c108594e3b47bcaf3917f33c9708c3c9c07df",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependent-required.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-conditional-dependent-required",
            "styleUrls": [],
            "styles": [],
            "template": "<jse-schema-composition-all-of [schema]=\"schema | dependentRequired\" />\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 25,
                    "type": "Record<string | [] | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AllOfSchemaComponent",
                    "type": "component"
                },
                {
                    "name": "DependentRequiredPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  AllOfSchemaComponent\r\n} from \"../schemaComposition/index\";\r\n\r\nimport type { JSONSchema, JSONSchemaNS } from \"../../types\";\r\nimport { DependentRequiredPipe } from '../../pipes/dependent-required.pipe';\r\n\r\n@Component({\r\n  selector: 'jse-schema-conditional-dependent-required',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    AllOfSchemaComponent,\r\n    DependentRequiredPipe\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <jse-schema-composition-all-of [schema]=\"schema | dependentRequired\" />\r\n  `,\r\n})\r\nexport class DependentRequiredComponent {\r\n  @Input({ required: true }) schema!: Record<string, string[] | readonly string[]>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "DependentSchemasComponent",
            "id": "component-DependentSchemasComponent-ce5645d6a22fd1ef9e508f33c706553c511664bf792220a3506edd21290467c9fdad08cd93cd788c7edaaa94701880e132dfedf437bccd9af5b18dacc9d329ba",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependent-schemas.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-conditional-dependent-schemas",
            "styleUrls": [],
            "styles": [],
            "template": "<jse-schema-composition-all-of [schema]=\"schema | dependentSchemas\" />\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 26,
                    "type": "Record<string | JSONSchema>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AllOfSchemaComponent",
                    "type": "component"
                },
                {
                    "name": "DependentSchemasPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  AllOfSchemaComponent\r\n} from \"../schemaComposition/index\";\r\n\r\nimport { DependentSchemasPipe } from '../../pipes/dependent-schemas.pipe';\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-conditional-dependent-schemas',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    AllOfSchemaComponent,\r\n    DependentSchemasPipe\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <jse-schema-composition-all-of [schema]=\"schema | dependentSchemas\" />\r\n  `,\r\n})\r\nexport class DependentSchemasComponent {\r\n  @Input({ required: true }) schema!: Record<string, JSONSchema>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "DeprecatedComponent",
            "id": "component-DeprecatedComponent-a9974caab2e36d86fec0941397d8a36c80145f116d322feb30fdb5d9b339e7bdbaaa86766aa90f52d0605ecd7ae51e9b380c3844cd2a18918a053ad701499bf0",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/deprecated.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-deprecated",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span>🚨&nbsp;</span>\n  <ng-container>Deprecated</ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-deprecated',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <span>🚨&nbsp;</span>\r\n      <ng-container>Deprecated</ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class DeprecatedComponent {}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "DeprecatedLabelComponent",
            "id": "component-DeprecatedLabelComponent-17754a62f97217d8cc616a297456fe9a9fe0a50a45ed7bd93e8d8bcd4c7c5e91d5c3fc759b6d27b90c8e177a65fd61aa9bfb02d464f84ca52b28325a0126b808",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/Deprecated/deprecated-label.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-deprecated",
            "styleUrls": [
                "./deprecated-label.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./deprecated-label.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-deprecated',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: './deprecated-label.component.html',\r\n  styleUrls: ['./deprecated-label.component.css']\r\n})\r\nexport class DeprecatedLabelComponent { }",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".deprecated {\r\n    font-size: 90%;\r\n    color: #ffba00;\r\n    margin-right: 4px;\r\n}  ",
                    "styleUrl": "./deprecated-label.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<strong class=\"deprecated\">\r\n    deprecated\r\n</strong>  "
        },
        {
            "name": "ElseLabelComponent",
            "id": "component-ElseLabelComponent-e173e01230bc3469a448ca54c14817ee390424829b0713aa9cb070f1a022b0605908a0d1d14a0ec5746ab92835d736b7078d2fe9d550911c78ffc28626d1ce95",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/else-label.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-else",
            "styleUrls": [],
            "styles": [],
            "template": "<strong>\n    Else\n</strong>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-else',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <strong>\r\n        Else\r\n    </strong>\r\n  `,\r\n})\r\nexport class ElseLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "EnumComponent",
            "id": "component-EnumComponent-3209dd93b9806d9369d9cf062b900b92a5483eff21a1aa004bc6a43b3212e3844f24ce74a47e7d516f353ba17288b5b1a0ebe0d59e5b4da7d849df54c02a2074",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/enum.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-enum",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ enumLabel }}</strong>\n  &nbsp;\n  <lib-print-schema-type [obj]=\"enumValue\" />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 20,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "enumLabel",
                    "defaultValue": "'Possible values :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-enum',\r\n  standalone: true,\r\n  imports: [PrintSchemaTypeComponent],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <strong>{{ enumLabel }}</strong>\r\n      &nbsp;\r\n      <lib-print-schema-type [obj]=\"enumValue\" />\r\n    </div>\r\n  `,\r\n})\r\nexport class EnumComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  enumLabel = 'Possible values :';\r\n\r\n  get enumValue(): unknown {\r\n    return this.schema.enum;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "enumValue": {
                    "name": "enumValue",
                    "getSignature": {
                        "name": "enumValue",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                }
            }
        },
        {
            "name": "ErrorOccurredLabelComponent",
            "id": "component-ErrorOccurredLabelComponent-8763bdc6d429157c9c2e098a6bf64de9098c833cd59d4fc0c016e4dd2978f9fad2d322b35e788e825d5eea130d5fa58eb18a8672f845b44c56600025b62dfce2",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/error-occurred.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-error-occurred",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"error\">\n  <strong>Something bad happens : </strong> {{ error.message }}\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 16,
                    "type": "Error",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-error-occurred',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ng-container *ngIf=\"error\">\r\n      <strong>Something bad happens : </strong> {{ error.message }}\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class ErrorOccurredLabelComponent {\r\n  @Input({ required: true }) error!: Error;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ExamplesComponent",
            "id": "component-ExamplesComponent-1b23f3d7e312d6a4dd9c6f1662cf904e3f4d5fcdd1417f15f0a18c1c368cf98b779efd0ffc305d5039dbb242170e46b835f4b77cf66992cfd10fa607d5bcb27b",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/examples.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-examples",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ examplesLabel }}</strong>\n  <mat-tab-group>\n    <ng-container *ngFor=\"let item of items\">\n      <mat-tab>\n        <ng-template mat-tab-label>\n          {{ item.label }}\n        </ng-template>\n        <lib-print-schema-type [obj]=\"item.value\" />\n      </mat-tab>\n    </ng-container>\n  </mat-tab-group>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 36,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "examplesLabel",
                    "defaultValue": "'Example values :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\ntype itemsType = { id: number; value: unknown; label: string }[]\r\n\r\n@Component({\r\n  selector: 'qm-examples',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatTabsModule, \r\n    PrintSchemaTypeComponent\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <strong>{{ examplesLabel }}</strong>\r\n      <mat-tab-group>\r\n        <ng-container *ngFor=\"let item of items\">\r\n          <mat-tab>\r\n            <ng-template mat-tab-label>\r\n              {{ item.label }}\r\n            </ng-template>\r\n            <lib-print-schema-type [obj]=\"item.value\" />\r\n          </mat-tab>\r\n        </ng-container>\r\n      </mat-tab-group>\r\n    </div>\r\n  `,\r\n})\r\nexport class ExamplesComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  examplesLabel = 'Example values :';\r\n\r\n  get items(): itemsType {\r\n    return (this.schema.examples || [])\r\n      .map((val, idx) => ({\r\n        id: idx,\r\n        value: val,\r\n        label: `Example ${idx}`,\r\n    }));\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "items": {
                    "name": "items",
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "itemsType",
                        "line": 40
                    }
                }
            }
        },
        {
            "name": "FalseLabelComponent",
            "id": "component-FalseLabelComponent-a50af528f5dab346036078442bb3ab9852092e41426b096b61cbae3956ff5417e5946156dc6a1c476ed5b4d382f822f13184af6cfe8738c3dafc7c2a46b8770f",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/false-label.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-false",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n    none\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-false',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n        none\r\n    </span>\r\n  `,\r\n})\r\nexport class FalseLabelComponent {}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "GenerateFriendlyNameComponent",
            "id": "component-GenerateFriendlyNameComponent-ccd1206999fa49efa58d517f67d399fac8c813a4ca9b69c510c478bdb168609b59988542fc1a489c7d8fb8708bd3074b204e0159855bd8d75652492513308383",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jsv-friendly-name",
            "styleUrls": [],
            "styles": [],
            "template": "<!-- Final rendered friendly name -->\n<ng-container [ngSwitch]=\"selectTemplate\">\n\n  <ng-container *ngSwitchCase=\"'booleanSchema'\">\n    <ng-container *ngTemplateOutlet=\"booleanSchema\"></ng-container>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"'schemaTitle'\">\n    <ng-container *ngTemplateOutlet=\"schemaTitle\"></ng-container>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"'schemaTypes'\">\n    <ng-container *ngTemplateOutlet=\"schemaTypes\"></ng-container>\n  </ng-container>\n\n  <ng-container *ngSwitchDefault>\n    <ng-container *ngTemplateOutlet=\"schemaFallback\"></ng-container>\n  </ng-container>\n\n</ng-container>\n\n<!-- Templates -->\n\n<!--  In case the schema is always valid or not -->\n<ng-template #booleanSchema>\n  <jsv-type-label-switch [type]=\"typedBoolean\" />\n</ng-template>\n\n<!-- Some people maintaining schemas provide a friendly name by themself -->\n<ng-template #schemaTitle>\n  {{ typedSchema.title! }}\n</ng-template>\n\n<!-- Default strategy, when types are known -->\n<ng-template #schemaTypes>\n  <ng-container *ngFor=\"let type of foundTypes; let isLast = last\">\n    <jsv-friendly-name-custom [schema]=\"typedSchema\" [type]=\"type\"/>\n    <ng-container *ngIf=\"!isLast\">\n      <labels-or />\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<!-- Fallback, when none of the previous rules matched -->\n<ng-template #schemaFallback>\n  <jsv-friendly-name-fallback [schema]=\"typedSchema\" />\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 87,
                    "type": "JSONSchema",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "OrLabelComponent",
                    "type": "component"
                },
                {
                    "name": "TypeLabelSwitchComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameFallbackComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameCustomComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    OrLabelComponent,\r\n} from \"../../labels/index\"\r\n\r\nimport {\r\n    detectedTypes\r\n} from \"../detectTypes\";\r\n\r\nimport {\r\n  TypeLabelSwitchComponent\r\n} from \"../type-label-switch\";\r\n\r\nimport {\r\n    GenerateFriendlyNameFallbackComponent,\r\n    GenerateFriendlyNameCustomComponent\r\n} from \"./index\";\r\n\r\nimport type { JSONSchema, TypeValues } from \"../../types\";\r\n\r\ntype renderTemplates = \"booleanSchema\" | \"schemaTitle\" | \"schemaTypes\" | \"schemaFallback\";\r\n\r\n@Component({\r\n  selector: 'jsv-friendly-name',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    OrLabelComponent,\r\n    TypeLabelSwitchComponent,\r\n    forwardRef( () => GenerateFriendlyNameFallbackComponent),\r\n    forwardRef( () => GenerateFriendlyNameCustomComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <!-- Final rendered friendly name -->\r\n    <ng-container [ngSwitch]=\"selectTemplate\">\r\n\r\n      <ng-container *ngSwitchCase=\"'booleanSchema'\">\r\n        <ng-container *ngTemplateOutlet=\"booleanSchema\"></ng-container>\r\n      </ng-container>\r\n\r\n      <ng-container *ngSwitchCase=\"'schemaTitle'\">\r\n        <ng-container *ngTemplateOutlet=\"schemaTitle\"></ng-container>\r\n      </ng-container>\r\n\r\n      <ng-container *ngSwitchCase=\"'schemaTypes'\">\r\n        <ng-container *ngTemplateOutlet=\"schemaTypes\"></ng-container>\r\n      </ng-container>\r\n\r\n      <ng-container *ngSwitchDefault>\r\n        <ng-container *ngTemplateOutlet=\"schemaFallback\"></ng-container>\r\n      </ng-container>\r\n\r\n    </ng-container>\r\n\r\n    <!-- Templates -->\r\n\r\n    <!--  In case the schema is always valid or not -->\r\n    <ng-template #booleanSchema>\r\n      <jsv-type-label-switch [type]=\"typedBoolean\" />\r\n    </ng-template>\r\n\r\n    <!-- Some people maintaining schemas provide a friendly name by themself -->\r\n    <ng-template #schemaTitle>\r\n      {{ typedSchema.title! }}\r\n    </ng-template>\r\n\r\n    <!-- Default strategy, when types are known -->\r\n    <ng-template #schemaTypes>\r\n      <ng-container *ngFor=\"let type of foundTypes; let isLast = last\">\r\n        <jsv-friendly-name-custom [schema]=\"typedSchema\" [type]=\"type\"/>\r\n        <ng-container *ngIf=\"!isLast\">\r\n          <labels-or />\r\n        </ng-container>\r\n      </ng-container>\r\n    </ng-template>\r\n\r\n    <!-- Fallback, when none of the previous rules matched -->\r\n    <ng-template #schemaFallback>\r\n      <jsv-friendly-name-fallback [schema]=\"typedSchema\" />\r\n    </ng-template>\r\n  `,\r\n})\r\nexport class GenerateFriendlyNameComponent {\r\n  @Input({ required: true }) schema!: JSONSchema;\r\n\r\n  get foundTypes(): TypeValues[] {\r\n    return (typeof this.schema !== \"boolean\") ? detectedTypes(this.schema) : [];\r\n  }\r\n\r\n  get isBoolean(): boolean {\r\n    return typeof this.schema === 'boolean';\r\n  }\r\n\r\n  get typedBoolean(): boolean {\r\n    return this.schema as boolean;\r\n  }\r\n\r\n  get typedSchema(): Exclude<JSONSchema, true | false> {\r\n    return this.schema as Exclude<JSONSchema, true | false>;\r\n  }\r\n\r\n  // To know which template to render\r\n  get selectTemplate(): renderTemplates {\r\n    if (this.isBoolean) {\r\n      return \"booleanSchema\";\r\n    } else {\r\n      let castSchema = this.typedSchema;\r\n      \r\n      if (castSchema.title !== undefined) {\r\n        return \"schemaTitle\";\r\n      }\r\n\r\n      if (this.foundTypes.length !== 0) {\r\n        return \"schemaTypes\";\r\n      }\r\n\r\n      return \"schemaFallback\";\r\n    }\r\n  }\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "foundTypes": {
                    "name": "foundTypes",
                    "getSignature": {
                        "name": "foundTypes",
                        "type": "[]",
                        "returnType": "TypeValues[]",
                        "line": 89
                    }
                },
                "isBoolean": {
                    "name": "isBoolean",
                    "getSignature": {
                        "name": "isBoolean",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 93
                    }
                },
                "typedBoolean": {
                    "name": "typedBoolean",
                    "getSignature": {
                        "name": "typedBoolean",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 97
                    }
                },
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "Exclude<JSONSchema,  | >",
                        "line": 101
                    }
                },
                "selectTemplate": {
                    "name": "selectTemplate",
                    "getSignature": {
                        "name": "selectTemplate",
                        "type": "",
                        "returnType": "renderTemplates",
                        "line": 106
                    }
                }
            }
        },
        {
            "name": "GenerateFriendlyNameCustomArrayComponent",
            "id": "component-GenerateFriendlyNameCustomArrayComponent-2c7cd3d84c57efa572a60c06fdbf10403b60c122df1f59bb4e03d7b15acbd59938533db02d033fb7d54ddb593a32750f0147d40990069103c3492aefaedbe04d",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/customized-array.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jsv-friendly-name-custom-array",
            "styleUrls": [],
            "styles": [],
            "template": "<!-- KISS return the generic type when specs are messy -->\n<ng-container *ngIf=\"noClearSpecs; else clearSpecs\">\n    <jsv-type-label-switch [type]=\"'array'\" />\n</ng-container>\n\n<ng-template #clearSpecs>\n\n    <!-- 1) \"prefixItems\" -->\n    <ng-container *ngIf=\"isPrefixItemsArray\">\n        <ng-container *ngFor=\"let subSchema of typedPrefixItemsArray; let isLast = last\">\n            <jsv-friendly-name [schema]=\"subSchema\" />\n            {{ !isLast ? ',' : '' }}\n        </ng-container>\n    </ng-container>\n\n    <!-- Separator -->\n    <ng-container *ngIf=\"firstSeparator\">\n        {{ ',' }}\n    </ng-container>\n\n    <!-- 2A) \"items\" -->\n    <ng-container *ngIf=\"hasItems\">\n        <ng-container *ngFor=\"let subSchema of itemsAsArray; let isLast = last\">\n            <jsv-friendly-name [schema]=\"subSchema\" />\n            {{ !isLast ? ',' : '' }}\n        </ng-container>\n    </ng-container>\n\n    <!-- Separator -->\n    <ng-container *ngIf=\"secondSeparator\">\n        {{ ',' }}\n    </ng-container>\n\n    <!-- 2B) \"additionalItems\" (to cover cases for specs below the draft-2020-12 version) -->\n    <ng-container *ngIf=\"hasAdditionalItems\">\n        <jsv-friendly-name [schema]=\"schema.additionalItems!\" />\n    </ng-container>\n\n    <!-- Separator -->\n    <ng-container *ngIf=\"thirdSeparator\">\n        {{ ',' }}\n    </ng-container>\n\n    <!-- 2C) \"unevaluatedItems\" (to cover cases specs >= draft-2020-12 version) -->\n    <ng-container *ngIf=\"hasUnevaluatedItems\">\n        <jsv-friendly-name [schema]=\"schema.unevaluatedItems!\" />\n    </ng-container>\n\n    <!-- Separator -->\n    <ng-container *ngIf=\"fourSeparator\">\n        {{ ',' }}\n    </ng-container>\n\n    <!-- 3) \"contains\" -->\n    <ng-container *ngIf=\"hasContains\">\n        {{ '...' }}\n        {{ ',' }}\n        <jsv-friendly-name [schema]=\"schema.contains!\" />\n    </ng-container>\n\n    <!-- Separator -->\n    <ng-container *ngIf=\"fithSeparator\">\n        {{ ',' }}\n    </ng-container>\n\n    <!-- 4) Is it a open tuple ? -->\n    <ng-container *ngIf=\"isOpenTuple\">\n        {{ '...' }}\n    </ng-container>\n\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 95,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TypeLabelSwitchComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    TypeLabelSwitchComponent,\r\n    GenerateFriendlyNameComponent\r\n} from \"../index\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n    selector: 'jsv-friendly-name-custom-array',\r\n    standalone: true,\r\n    imports: [\r\n      CommonModule,\r\n      TypeLabelSwitchComponent,\r\n      forwardRef(() => GenerateFriendlyNameComponent)\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    template: `\r\n        <!-- KISS return the generic type when specs are messy -->\r\n        <ng-container *ngIf=\"noClearSpecs; else clearSpecs\">\r\n            <jsv-type-label-switch [type]=\"'array'\" />\r\n        </ng-container>\r\n\r\n        <ng-template #clearSpecs>\r\n\r\n            <!-- 1) \"prefixItems\" -->\r\n            <ng-container *ngIf=\"isPrefixItemsArray\">\r\n                <ng-container *ngFor=\"let subSchema of typedPrefixItemsArray; let isLast = last\">\r\n                    <jsv-friendly-name [schema]=\"subSchema\" />\r\n                    {{ !isLast ? ',' : '' }}\r\n                </ng-container>\r\n            </ng-container>\r\n\r\n            <!-- Separator -->\r\n            <ng-container *ngIf=\"firstSeparator\">\r\n                {{ ',' }}\r\n            </ng-container>\r\n\r\n            <!-- 2A) \"items\" -->\r\n            <ng-container *ngIf=\"hasItems\">\r\n                <ng-container *ngFor=\"let subSchema of itemsAsArray; let isLast = last\">\r\n                    <jsv-friendly-name [schema]=\"subSchema\" />\r\n                    {{ !isLast ? ',' : '' }}\r\n                </ng-container>\r\n            </ng-container>\r\n\r\n            <!-- Separator -->\r\n            <ng-container *ngIf=\"secondSeparator\">\r\n                {{ ',' }}\r\n            </ng-container>\r\n\r\n            <!-- 2B) \"additionalItems\" (to cover cases for specs below the draft-2020-12 version) -->\r\n            <ng-container *ngIf=\"hasAdditionalItems\">\r\n                <jsv-friendly-name [schema]=\"schema.additionalItems!\" />\r\n            </ng-container>\r\n\r\n            <!-- Separator -->\r\n            <ng-container *ngIf=\"thirdSeparator\">\r\n                {{ ',' }}\r\n            </ng-container>\r\n\r\n            <!-- 2C) \"unevaluatedItems\" (to cover cases specs >= draft-2020-12 version) -->\r\n            <ng-container *ngIf=\"hasUnevaluatedItems\">\r\n                <jsv-friendly-name [schema]=\"schema.unevaluatedItems!\" />\r\n            </ng-container>\r\n\r\n            <!-- Separator -->\r\n            <ng-container *ngIf=\"fourSeparator\">\r\n                {{ ',' }}\r\n            </ng-container>\r\n\r\n            <!-- 3) \"contains\" -->\r\n            <ng-container *ngIf=\"hasContains\">\r\n                {{ '...' }}\r\n                {{ ',' }}\r\n                <jsv-friendly-name [schema]=\"schema.contains!\" />\r\n            </ng-container>\r\n\r\n            <!-- Separator -->\r\n            <ng-container *ngIf=\"fithSeparator\">\r\n                {{ ',' }}\r\n            </ng-container>\r\n\r\n            <!-- 4) Is it a open tuple ? -->\r\n            <ng-container *ngIf=\"isOpenTuple\">\r\n                {{ '...' }}\r\n            </ng-container>\r\n\r\n        </ng-template>\r\n    `\r\n})\r\nexport class GenerateFriendlyNameCustomArrayComponent {\r\n    @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n    // For separators\r\n    get firstSeparator() : boolean {\r\n        return this.isPrefixItemsArray && this.hasItems;\r\n    }\r\n\r\n    get secondSeparator() : boolean {\r\n        return this.hasItems && this.hasAdditionalItems;\r\n    }\r\n\r\n    get thirdSeparator() : boolean {\r\n        return this.hasAdditionalItems && this.hasUnevaluatedItems;\r\n    }\r\n\r\n    get fourSeparator() : boolean {\r\n        return this.hasUnevaluatedItems && this.hasContains;\r\n    }\r\n\r\n    get fithSeparator() : boolean {\r\n        return this.hasContains && this.isOpenTuple;\r\n    }\r\n\r\n    // No clear specifications about the contents of the array ?\r\n    get noClearSpecs(): boolean {\r\n        return [undefined, false].includes(this.schema.items as any) &&\r\n            [undefined, false].includes(this.schema.prefixItems as any) &&\r\n            this.schema.contains === undefined;\r\n    }\r\n\r\n    get isPrefixItemsArray(): boolean {\r\n        return Array.isArray(this.schema.prefixItems);\r\n    }\r\n\r\n    get typedPrefixItemsArray() {\r\n        return this.schema.prefixItems as JSONSchema[];\r\n    }\r\n\r\n    get hasItems() : boolean {\r\n        return this.schema.items !== undefined && typeof this.schema.items !== \"boolean\";\r\n    }\r\n\r\n    get itemsAsArray() : JSONSchema[] {\r\n        return (Array.isArray(this.schema.items) ? this.schema.items : [this.schema.items]) as JSONSchema[];\r\n    }\r\n\r\n    get hasAdditionalItems(): boolean {\r\n        return this.schema.additionalItems !== undefined && typeof this.schema.additionalItems !== \"boolean\";\r\n    }\r\n\r\n    get hasUnevaluatedItems(): boolean {\r\n        return this.schema.unevaluatedItems !== undefined && typeof this.schema.unevaluatedItems !== \"boolean\";\r\n    }\r\n\r\n    get hasContains(): boolean {\r\n        return this.schema.contains !== undefined;\r\n    }\r\n\r\n    get isOpenTuple(): boolean {\r\n        return !(\r\n            (this.schema as JSONSchemaNS.Array).unevaluatedItems === false ||\r\n            this.schema.items === false ||\r\n            this.schema.additionalItems === false\r\n        );\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "firstSeparator": {
                    "name": "firstSeparator",
                    "getSignature": {
                        "name": "firstSeparator",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 98
                    }
                },
                "secondSeparator": {
                    "name": "secondSeparator",
                    "getSignature": {
                        "name": "secondSeparator",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 102
                    }
                },
                "thirdSeparator": {
                    "name": "thirdSeparator",
                    "getSignature": {
                        "name": "thirdSeparator",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 106
                    }
                },
                "fourSeparator": {
                    "name": "fourSeparator",
                    "getSignature": {
                        "name": "fourSeparator",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 110
                    }
                },
                "fithSeparator": {
                    "name": "fithSeparator",
                    "getSignature": {
                        "name": "fithSeparator",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 114
                    }
                },
                "noClearSpecs": {
                    "name": "noClearSpecs",
                    "getSignature": {
                        "name": "noClearSpecs",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 119
                    }
                },
                "isPrefixItemsArray": {
                    "name": "isPrefixItemsArray",
                    "getSignature": {
                        "name": "isPrefixItemsArray",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 125
                    }
                },
                "typedPrefixItemsArray": {
                    "name": "typedPrefixItemsArray",
                    "getSignature": {
                        "name": "typedPrefixItemsArray",
                        "type": "",
                        "returnType": "",
                        "line": 129
                    }
                },
                "hasItems": {
                    "name": "hasItems",
                    "getSignature": {
                        "name": "hasItems",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 133
                    }
                },
                "itemsAsArray": {
                    "name": "itemsAsArray",
                    "getSignature": {
                        "name": "itemsAsArray",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 137
                    }
                },
                "hasAdditionalItems": {
                    "name": "hasAdditionalItems",
                    "getSignature": {
                        "name": "hasAdditionalItems",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 141
                    }
                },
                "hasUnevaluatedItems": {
                    "name": "hasUnevaluatedItems",
                    "getSignature": {
                        "name": "hasUnevaluatedItems",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 145
                    }
                },
                "hasContains": {
                    "name": "hasContains",
                    "getSignature": {
                        "name": "hasContains",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 149
                    }
                },
                "isOpenTuple": {
                    "name": "isOpenTuple",
                    "getSignature": {
                        "name": "isOpenTuple",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 153
                    }
                }
            }
        },
        {
            "name": "GenerateFriendlyNameCustomComponent",
            "id": "component-GenerateFriendlyNameCustomComponent-21571d91c78c566efb4c060f059f67c33d1e60521a9be8b8e99a6d813fc54cac3afe61ee2aace0cf3dd9258f1ab9b6147e2c6a5a6d308616082ee10e0f5d05da",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/customized-name.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jsv-friendly-name-custom",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container [ngSwitch]=\"type\">\n\n    <ng-container *ngSwitchCase=\"'string'\">\n        <jsv-type-label-switch [type]=\"stringOrFormat\" />\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"'array'\">\n        <jsv-friendly-name-custom-array [schema]=\"asTypedArray\" />\n    </ng-container>\n\n    <ng-container *ngSwitchDefault>\n        <jsv-type-label-switch [type]=\"type\" />\n    </ng-container>\n\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 42,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "TypeValues | string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TypeLabelSwitchComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameCustomArrayComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    TypeLabelSwitchComponent,\r\n} from \"../index\"\r\n\r\nimport {\r\n    GenerateFriendlyNameCustomArrayComponent\r\n} from \"./index\";\r\n\r\nimport type { JSONSchema, JSONSchemaNS, TypeValues } from \"../../types\";\r\n\r\n@Component({\r\n    selector: 'jsv-friendly-name-custom',\r\n    standalone: true,\r\n    imports: [\r\n      CommonModule,\r\n      TypeLabelSwitchComponent,\r\n      forwardRef(() => GenerateFriendlyNameCustomArrayComponent)\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    template: `\r\n        <ng-container [ngSwitch]=\"type\">\r\n            \r\n            <ng-container *ngSwitchCase=\"'string'\">\r\n                <jsv-type-label-switch [type]=\"stringOrFormat\" />\r\n            </ng-container>\r\n            \r\n            <ng-container *ngSwitchCase=\"'array'\">\r\n                <jsv-friendly-name-custom-array [schema]=\"asTypedArray\" />\r\n            </ng-container>\r\n            \r\n            <ng-container *ngSwitchDefault>\r\n                <jsv-type-label-switch [type]=\"type\" />\r\n            </ng-container>\r\n\r\n        </ng-container>\r\n    `\r\n})\r\nexport class GenerateFriendlyNameCustomComponent {\r\n    @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n    @Input() type!: TypeValues | string;\r\n\r\n    get asTypedArray() {\r\n        return this.schema as JSONSchemaNS.Array;\r\n    }\r\n\r\n    get stringOrFormat() {\r\n        return this.schema.format ? this.schema.format : \"string\";\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "asTypedArray": {
                    "name": "asTypedArray",
                    "getSignature": {
                        "name": "asTypedArray",
                        "type": "",
                        "returnType": "",
                        "line": 45
                    }
                },
                "stringOrFormat": {
                    "name": "stringOrFormat",
                    "getSignature": {
                        "name": "stringOrFormat",
                        "type": "",
                        "returnType": "",
                        "line": 49
                    }
                }
            }
        },
        {
            "name": "GenerateFriendlyNameFallbackComponent",
            "id": "component-GenerateFriendlyNameFallbackComponent-a5079c3882d3965fba68c2981cde8f4cb88846bd19af3264a3277880018b74c7b56ee79e81d2a06d5adc82e4f29a93bbe026e5d9378d7aae3d84aef70b0fbad6",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name-fallback.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jsv-friendly-name-fallback",
            "styleUrls": [],
            "styles": [],
            "template": "<!--  1. we have a Schema Composition case (not, allOf, ...) -->\n\n<!--  1A) the \"not\" case -->\n<ng-container *ngIf=\"hasNotKeyword\">\n    <labels-not />\n    {{ ' (' }}\n    <jsv-friendly-name [schema]=\"schema.not!\" />\n    {{ ' ) ' }}\n</ng-container>\n\n<!--  1B) the \"allOf\" / \"oneOf\" / \"anyOf\" -->\n<ng-container *ngIf=\"hasOfKeyword; else defaultStrategy\">\n    <ng-container *ngFor=\"let elem of elementsOf; let isLast = last\">\n        <jsv-friendly-name [schema]=\"elem\" />\n        <ng-container *ngIf=\"!isLast\">\n            <ng-container [ngSwitch]=\"linkword\">\n                <labels-or *ngSwitchCase=\"'OR'\" />\n                <labels-xor *ngSwitchCase=\"'XOR'\" />\n                <labels-and *ngSwitchCase=\"'AND'\" />\n            </ng-container>\n        </ng-container>\n    </ng-container>\n</ng-container>\n\n<!--  2. Assume it is \"any\" by default -->\n<ng-template #defaultStrategy>\n    <jsv-type-label-switch [type]=\"true\" />\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 68,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NotLabelComponent",
                    "type": "component"
                },
                {
                    "name": "AndLabelComponent",
                    "type": "component"
                },
                {
                    "name": "XorLabelComponent",
                    "type": "component"
                },
                {
                    "name": "OrLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameComponent)",
                    "type": "component"
                },
                {
                    "name": "TypeLabelSwitchComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    AndLabelComponent,\r\n    NotLabelComponent,\r\n    OrLabelComponent,\r\n    XorLabelComponent\r\n} from \"../../labels/index\";\r\n\r\nimport {\r\n    GenerateFriendlyNameComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelSwitchComponent\r\n} from \"../index\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\ntype LinkType = \"AND\" | \"OR\" | \"XOR\";\r\n\r\n@Component({\r\n    selector: 'jsv-friendly-name-fallback',\r\n    standalone: true,\r\n    imports: [\r\n      CommonModule,\r\n      NotLabelComponent,\r\n      AndLabelComponent,\r\n      XorLabelComponent,\r\n      OrLabelComponent,\r\n      forwardRef(() => GenerateFriendlyNameComponent),\r\n      TypeLabelSwitchComponent\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    template: `\r\n        <!--  1. we have a Schema Composition case (not, allOf, ...) -->\r\n\r\n        <!--  1A) the \"not\" case -->\r\n        <ng-container *ngIf=\"hasNotKeyword\">\r\n            <labels-not />\r\n            {{ ' (' }}\r\n            <jsv-friendly-name [schema]=\"schema.not!\" />\r\n            {{ ' ) ' }}\r\n        </ng-container>\r\n\r\n        <!--  1B) the \"allOf\" / \"oneOf\" / \"anyOf\" -->\r\n        <ng-container *ngIf=\"hasOfKeyword; else defaultStrategy\">\r\n            <ng-container *ngFor=\"let elem of elementsOf; let isLast = last\">\r\n                <jsv-friendly-name [schema]=\"elem\" />\r\n                <ng-container *ngIf=\"!isLast\">\r\n                    <ng-container [ngSwitch]=\"linkword\">\r\n                        <labels-or *ngSwitchCase=\"'OR'\" />\r\n                        <labels-xor *ngSwitchCase=\"'XOR'\" />\r\n                        <labels-and *ngSwitchCase=\"'AND'\" />\r\n                    </ng-container>\r\n                </ng-container>\r\n            </ng-container>\r\n        </ng-container>\r\n\r\n        <!--  2. Assume it is \"any\" by default -->\r\n        <ng-template #defaultStrategy>\r\n            <jsv-type-label-switch [type]=\"true\" />\r\n        </ng-template>\r\n    `\r\n})\r\nexport class GenerateFriendlyNameFallbackComponent {\r\n    @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>\r\n\r\n    // has a \"...Of\" keyword ?\r\n    get hasOfKeyword(): boolean {\r\n        return this.schema.allOf !== undefined || this.schema.anyOf !== undefined || this.schema.oneOf !== undefined;\r\n    }\r\n\r\n    // has a \"not\" keyword ?\r\n    get hasNotKeyword(): boolean {\r\n        return this.schema.not !== undefined;\r\n    }\r\n\r\n    // Kind of operators to use ?\r\n    get linkword(): LinkType {\r\n        return this.schema.anyOf ? \"OR\" : this.schema.oneOf ? \"XOR\" : \"AND\";\r\n    }\r\n\r\n    // allOf / anyOf / oneOf\r\n    get elementsOf() : JSONSchema[] {\r\n        return (this.schema.allOf || this.schema.anyOf || this.schema.oneOf || []) as JSONSchema[];\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "hasOfKeyword": {
                    "name": "hasOfKeyword",
                    "getSignature": {
                        "name": "hasOfKeyword",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 71
                    }
                },
                "hasNotKeyword": {
                    "name": "hasNotKeyword",
                    "getSignature": {
                        "name": "hasNotKeyword",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 76
                    }
                },
                "linkword": {
                    "name": "linkword",
                    "getSignature": {
                        "name": "linkword",
                        "type": "",
                        "returnType": "LinkType",
                        "line": 81
                    }
                },
                "elementsOf": {
                    "name": "elementsOf",
                    "getSignature": {
                        "name": "elementsOf",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 86
                    }
                }
            }
        },
        {
            "name": "IfElseThenComponent",
            "id": "component-IfElseThenComponent-f87246a5495bb791849629d11fe7c7fc417b5d9164f1efec8a5ef0a8d618526901218db92d79f59f411f129a8066490f62c538288412b299cfe471726c0bf109",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/if-else-then.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-conditional-if-else-then",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-tab-group>\n\n  <!-- If case -->\n  <ng-container *ngIf=\"schema.if\">\n    <mat-tab>\n      <ng-template mat-tab-label>\n        <labels-if />\n      </ng-template>\n      <ng-template matTabContent>\n        <jse-common-create-nodes [schema]=\"schema.if\" />\n      </ng-template>\n    </mat-tab>\n  </ng-container>\n\n  <!-- Then case -->\n  <ng-container *ngIf=\"schema.then\">\n    <mat-tab>\n      <ng-template mat-tab-label>\n        <labels-then />\n      </ng-template>\n      <ng-template matTabContent>\n        <jse-common-create-nodes [schema]=\"schema.then\" />\n      </ng-template>\n    </mat-tab>\n  </ng-container>\n\n  <!-- Else case -->\n  <ng-container *ngIf=\"schema.else\">\n    <mat-tab>\n      <ng-template mat-tab-label>\n        <labels-else />\n      </ng-template>\n      <ng-template matTabContent>\n        <jse-common-create-nodes [schema]=\"schema.else\" />\n      </ng-template>\n    </mat-tab>\n  </ng-container>\n\n</mat-tab-group>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 66,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "IfLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ThenLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ElseLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateNodesComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\n\r\nimport { CreateNodesComponent } from \"../../common/create-nodes\";\r\n\r\nimport { IfLabelComponent, ThenLabelComponent, ElseLabelComponent } from \"../../labels/index\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-conditional-if-else-then',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    MatTabsModule,\r\n    IfLabelComponent,\r\n    ThenLabelComponent,\r\n    ElseLabelComponent,\r\n    forwardRef(() => CreateNodesComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <mat-tab-group>\r\n\r\n      <!-- If case -->\r\n      <ng-container *ngIf=\"schema.if\">\r\n        <mat-tab>\r\n          <ng-template mat-tab-label>\r\n            <labels-if />\r\n          </ng-template>\r\n          <ng-template matTabContent>\r\n            <jse-common-create-nodes [schema]=\"schema.if\" />\r\n          </ng-template>\r\n        </mat-tab>\r\n      </ng-container>\r\n\r\n      <!-- Then case -->\r\n      <ng-container *ngIf=\"schema.then\">\r\n        <mat-tab>\r\n          <ng-template mat-tab-label>\r\n            <labels-then />\r\n          </ng-template>\r\n          <ng-template matTabContent>\r\n            <jse-common-create-nodes [schema]=\"schema.then\" />\r\n          </ng-template>\r\n        </mat-tab>\r\n      </ng-container>\r\n\r\n      <!-- Else case -->\r\n      <ng-container *ngIf=\"schema.else\">\r\n        <mat-tab>\r\n          <ng-template mat-tab-label>\r\n            <labels-else />\r\n          </ng-template>\r\n          <ng-template matTabContent>\r\n            <jse-common-create-nodes [schema]=\"schema.else\" />\r\n          </ng-template>\r\n        </mat-tab>\r\n      </ng-container>\r\n\r\n    </mat-tab-group>\r\n  `,\r\n})\r\nexport class IfElseThenComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "IfLabelComponent",
            "id": "component-IfLabelComponent-4ab6e19570e8fdd850d0110f1120c7d8c9238010feeeb23fa7c93ada5413b5936b28bb14d1a17e8562a9dfbeb43aef03af402b1e86b690db028d76e7f1b21f2d",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/if-label.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-if",
            "styleUrls": [],
            "styles": [],
            "template": "<strong>\n    If\n</strong>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-if',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <strong>\r\n        If\r\n    </strong>\r\n  `,\r\n})\r\nexport class IfLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "IntegerLabelComponent",
            "id": "component-IntegerLabelComponent-18bead4babd89857d6869236bd36d391501b655af0c9a0c3d267e32aefaf9327b3fda0c6486a58209025721039b7eef8c00296504d13bf29273023095105572b",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/integer-label.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-integer",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  integer\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-integer',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      integer\r\n    </span>\r\n  `,\r\n})\r\nexport class IntegerLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "LoadingLabelComponent",
            "id": "component-LoadingLabelComponent-6fcd52b313e1a176ec418837491d6a05e580003f048858be0ac10d185fda3d886a81f6b9bf51175d5881f42a2da57e7dc806af26494ec729347f9854dc7e70bf",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/loading-label.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-loading",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    Loading ....\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-loading',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n        Loading ....\r\n    </div>\r\n  `,\r\n})\r\nexport class LoadingLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "MultipleOfComponent",
            "id": "component-MultipleOfComponent-03c24215283255f9f79189b68306325e883c9f0c9aee7ec71a48a8836e9168a89428b79f698beb39ed2d2853bb94353a8bf0bb17ddaa0b7febec574dc951d8ab",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/number-multiple-of.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-multiple-of",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ possibleValuesLabel }}</strong>&nbsp;\n  <code>\n    <ng-container>\n      multiple of {{ schema.multipleOf }}\n    </ng-container>\n  </code>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 22,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "possibleValuesLabel",
                    "defaultValue": "'Possible values :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-multiple-of',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <strong>{{ possibleValuesLabel }}</strong>&nbsp;\r\n      <code>\r\n        <ng-container>\r\n          multiple of {{ schema.multipleOf }}\r\n        </ng-container>\r\n      </code>\r\n    </div>\r\n  `,\r\n})\r\nexport class MultipleOfComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  possibleValuesLabel = 'Possible values :';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NgxJsonSchemaViewerComponent",
            "id": "component-NgxJsonSchemaViewerComponent-630aec1036eba6eb12b90e82568dc7001b83032f2ee4b6b0954f50a2422843eb0327535101e6e7114be31db026172d096f6fff1f7bd5668598a2584adfba4c02",
            "file": "projects/ngx-json-schema-viewer/src/lib/ngx-json-schema-viewer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "JSVOptionsService",
                    "type": "injectable"
                }
            ],
            "selector": "ngx-json-schema-viewer",
            "styleUrls": [],
            "styles": [],
            "template": "<!-- Error ... -->\n<ng-container *ngIf=\"status() === 'ERROR'\">\n  <div>\n    <labels-error-occurred [error]=\"error()!\"/>\n  </div>\n</ng-container>\n\n<!-- Loading ... -->\n<ng-container *ngIf=\"status() === 'LOADING'\">\n    <labels-loading />\n</ng-container>\n\n<!-- Schema -->\n<ng-container *ngIf=\"status() === 'DONE'\">\n  <mat-accordion>\n    <mat-expansion-panel [(expanded)]=\"expanded\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <strong>\n            {{ getSchemaTitle }}\n          </strong>\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <ng-template matExpansionPanelContent>\n        <jse-common-create-nodes [schema]=\"resolvedSchema()!\" />\n      </ng-template>\n    </mat-expansion-panel>\n  </mat-accordion>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resolverOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "IResolveOpts",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 74,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "viewerOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "Partial<JSVOptions>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "defaultValue": "signal<Error | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "expanded",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "resolvedSchema",
                    "defaultValue": "signal<JSONSchema | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "status",
                    "defaultValue": "computed<StatusType>(() => {\r\n    if (this.error() !== undefined) {\r\n      return \"ERROR\";\r\n    } else if (this.resolvedSchema() === undefined) {\r\n      return \"LOADING\";\r\n    } else {\r\n      return \"DONE\";\r\n    }\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "schemaResolution",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "CreateNodesComponent",
                    "type": "component"
                },
                {
                    "name": "ErrorOccurredLabelComponent",
                    "type": "component"
                },
                {
                    "name": "LoadingLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, signal, computed, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n// imports\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\n\r\nimport {\r\n  CreateNodesComponent\r\n} from \"./common/index\"\r\n\r\n// services\r\nimport { SchemaResolutionService } from './services/schema-resolver';\r\nimport { JSVOptionsService } from \"./services/jsv-options\";\r\n\r\n// Labels\r\nimport {\r\n  ErrorOccurredLabelComponent,\r\n  LoadingLabelComponent\r\n} from \"./labels/index\";\r\n\r\n// Types\r\nimport type { JSONSchema } from './types';\r\nimport type { IResolveOpts } from \"@stoplight/json-ref-resolver/types\"\r\nimport type { JSVOptions } from \"./services/jsv-options\";\r\ntype StatusType = \"LOADING\" | \"ERROR\" | \"DONE\";\r\n\r\n@Component({\r\n  selector: 'ngx-json-schema-viewer',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatExpansionModule,\r\n    CreateNodesComponent,\r\n    ErrorOccurredLabelComponent,\r\n    LoadingLabelComponent,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    JSVOptionsService\r\n  ],\r\n  template: `\r\n    <!-- Error ... -->\r\n    <ng-container *ngIf=\"status() === 'ERROR'\">\r\n      <div>\r\n        <labels-error-occurred [error]=\"error()!\"/>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <!-- Loading ... -->\r\n    <ng-container *ngIf=\"status() === 'LOADING'\">\r\n        <labels-loading />\r\n    </ng-container>\r\n\r\n    <!-- Schema -->\r\n    <ng-container *ngIf=\"status() === 'DONE'\">\r\n      <mat-accordion>\r\n        <mat-expansion-panel [(expanded)]=\"expanded\">\r\n          <mat-expansion-panel-header>\r\n            <mat-panel-title>\r\n              <strong>\r\n                {{ getSchemaTitle }}\r\n              </strong>\r\n            </mat-panel-title>\r\n          </mat-expansion-panel-header>\r\n          <ng-template matExpansionPanelContent>\r\n            <jse-common-create-nodes [schema]=\"resolvedSchema()!\" />\r\n          </ng-template>\r\n        </mat-expansion-panel>\r\n      </mat-accordion>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class NgxJsonSchemaViewerComponent implements OnInit {\r\n  @Input({ required: true }) schema: unknown;\r\n  @Input() resolverOptions?: IResolveOpts;\r\n  @Input() viewerOptions?: Partial<JSVOptions>;\r\n\r\n  expanded : boolean = true;\r\n  resolvedSchema = signal<JSONSchema | undefined>(undefined);\r\n  error = signal<Error | undefined>(undefined);\r\n\r\n  status = computed<StatusType>(() => {\r\n    if (this.error() !== undefined) {\r\n      return \"ERROR\";\r\n    } else if (this.resolvedSchema() === undefined) {\r\n      return \"LOADING\";\r\n    } else {\r\n      return \"DONE\";\r\n    }\r\n  });\r\n  \r\n  constructor(\r\n    private schemaResolutionService: SchemaResolutionService,\r\n    private jsvOptionsService: JSVOptionsService,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // If asked, apply user options\r\n    if (this.viewerOptions) {\r\n      this.jsvOptionsService.setOptions(this.viewerOptions);\r\n    }\r\n    // Perform the asynchronous schema resolution\r\n    this.schemaResolution();\r\n  }\r\n\r\n  private schemaResolution() {\r\n    this.schemaResolutionService\r\n      .resolveSchema(this.schema, this.resolverOptions)\r\n      .subscribe({\r\n        error: (err) => {\r\n          this.error.set(err);\r\n          this.resolvedSchema.set(undefined);\r\n        },\r\n        next: (result) => {\r\n          this.resolvedSchema.set(result);\r\n          this.error.set(undefined);\r\n        }\r\n      });\r\n  }\r\n\r\n  get getSchemaTitle() : string {\r\n    let schema = this.resolvedSchema()!;\r\n    if (typeof schema !== \"boolean\" && schema.title !== undefined) {\r\n      return schema.title;\r\n    }\r\n    return \"Schema\";\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "schemaResolutionService",
                        "type": "SchemaResolutionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jsvOptionsService",
                        "type": "JSVOptionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 90,
                "jsdoctags": [
                    {
                        "name": "schemaResolutionService",
                        "type": "SchemaResolutionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jsvOptionsService",
                        "type": "JSVOptionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "getSchemaTitle": {
                    "name": "getSchemaTitle",
                    "getSignature": {
                        "name": "getSchemaTitle",
                        "type": "string",
                        "returnType": "string",
                        "line": 121
                    }
                }
            }
        },
        {
            "name": "NoExtraItemsComponent",
            "id": "component-NoExtraItemsComponent-13f8a443682025a2fb7393af1e9c620b5c12e5b855f722ae43ed8dd01eb5aefb4dde4582584c847356ed6f4302a01ca8fccaeeb32072a95f6dbab533b3ba819d",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/no-extra-items.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-no-extra-items",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span>🚨&nbsp;</span>\n  <ng-container>No extra item(s) are authorized in this array</ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-no-extra-items',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <span>🚨&nbsp;</span>\r\n      <ng-container>No extra item(s) are authorized in this array</ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class NoExtraItemsComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NoExtraPropertiesComponent",
            "id": "component-NoExtraPropertiesComponent-8d359dcf273da5a5cffe079f5fa9d4a7b7a4fb6ad51a684c95f7553e9b73aeb49a688f127959741ce2950e87daf7e24c1bf8c06d7eda1725939743990bf7c7cb",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/no-extra-properties.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-no-extra-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span>🚨&nbsp;</span>\n  <ng-container>No extra propertie(s) are authorized in this object</ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-no-extra-properties',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <span>🚨&nbsp;</span>\r\n      <ng-container>No extra propertie(s) are authorized in this object</ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class NoExtraPropertiesComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NotLabelComponent",
            "id": "component-NotLabelComponent-b456b7339c36627a4e2b61204b2c629fbc1997212ef00a63c380cd910aa62f7be57c0865fae01f90f8f1f6012cea20a29f43f9e2b026ad3c185ecccf46a01361",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/not-label.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-not",
            "styleUrls": [],
            "styles": [],
            "template": "<strong>\n  NOT\n</strong>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-not',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <strong>\r\n      NOT\r\n    </strong>\r\n  `,\r\n})\r\nexport class NotLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NotSchemaComponent",
            "id": "component-NotSchemaComponent-dd6fcd3a70006b9e8ebca85bc45893da8109c75ff91fe54d59abaed39c8bcd45c488e267b40280882da0c84c443b49ead45fc4ac6bfd24691af6941874ee15fa",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/not.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-composition-not",
            "styleUrls": [
                "./not.css"
            ],
            "styles": [],
            "template": "<div>\n    <span class=\"badge not\">{{ typeOf }}</span>\n    <br />\n    <jse-common-create-nodes [schema]=\"typedSchema\" />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 24,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "forwardRef(() => CreateNodesComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport { CreateNodesComponent } from \"../../common/create-nodes\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-composition-not',\r\n  standalone: true,\r\n  imports: [\r\n    forwardRef(() => CreateNodesComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n        <span class=\"badge not\">{{ typeOf }}</span>\r\n        <br />\r\n        <jse-common-create-nodes [schema]=\"typedSchema\" />\r\n    </div>\r\n  `,\r\n  styleUrls: [\"./not.css\"]\r\n})\r\nexport class NotSchemaComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): JSONSchema {\r\n    return this.schema.not!;\r\n  }\r\n\r\n  get typeOf(): string {\r\n    return \"not\";\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".badge.not {\r\n    display: inline-block;\r\n    padding: 6px 12px;\r\n    background-color: red; /* Custom background color for \"not\" */\r\n    border-radius: 50%;\r\n    color: #fff; /* Custom font color for \"not\" */\r\n    font-weight: bold; /* Make text bold */\r\n}\r\n  ",
                    "styleUrl": "./not.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "JSONSchema",
                        "line": 26
                    }
                },
                "typeOf": {
                    "name": "typeOf",
                    "getSignature": {
                        "name": "typeOf",
                        "type": "string",
                        "returnType": "string",
                        "line": 30
                    }
                }
            }
        },
        {
            "name": "NullableComponent",
            "id": "component-NullableComponent-3dc88ec2d26577271b4e0fe557444243307a9c0a9e68a3e0c9f7bab2c3adda8052690993056ef65a8bca7b7a66391ba076631e0d717bc48a1032ba41cb0e258f",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/nullable.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-nullable",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span>❓&nbsp;</span>\n  <ng-container>Nullable</ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-nullable',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <span>❓&nbsp;</span>\r\n      <ng-container>Nullable</ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class NullableComponent {}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NullLabelComponent",
            "id": "component-NullLabelComponent-56b012c380654002b392e94185f8ed25806c95e3547866fdb6ab65ae45340e66adacc47387f3ed2c4cc5ca0ec82836d8f8d86cb621c87d5edec13cb8aee12dbd",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/null-labels.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-null",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  null\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-null',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      null\r\n    </span>\r\n  `,\r\n})\r\nexport class NullLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NumberBoundsComponent",
            "id": "component-NumberBoundsComponent-86fc22d59515dfbb18b3516b4f21f754e30f2f765a6bd5cbd1e5c87f3fb650c9d7b86d5c23cbd2c90993864c585f4e7235bdce6825ad7c1df7bc316f35040ad1",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/number-bounds.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-number-bounds",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ boundsLabel }}</strong>&nbsp;\n  <ng-container *ngIf=\"minimum !== undefined\">\n    <code>\n      <ng-container [ngSwitch]=\"isExclusiveMinimum\">\n        <span *ngSwitchCase=\"true\">&gt;</span>\n        <span *ngSwitchDefault>&ge;</span>\n      </ng-container>\n      {{ minimum }}\n    </code>\n  </ng-container>\n  <ng-container *ngIf=\"minAndMax\">\n    <labels-and />\n  </ng-container>\n  <ng-container *ngIf=\"maximum !== undefined\">\n    <code>\n      <ng-container [ngSwitch]=\"isExclusiveMaximum\">\n        <span *ngSwitchCase=\"true\">&lt;</span>\n        <span *ngSwitchDefault>&le;</span>\n      </ng-container>\n      {{ maximum }}\n    </code>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 43,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boundsLabel",
                    "defaultValue": "'Possible values :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AndLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  AndLabelComponent\r\n} from \"../../labels/index\";\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-number-bounds',\r\n  standalone: true,\r\n  imports: [CommonModule, AndLabelComponent],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <strong>{{ boundsLabel }}</strong>&nbsp;\r\n      <ng-container *ngIf=\"minimum !== undefined\">\r\n        <code>\r\n          <ng-container [ngSwitch]=\"isExclusiveMinimum\">\r\n            <span *ngSwitchCase=\"true\">&gt;</span>\r\n            <span *ngSwitchDefault>&ge;</span>\r\n          </ng-container>\r\n          {{ minimum }}\r\n        </code>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"minAndMax\">\r\n        <labels-and />\r\n      </ng-container>\r\n      <ng-container *ngIf=\"maximum !== undefined\">\r\n        <code>\r\n          <ng-container [ngSwitch]=\"isExclusiveMaximum\">\r\n            <span *ngSwitchCase=\"true\">&lt;</span>\r\n            <span *ngSwitchDefault>&le;</span>\r\n          </ng-container>\r\n          {{ maximum }}\r\n        </code>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class NumberBoundsComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  boundsLabel = 'Possible values :';\r\n  \r\n  get minimum() : number | undefined { \r\n    return this.schema.exclusiveMinimum || this.schema.minimum; \r\n  }\r\n\r\n  get isExclusiveMinimum(): boolean {\r\n    return this.schema.exclusiveMinimum !== undefined;\r\n  }\r\n\r\n  get maximum(): number | undefined {\r\n    return this.schema.exclusiveMaximum || this.schema.maximum;\r\n  }\r\n\r\n  get isExclusiveMaximum() : boolean {\r\n    return this.minimum !== undefined && this.maximum !== undefined;\r\n  }\r\n\r\n  get minAndMax() : boolean {\r\n    return this.minimum !== undefined && this.maximum !== undefined;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "minimum": {
                    "name": "minimum",
                    "getSignature": {
                        "name": "minimum",
                        "type": "",
                        "returnType": "number | undefined",
                        "line": 47
                    }
                },
                "isExclusiveMinimum": {
                    "name": "isExclusiveMinimum",
                    "getSignature": {
                        "name": "isExclusiveMinimum",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 51
                    }
                },
                "maximum": {
                    "name": "maximum",
                    "getSignature": {
                        "name": "maximum",
                        "type": "",
                        "returnType": "number | undefined",
                        "line": 55
                    }
                },
                "isExclusiveMaximum": {
                    "name": "isExclusiveMaximum",
                    "getSignature": {
                        "name": "isExclusiveMaximum",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 59
                    }
                },
                "minAndMax": {
                    "name": "minAndMax",
                    "getSignature": {
                        "name": "minAndMax",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 63
                    }
                }
            }
        },
        {
            "name": "NumberLabelComponent",
            "id": "component-NumberLabelComponent-d650bfca5029509a1f8df42cdb58306f86191738f03e9d148ebe9b5ffafce72006ebaaef7c079299ecc4d26b7884b22d98c2e5e4e693a763310f860638df5258",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/number-label.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-number",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  number\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-number',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      number\r\n    </span>\r\n  `,\r\n})\r\nexport class NumberLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ObjectLabelComponent",
            "id": "component-ObjectLabelComponent-e83dec7bbf2fe5f5fd66b703ca9e75dfe8202bbc8dd43a3f25b2cde098c868ec52e0e036b826c5c3376d69b3786deeca3b5c88a27e3436a1a41fb2d8f07a402d",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/object-label.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-object",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  object\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-object',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      object\r\n    </span>\r\n  `,\r\n})\r\nexport class ObjectLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ObjectPropertiesComponent",
            "id": "component-ObjectPropertiesComponent-7c6c3d22287911f52d2ad46f38d5d837d1d7eee687a6b91c18f5eb74d3da5d5cfca6eb62fe3ad84836006619d0e5c271fb3522c11f3d7821a879c67c8567fdc3",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/object-properties.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-object-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ lengthLabel }}</strong>&nbsp;\n  <ng-container *ngIf=\"schema.minProperties !== undefined\">\n    <code>\n        {{ '>= ' + schema.minProperties + ' propertie(s)' }}\n    </code>\n  </ng-container>\n  <ng-container *ngIf=\"minAndMax\">\n    <span>&nbsp;&&nbsp;</span>\n  </ng-container>\n  <ng-container *ngIf=\"schema.maxProperties !== undefined\">\n    <code>\n        {{ '<= ' + schema.maxProperties + ' propertie(s)' }}\n    </code>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 31,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "lengthLabel",
                    "defaultValue": "'Length :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-object-properties',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <strong>{{ lengthLabel }}</strong>&nbsp;\r\n      <ng-container *ngIf=\"schema.minProperties !== undefined\">\r\n        <code>\r\n            {{ '>= ' + schema.minProperties + ' propertie(s)' }}\r\n        </code>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"minAndMax\">\r\n        <span>&nbsp;&&nbsp;</span>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"schema.maxProperties !== undefined\">\r\n        <code>\r\n            {{ '<= ' + schema.maxProperties + ' propertie(s)' }}\r\n        </code>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class ObjectPropertiesComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n  lengthLabel = 'Length :';\r\n\r\n  get minAndMax(): boolean {\r\n    return this.schema.minProperties !== undefined && this.schema.maxProperties !== undefined; \r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "minAndMax": {
                    "name": "minAndMax",
                    "getSignature": {
                        "name": "minAndMax",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 34
                    }
                }
            }
        },
        {
            "name": "OneOfSchemaComponent",
            "id": "component-OneOfSchemaComponent-7751d22987112b0c3619b92e824329892baaacb3670ac460482e5e7ef19bf1d573486acb254b239edc308c605df1c972ef6c8b11360a64a2f6651d0e806213ae",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/one-of.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-composition-one-of",
            "styleUrls": [
                "./one-of.css"
            ],
            "styles": [],
            "template": "<div>\n  <span class=\"badge oneOf\">{{ typeOf }}</span>\n  <mat-tab-group>\n    <ng-container *ngFor=\"let compositeSchema of typedSchema\">\n      <mat-tab>\n        <ng-template mat-tab-label>\n          <jsv-friendly-name [schema]=\"compositeSchema\" />\n        </ng-template>\n        <jse-common-create-nodes [schema]=\"compositeSchema\" />\n      </mat-tab>\n    </ng-container>\n  </mat-tab-group>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 38,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateNodesComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\n\r\nimport { GenerateFriendlyNameComponent } from \"../../utils/index\";\r\nimport { CreateNodesComponent } from \"../../common/create-nodes\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-composition-one-of',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    MatTabsModule, \r\n    forwardRef(() => GenerateFriendlyNameComponent), \r\n    forwardRef(() => CreateNodesComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <span class=\"badge oneOf\">{{ typeOf }}</span>\r\n      <mat-tab-group>\r\n        <ng-container *ngFor=\"let compositeSchema of typedSchema\">\r\n          <mat-tab>\r\n            <ng-template mat-tab-label>\r\n              <jsv-friendly-name [schema]=\"compositeSchema\" />\r\n            </ng-template>\r\n            <jse-common-create-nodes [schema]=\"compositeSchema\" />\r\n          </mat-tab>\r\n        </ng-container>\r\n      </mat-tab-group>\r\n    </div>\r\n  `,\r\n  styleUrls: [\"./one-of.css\"]\r\n})\r\nexport class OneOfSchemaComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): JSONSchema[] {\r\n    return this.schema.oneOf! as JSONSchema[];\r\n  }\r\n\r\n  get typeOf(): string {\r\n    return \"oneOf\";\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".badge.oneOf {\r\n    display: inline-block;\r\n    padding: 6px 12px;\r\n    background-color: green; /* Custom background color for \"oneOf\" */\r\n    border-radius: 50%;\r\n    color: #000; /* Custom font color for \"oneOf\" */\r\n    font-weight: bold; /* Make text bold */\r\n}\r\n  ",
                    "styleUrl": "./one-of.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 40
                    }
                },
                "typeOf": {
                    "name": "typeOf",
                    "getSignature": {
                        "name": "typeOf",
                        "type": "string",
                        "returnType": "string",
                        "line": 44
                    }
                }
            }
        },
        {
            "name": "OrLabelComponent",
            "id": "component-OrLabelComponent-0fca60429461afa7d4d14a938f28ce463d20469480ce060cbc3103400db622dd18dae4cdead089eaf419539ef9e43cde72300101c43f762ee0ae2e0c8ef6bda1",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/or-label.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-or",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n<strong>OR</strong>\n<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n\n<ng-template #spaceTemplate>\n  &nbsp;\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgTemplateOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-or',\r\n  standalone: true,\r\n  imports: [NgTemplateOutlet],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n    <strong>OR</strong>\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n\r\n    <ng-template #spaceTemplate>\r\n      &nbsp;\r\n    </ng-template>\r\n  `,\r\n})\r\nexport class OrLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "PatternComponent",
            "id": "component-PatternComponent-ffc8e747c091f7c7625ae408006b2a59e23c9991047159ab928741dc0f29a920904671c4c012e56f2694dad487ebd072e2fb15e4ed2094aeec5e835be4a9cdea",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/pattern.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-pattern",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ patternLabel }}</strong>&nbsp;\n  <code>{{ pattern }}</code>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 18,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "patternLabel",
                    "defaultValue": "'Pattern :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n    selector: 'qm-pattern',\r\n    standalone: true,\r\n    imports: [],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    template: `\r\n      <div>\r\n        <strong>{{ patternLabel }}</strong>&nbsp;\r\n        <code>{{ pattern }}</code>\r\n      </div>\r\n    `,\r\n  })\r\n  export class PatternComponent {\r\n    @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n    patternLabel = 'Pattern :';\r\n\r\n    get pattern(): string {\r\n      return this.schema.pattern!;\r\n    }\r\n  }\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "pattern": {
                    "name": "pattern",
                    "getSignature": {
                        "name": "pattern",
                        "type": "string",
                        "returnType": "string",
                        "line": 21
                    }
                }
            }
        },
        {
            "name": "PrintSchemaTypeComponent",
            "id": "component-PrintSchemaTypeComponent-ec0cc42f3a1ea04d90b970fe9e2d41453a8d360ae5480e7f742835103eeaaf8ac691fe05e8415a6fb94ea00fe4309504a682cbf88c150fdab67ea8d3f96033e3",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/print-schema-type.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-print-schema-type",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"isSimpleType; else complexType\">\n  <code>{{ value }}</code>\n</ng-container>\n<ng-template #complexType>\n    <pre><code [highlight]=\"jsonCode\" [languages]=\"languages\"></code></pre>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "obj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 23,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HighlightModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { HighlightModule } from 'ngx-highlightjs';\r\n\r\n@Component({\r\n  selector: 'lib-print-schema-type',\r\n  template: `\r\n    <ng-container *ngIf=\"isSimpleType; else complexType\">\r\n      <code>{{ value }}</code>\r\n    </ng-container>\r\n    <ng-template #complexType>\r\n        <pre><code [highlight]=\"jsonCode\" [languages]=\"languages\"></code></pre>\r\n    </ng-template>\r\n  `,\r\n  standalone: true,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  imports: [\r\n    CommonModule,\r\n    HighlightModule\r\n  ]\r\n})\r\nexport class PrintSchemaTypeComponent {\r\n  @Input({ required: true }) obj!: unknown;\r\n\r\n  get isSimpleType(): boolean {\r\n    return ['string', 'number', 'bigint', 'boolean'].includes(typeof this.obj);\r\n  }\r\n\r\n  get jsonCode(): string {\r\n    return JSON.stringify(this.obj, null, \"\\t\");\r\n  }\r\n\r\n  get value(): string {\r\n    return this.obj!.toString();\r\n  }\r\n\r\n  get languages(): string[] {\r\n    return [\"json\"];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "isSimpleType": {
                    "name": "isSimpleType",
                    "getSignature": {
                        "name": "isSimpleType",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 25
                    }
                },
                "jsonCode": {
                    "name": "jsonCode",
                    "getSignature": {
                        "name": "jsonCode",
                        "type": "string",
                        "returnType": "string",
                        "line": 29
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "string",
                        "returnType": "string",
                        "line": 33
                    }
                },
                "languages": {
                    "name": "languages",
                    "getSignature": {
                        "name": "languages",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 37
                    }
                }
            }
        },
        {
            "name": "PropertyNamesComponent",
            "id": "component-PropertyNamesComponent-46a311def8bae31f586114cdc58fea1ac6a15a561fe741c96c402b8ebc2727f4f2631bd2d5cfe83f148ec1743b60ee2ee5a5c1bd71f3fc6d74c620fc3e1ef80d",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/property-names.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-property-names",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"schema.propertyNames !== undefined\">\n  <ul>\n    <jse-common-create-edge [schema]=\"schema.propertyNames\" [required]=\"false\">\n      <code name>\n        {{ generatePropertyName() }}\n      </code>\n    </jse-common-create-edge>\n  </ul>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 31,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "generatePropertyName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-property-names',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ng-container *ngIf=\"schema.propertyNames !== undefined\">\r\n      <ul>\r\n        <jse-common-create-edge [schema]=\"schema.propertyNames\" [required]=\"false\">\r\n          <code name>\r\n            {{ generatePropertyName() }}\r\n          </code>\r\n        </jse-common-create-edge>\r\n      </ul>\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class PropertyNamesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  generatePropertyName(): string {\r\n    let pattern = \"^.+$\";\r\n    return `${pattern}`;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "QualifierMessages",
            "id": "component-QualifierMessages-f0031b44d576d9c97b395081aae43244197496878339beffc7428d8dbb813e35c525f9520901f0c98b1c74e7fde52c7e6d29b9c1aa4708bcdc2ae8f272bae515",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/qualifier-messages.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-messages",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <ng-container *ngFor=\"let key of filteredQualifiers\">\n        <ng-container [ngSwitch]=\"key\">\n            <qm-constant *ngSwitchCase=\"'const'\" [schema]=\"schema\"/>\n            <qm-default-value *ngSwitchCase=\"'default'\" [schema]=\"schema\"/>\n            <qm-enum *ngSwitchCase=\"'enum'\" [schema]=\"schema\"/>\n            <qm-examples *ngSwitchCase=\"'examples'\" [schema]=\"schema\"/>\n            <qm-read-only *ngSwitchCase=\"'readOnly'\" />\n            <qm-write-only *ngSwitchCase=\"'writeOnly'\" />\n            <qm-array-unique-items *ngSwitchCase=\"'uniqueItems'\" />\n            <qm-deprecated *ngSwitchCase=\"'deprecated'\" />\n            <qm-nullable *ngSwitchCase=\"'nullable'\" />\n            <qm-string-length *ngSwitchCase=\"'stringLength'\" [schema]=\"schema\" />\n            <qm-object-properties *ngSwitchCase=\"'objectProperties'\" [schema]=\"schema\" />\n            <qm-no-extra-properties *ngSwitchCase=\"'no-extra-properties'\" />\n            <qm-array-number-of-items *ngSwitchCase=\"'arrayItems'\" [schema]=\"schema\" />\n            <qm-array-contains *ngSwitchCase=\"'arrayContains'\" [schema]=\"schema\" />\n            <qm-no-extra-items *ngSwitchCase=\"'no-extra-items'\" />\n            <qm-number-bounds *ngSwitchCase=\"'number-range'\" [schema]=\"schema\" />\n            <qm-pattern *ngSwitchCase=\"'pattern'\" [schema]=\"schema\" />\n            <qm-multiple-of *ngSwitchCase=\"'multipleOf'\" [schema]=\"schema\" />\n            <qm-content-encoding *ngSwitchCase=\"'contentEncoding'\" [schema]=\"schema\" />\n            <qm-content-media-type *ngSwitchCase=\"'contentMediaType'\" [schema]=\"schema\" />\n            <qm-content-schema *ngSwitchCase=\"'contentSchema'\" [schema]=\"typedAsJSONSchemaString\" />\n        </ng-container>\n    </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 93,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ConstantComponent",
                    "type": "component"
                },
                {
                    "name": "DefaultValueComponent",
                    "type": "component"
                },
                {
                    "name": "EnumComponent",
                    "type": "component"
                },
                {
                    "name": "ExamplesComponent",
                    "type": "component"
                },
                {
                    "name": "ReadOnlyComponent",
                    "type": "component"
                },
                {
                    "name": "WriteOnlyComponent",
                    "type": "component"
                },
                {
                    "name": "ArrayUniqueItemsComponent",
                    "type": "component"
                },
                {
                    "name": "DeprecatedComponent",
                    "type": "component"
                },
                {
                    "name": "NullableComponent",
                    "type": "component"
                },
                {
                    "name": "StringLengthComponent",
                    "type": "component"
                },
                {
                    "name": "ObjectPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "NoExtraPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "ArrayNumberOfItemsComponent",
                    "type": "component"
                },
                {
                    "name": "ArrayContainsNumberComponent",
                    "type": "component"
                },
                {
                    "name": "NoExtraItemsComponent",
                    "type": "component"
                },
                {
                    "name": "NumberBoundsComponent",
                    "type": "component"
                },
                {
                    "name": "PatternComponent",
                    "type": "component"
                },
                {
                    "name": "MultipleOfComponent",
                    "type": "component"
                },
                {
                    "name": "ContentEncodingComponent",
                    "type": "component"
                },
                {
                    "name": "ContentMediaTypeComponent",
                    "type": "component"
                },
                {
                    "name": "ContentSchemaComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { JSVOptionsService } from '../services/jsv-options';\r\n\r\n// qualifier messages\r\nimport {\r\n    ConstantComponent,\r\n    ArrayContainsNumberComponent,\r\n    ArrayNumberOfItemsComponent,\r\n    ArrayUniqueItemsComponent,\r\n    ContentEncodingComponent,\r\n    ContentMediaTypeComponent,\r\n    ContentSchemaComponent,\r\n    DefaultValueComponent,\r\n    DeprecatedComponent,\r\n    EnumComponent,\r\n    ExamplesComponent,\r\n    MultipleOfComponent,\r\n    NoExtraItemsComponent,\r\n    NoExtraPropertiesComponent,\r\n    NullableComponent,\r\n    NumberBoundsComponent,\r\n    ObjectPropertiesComponent,\r\n    PatternComponent,\r\n    ReadOnlyComponent,\r\n    StringLengthComponent,\r\n    WriteOnlyComponent\r\n} from \"./QualifierMessages/index\";\r\n\r\n// Types\r\nimport type { JSONSchema, JSONSchemaNS } from '../types';\r\nimport type { JSVOptions, CheckKey } from '../services/jsv-options';\r\n\r\n@Component({\r\n    selector: 'qm-messages',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        ConstantComponent,\r\n        DefaultValueComponent,\r\n        EnumComponent,\r\n        ExamplesComponent,\r\n        ReadOnlyComponent,\r\n        WriteOnlyComponent,\r\n        ArrayUniqueItemsComponent,\r\n        DeprecatedComponent,\r\n        NullableComponent,\r\n        StringLengthComponent,\r\n        ObjectPropertiesComponent,\r\n        NoExtraPropertiesComponent,\r\n        ArrayNumberOfItemsComponent,\r\n        ArrayContainsNumberComponent,\r\n        NoExtraItemsComponent,\r\n        NumberBoundsComponent,\r\n        PatternComponent,\r\n        MultipleOfComponent,\r\n        ContentEncodingComponent,\r\n        ContentMediaTypeComponent,\r\n        ContentSchemaComponent\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    template: `\r\n        <div>\r\n            <ng-container *ngFor=\"let key of filteredQualifiers\">\r\n                <ng-container [ngSwitch]=\"key\">\r\n                    <qm-constant *ngSwitchCase=\"'const'\" [schema]=\"schema\"/>\r\n                    <qm-default-value *ngSwitchCase=\"'default'\" [schema]=\"schema\"/>\r\n                    <qm-enum *ngSwitchCase=\"'enum'\" [schema]=\"schema\"/>\r\n                    <qm-examples *ngSwitchCase=\"'examples'\" [schema]=\"schema\"/>\r\n                    <qm-read-only *ngSwitchCase=\"'readOnly'\" />\r\n                    <qm-write-only *ngSwitchCase=\"'writeOnly'\" />\r\n                    <qm-array-unique-items *ngSwitchCase=\"'uniqueItems'\" />\r\n                    <qm-deprecated *ngSwitchCase=\"'deprecated'\" />\r\n                    <qm-nullable *ngSwitchCase=\"'nullable'\" />\r\n                    <qm-string-length *ngSwitchCase=\"'stringLength'\" [schema]=\"schema\" />\r\n                    <qm-object-properties *ngSwitchCase=\"'objectProperties'\" [schema]=\"schema\" />\r\n                    <qm-no-extra-properties *ngSwitchCase=\"'no-extra-properties'\" />\r\n                    <qm-array-number-of-items *ngSwitchCase=\"'arrayItems'\" [schema]=\"schema\" />\r\n                    <qm-array-contains *ngSwitchCase=\"'arrayContains'\" [schema]=\"schema\" />\r\n                    <qm-no-extra-items *ngSwitchCase=\"'no-extra-items'\" />\r\n                    <qm-number-bounds *ngSwitchCase=\"'number-range'\" [schema]=\"schema\" />\r\n                    <qm-pattern *ngSwitchCase=\"'pattern'\" [schema]=\"schema\" />\r\n                    <qm-multiple-of *ngSwitchCase=\"'multipleOf'\" [schema]=\"schema\" />\r\n                    <qm-content-encoding *ngSwitchCase=\"'contentEncoding'\" [schema]=\"schema\" />\r\n                    <qm-content-media-type *ngSwitchCase=\"'contentMediaType'\" [schema]=\"schema\" />\r\n                    <qm-content-schema *ngSwitchCase=\"'contentSchema'\" [schema]=\"typedAsJSONSchemaString\" />\r\n                </ng-container>\r\n            </ng-container>\r\n        </div>\r\n    `\r\n})\r\nexport class QualifierMessages {\r\n    @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n    constructor(private jsvOptionsService: JSVOptionsService) {}\r\n\r\n    get options(): JSVOptions {\r\n        return this.jsvOptionsService.getOptions();\r\n    }\r\n\r\n    get typedAsJSONSchemaString(): JSONSchemaNS.String {\r\n        return this.schema as JSONSchemaNS.String;\r\n    }\r\n\r\n    get filteredQualifiers(): CheckKey[] {\r\n        const qualifierMessagesOrder = this.options.qualifierMessagesOrder;\r\n\r\n        const filteredMessagesOrder = qualifierMessagesOrder.filter(qualifierKey => {\r\n            switch(qualifierKey) {\r\n                case 'const':\r\n                    return this.schema.const !== undefined;\r\n                case 'default':\r\n                    return this.schema.default !== undefined;\r\n                case 'enum':\r\n                    return this.schema.enum !== undefined;\r\n                case 'examples':\r\n                    return (this.options.showExamples || false) && this.schema.examples !== undefined;\r\n                case 'readOnly':\r\n                    return this.schema.readOnly === true;\r\n                case 'writeOnly':\r\n                    return this.schema.writeOnly === true;\r\n                case 'uniqueItems':\r\n                    return this.schema.uniqueItems === true;\r\n                case 'deprecated':\r\n                    return (this.schema as JSONSchemaNS.Object).deprecated === true;\r\n                case 'nullable':\r\n                    return (this.schema as any).nullable === true;\r\n                case 'stringLength':\r\n                    return this.schema.minLength !== undefined || this.schema.maxLength !== undefined;\r\n                case 'objectProperties':\r\n                    return this.schema.minProperties !== undefined || this.schema.maxProperties !== undefined;\r\n                case 'no-extra-properties':\r\n                    return this.schema.additionalProperties === false || (this.schema as JSONSchemaNS.Object).unevaluatedProperties === false;\r\n                case 'arrayItems':\r\n                    return this.schema.minItems !== undefined || this.schema.maxItems !== undefined;\r\n                case 'arrayContains':\r\n                    return (this.schema as JSONSchemaNS.Array).minContains !== undefined || (this.schema as JSONSchemaNS.Array).maxContains !== undefined;\r\n                case 'no-extra-items':\r\n                    return (this.schema as JSONSchemaNS.Array).unevaluatedItems === false || this.schema.items === false || this.schema.additionalItems === false;\r\n                case 'number-range':\r\n                    return this.schema.minimum !== undefined || this.schema.exclusiveMinimum !== undefined || this.schema.maximum !== undefined || this.schema.exclusiveMaximum !== undefined;\r\n                case 'pattern':\r\n                    return this.schema.pattern !== undefined;\r\n                case 'multipleOf':\r\n                    return this.schema.multipleOf !== undefined;\r\n                case 'contentMediaType':\r\n                    return this.schema.contentMediaType !== undefined;\r\n                case 'contentEncoding':\r\n                    return this.schema.contentEncoding !== undefined;\r\n                case 'contentSchema':\r\n                    return (this.schema as JSONSchemaNS.String).contentSchema !== undefined;\r\n            }\r\n        });\r\n        // To debug easily in the future ;)\r\n        return filteredMessagesOrder;\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "jsvOptionsService",
                        "type": "JSVOptionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 93,
                "jsdoctags": [
                    {
                        "name": "jsvOptionsService",
                        "type": "JSVOptionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "JSVOptions",
                        "line": 97
                    }
                },
                "typedAsJSONSchemaString": {
                    "name": "typedAsJSONSchemaString",
                    "getSignature": {
                        "name": "typedAsJSONSchemaString",
                        "type": "",
                        "returnType": "JSONSchemaNS.String",
                        "line": 101
                    }
                },
                "filteredQualifiers": {
                    "name": "filteredQualifiers",
                    "getSignature": {
                        "name": "filteredQualifiers",
                        "type": "[]",
                        "returnType": "CheckKey[]",
                        "line": 105
                    }
                }
            }
        },
        {
            "name": "ReadOnlyComponent",
            "id": "component-ReadOnlyComponent-9d6969d09a4f098be583453063b67f609cfaf4106e508f3b0d036cb5900e7345854ea4be7e9ccd2968778551be4c914f979d0f4a12fc3220ce4a46028a13907d",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/readOnly.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-read-only",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  🚨&nbsp;\n  <strong>{{ readOnlyLabel }}</strong>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "readOnlyLabel",
                    "defaultValue": "'read only'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-read-only',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      🚨&nbsp;\r\n      <strong>{{ readOnlyLabel }}</strong>\r\n    </div>\r\n  `,\r\n})\r\nexport class ReadOnlyComponent {\r\n  readOnlyLabel = 'read only';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ReadOnlyLabelComponent",
            "id": "component-ReadOnlyLabelComponent-39eaed6f78e7724bb9be8906535c5e83b8e19388cc6e34b9031cf2b05739bb074541e9a48894dfc7b36ef25603f4e5afda2ab809e83291230ebded733c7f0983",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/ReadOnly/read-only-label.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-read-only",
            "styleUrls": [
                "./read-only-label.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./read-only-label.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-read-only',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: './read-only-label.component.html',\r\n  styleUrls: ['./read-only-label.component.css']\r\n})\r\nexport class ReadOnlyLabelComponent { }",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".readOnly {\r\n    font-size: 90%;\r\n    color: #47a9c9;\r\n    margin-right: 4px;\r\n}",
                    "styleUrl": "./read-only-label.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<strong class=\"readOnly\">\r\n    readOnly\r\n</strong>\r\n  "
        },
        {
            "name": "RenderMultipleTypesComponent",
            "id": "component-RenderMultipleTypesComponent-f39b88761e14fe3af261a18d23464e6cb81ed90239d39e5ec3cfdd14cc5627657a02ad2708f37f9fe6fc938fc3efb07dec90349c0521e822a6819a46ba67e95b",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/render-multiple-types.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-multiple-types",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-tab-group>\n  <ng-container *ngFor=\"let type of types\">\n    <mat-tab>\n      <ng-template mat-tab-label>\n          <jsv-type-label-switch [type]=\"type\" />\n      </ng-template>\n      <jse-common-render-provided-type [type]=\"type\" [schema]=\"schema\" [nullable]=\"nullable\" />\n    </mat-tab>\n  </ng-container>\n</mat-tab-group>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "nullable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 42,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "types",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 44,
                    "type": "TypeValues[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "RenderProvidedTypeComponent",
                    "type": "component"
                },
                {
                    "name": "TypeLabelSwitchComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\n\r\nimport {\r\n    RenderProvidedTypeComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelSwitchComponent\r\n} from \"../utils/index\";\r\n\r\nimport type {\r\n    TypeValues,\r\n    JSONSchema\r\n} from \"../types\";\r\n\r\n@Component({\r\n  selector: 'jse-common-multiple-types',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatTabsModule,\r\n    RenderProvidedTypeComponent,\r\n    TypeLabelSwitchComponent\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <mat-tab-group>\r\n      <ng-container *ngFor=\"let type of types\">\r\n        <mat-tab>\r\n          <ng-template mat-tab-label>\r\n              <jsv-type-label-switch [type]=\"type\" />\r\n          </ng-template>\r\n          <jse-common-render-provided-type [type]=\"type\" [schema]=\"schema\" [nullable]=\"nullable\" /> \r\n        </mat-tab>\r\n      </ng-container>\r\n    </mat-tab-group>\r\n  `\r\n})\r\nexport class RenderMultipleTypesComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n  @Input() nullable?: boolean;\r\n  @Input({ required: true }) types!: TypeValues[];\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "RenderProvidedTypeComponent",
            "id": "component-RenderProvidedTypeComponent-7a55e07c22114e84bcd9a5c7333fefe4c478f0f6740923131a42af843a023c47be58f8af6243d0843f524ee107c44f43c6436d97371da91f29f61c8215abffe2",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/render-provided-type.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-render-provided-type",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container [ngSwitch]=\"type\">\n  <jse-array\n    *ngSwitchCase=\"'array'\"\n    [schema]=\"asTypedArray\"\n    [description]=\"description\"\n  />\n  <jse-object\n    *ngSwitchCase=\"'object'\"\n    [schema]=\"asTypedObject\"\n    [description]=\"description\"\n  />\n  <jse-string\n    *ngSwitchCase=\"'string'\"\n    [schema]=\"asTypedString\"\n    [description]=\"description\"\n  />\n  <jse-boolean\n    *ngSwitchCase=\"'boolean'\"\n    [schema]=\"asTypedBoolean\"\n    [description]=\"description\"\n  />\n  <jse-number\n    *ngSwitchCase=\"'number'\"\n    [schema]=\"asTypedNumber\"\n    [description]=\"description\"\n  />\n  <jse-integer\n    *ngSwitchCase=\"'integer'\"\n    [schema]=\"asTypedInteger\"\n    [description]=\"description\"\n  />\n  <jse-null\n    *ngSwitchDefault\n    [schema]=\"asTypedNull\"\n    [description]=\"description\"\n  />\n<ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "nullable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 75,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 76,
                    "type": "TypeValues",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateArrayComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateObjectComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateStringComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateBooleanComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateNumberComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateIntegerComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateNullComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n    CreateArrayComponent,\r\n    CreateObjectComponent,\r\n    CreateStringComponent,\r\n    CreateBooleanComponent,\r\n    CreateNumberComponent,\r\n    CreateIntegerComponent,\r\n    CreateNullComponent\r\n} from \"../JSONSchemaElements/index\";\r\n\r\nimport type {\r\n    JSONSchema,\r\n    JSONSchemaNS,\r\n    TypeValues,\r\n} from '../types';\r\n\r\n@Component({\r\n  selector: 'jse-common-render-provided-type',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateArrayComponent),\r\n    forwardRef(() => CreateObjectComponent),\r\n    forwardRef(() => CreateStringComponent),\r\n    forwardRef(() => CreateBooleanComponent),\r\n    forwardRef(() => CreateNumberComponent),\r\n    forwardRef(() => CreateIntegerComponent),\r\n    forwardRef(() => CreateNullComponent)\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ng-container [ngSwitch]=\"type\">\r\n      <jse-array\r\n        *ngSwitchCase=\"'array'\"\r\n        [schema]=\"asTypedArray\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-object\r\n        *ngSwitchCase=\"'object'\"\r\n        [schema]=\"asTypedObject\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-string\r\n        *ngSwitchCase=\"'string'\"\r\n        [schema]=\"asTypedString\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-boolean\r\n        *ngSwitchCase=\"'boolean'\"\r\n        [schema]=\"asTypedBoolean\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-number\r\n        *ngSwitchCase=\"'number'\"\r\n        [schema]=\"asTypedNumber\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-integer\r\n        *ngSwitchCase=\"'integer'\"\r\n        [schema]=\"asTypedInteger\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-null\r\n        *ngSwitchDefault\r\n        [schema]=\"asTypedNull\"\r\n        [description]=\"description\"\r\n      />\r\n    <ng-container>\r\n  `,\r\n})\r\nexport class RenderProvidedTypeComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n  @Input({ required: true }) type!: TypeValues;\r\n  @Input() nullable?: boolean;\r\n\r\n  get description(): string | undefined {\r\n    return this.schema.description;\r\n  }\r\n\r\n  get asTypedArray() : JSONSchemaNS.Array {\r\n    return this.schema as JSONSchemaNS.Array;\r\n  }\r\n\r\n  get asTypedObject(): JSONSchemaNS.Object {\r\n    return this.schema as JSONSchemaNS.Object;\r\n  }\r\n\r\n  get asTypedString(): JSONSchemaNS.String {\r\n    return this.schema as JSONSchemaNS.String;\r\n  }\r\n\r\n  get asTypedBoolean(): JSONSchemaNS.Boolean {\r\n    return this.schema as JSONSchemaNS.Boolean;\r\n  }\r\n\r\n  get asTypedNumber(): JSONSchemaNS.Number {\r\n    return this.schema as JSONSchemaNS.Number;\r\n  }\r\n\r\n  get asTypedInteger(): JSONSchemaNS.Integer {\r\n    return this.schema as JSONSchemaNS.Integer;\r\n  }\r\n\r\n  get asTypedNull(): JSONSchemaNS.Null {\r\n    return this.schema as JSONSchemaNS.Null;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 79
                    }
                },
                "asTypedArray": {
                    "name": "asTypedArray",
                    "getSignature": {
                        "name": "asTypedArray",
                        "type": "",
                        "returnType": "JSONSchemaNS.Array",
                        "line": 83
                    }
                },
                "asTypedObject": {
                    "name": "asTypedObject",
                    "getSignature": {
                        "name": "asTypedObject",
                        "type": "",
                        "returnType": "JSONSchemaNS.Object",
                        "line": 87
                    }
                },
                "asTypedString": {
                    "name": "asTypedString",
                    "getSignature": {
                        "name": "asTypedString",
                        "type": "",
                        "returnType": "JSONSchemaNS.String",
                        "line": 91
                    }
                },
                "asTypedBoolean": {
                    "name": "asTypedBoolean",
                    "getSignature": {
                        "name": "asTypedBoolean",
                        "type": "",
                        "returnType": "JSONSchemaNS.Boolean",
                        "line": 95
                    }
                },
                "asTypedNumber": {
                    "name": "asTypedNumber",
                    "getSignature": {
                        "name": "asTypedNumber",
                        "type": "",
                        "returnType": "JSONSchemaNS.Number",
                        "line": 99
                    }
                },
                "asTypedInteger": {
                    "name": "asTypedInteger",
                    "getSignature": {
                        "name": "asTypedInteger",
                        "type": "",
                        "returnType": "JSONSchemaNS.Integer",
                        "line": 103
                    }
                },
                "asTypedNull": {
                    "name": "asTypedNull",
                    "getSignature": {
                        "name": "asTypedNull",
                        "type": "",
                        "returnType": "JSONSchemaNS.Null",
                        "line": 107
                    }
                }
            }
        },
        {
            "name": "RequiredLabelComponent",
            "id": "component-RequiredLabelComponent-d178a2f4d207458409990cddf19fede513d2c963ea2584ea110c4c62f31fbb67f95a070beb59cc7ae41f6106563317e8a856e5ab4468144427584260a13c8841",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/Required/required-label.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-required",
            "styleUrls": [
                "./required-label.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./required-label.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-required',\r\n  standalone: true,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: './required-label.component.html',\r\n  styleUrls: ['./required-label.component.css']\r\n})\r\nexport class RequiredLabelComponent { }\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".required {\r\n    font-size: 90%;\r\n    color: #fa383e;\r\n    margin-right: 4px;\r\n}",
                    "styleUrl": "./required-label.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<strong class=\"required\">\r\n    required\r\n</strong>  "
        },
        {
            "name": "SchemaCompositionComponent",
            "id": "component-SchemaCompositionComponent-6b6d9a582be159c2ba7218b566dd53cc16f014937934940685241aad7b2cdd835ddb603bba7cd4456e30ea588b3d16585f4b91d134e7accec3de9aaa17c749be",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/index.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-composition",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"schema.oneOf\">\n  <jse-schema-composition-one-of [schema]=\"schema\" />\n</ng-container>\n<ng-container *ngIf=\"schema.anyOf\">\n  <jse-schema-composition-any-of [schema]=\"schema\" />\n</ng-container>\n<ng-container *ngIf=\"schema.allOf\">\n  <jse-schema-composition-all-of [schema]=\"schema\" />\n</ng-container>\n<ng-container *ngIf=\"schema.not\">\n  <jse-schema-composition-not [schema]=\"schema\" />\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 47,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AllOfSchemaComponent",
                    "type": "component"
                },
                {
                    "name": "AnyOfSchemaComponent",
                    "type": "component"
                },
                {
                    "name": "NotSchemaComponent",
                    "type": "component"
                },
                {
                    "name": "OneOfSchemaComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport { AllOfSchemaComponent } from \"./all-of\";\r\nimport { AnyOfSchemaComponent } from \"./any-of\";\r\nimport { NotSchemaComponent } from \"./not\";\r\nimport { OneOfSchemaComponent } from \"./one-of\";\r\n\r\nexport {\r\n  AllOfSchemaComponent,\r\n  AnyOfSchemaComponent,\r\n  NotSchemaComponent,\r\n  OneOfSchemaComponent\r\n}\r\n\r\nimport type {\r\n    JSONSchema\r\n} from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-composition',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    AllOfSchemaComponent,\r\n    AnyOfSchemaComponent,\r\n    NotSchemaComponent,\r\n    OneOfSchemaComponent\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ng-container *ngIf=\"schema.oneOf\">\r\n      <jse-schema-composition-one-of [schema]=\"schema\" />\r\n    </ng-container>\r\n    <ng-container *ngIf=\"schema.anyOf\">\r\n      <jse-schema-composition-any-of [schema]=\"schema\" />\r\n    </ng-container>\r\n    <ng-container *ngIf=\"schema.allOf\">\r\n      <jse-schema-composition-all-of [schema]=\"schema\" />\r\n    </ng-container>\r\n    <ng-container *ngIf=\"schema.not\">\r\n      <jse-schema-composition-not [schema]=\"schema\" />\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class SchemaCompositionComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "SchemaConditionalComponent",
            "id": "component-SchemaConditionalComponent-b50ca15f17a01f1236bef238f353483d12a526f5aeaebe7174696982113358789c82282b329120ea061b94bdadfa63557f5cf54243c88d03a1c0af7f96999a52",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/index.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-conditional",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-accordion>\n    <mat-expansion-panel>\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                {{ schemaConditionalLabel }}\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <ng-template matExpansionPanelContent>\n          <!-- Handles if-then-else case -->\n          <ng-container *ngIf=\"isIfThenElse\">\n            <jse-schema-conditional-if-else-then [schema]=\"schema\" />\n          </ng-container>\n          <!-- Handles dependentRequired case -->\n          <ng-container *ngIf=\"isDependentRequired\">\n            <jse-schema-conditional-dependent-required [schema]=\"dependentRequired\" />\n          </ng-container>\n          <!-- Handles dependentSchemas case -->\n          <ng-container *ngIf=\"isDependentSchemas\">\n            <jse-schema-conditional-dependent-schemas [schema]=\"dependentSchemas\" />\n          </ng-container>\n          <!-- Handles dependencies (deprecated) -->\n          <ng-container *ngIf=\"isDependencies\">\n            <jse-schema-conditional-dependencies [schema]=\"dependencies\" />\n          </ng-container>\n        </ng-template>\n    </mat-expansion-panel>\n</mat-accordion>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 62,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "IfElseThenComponent",
                    "type": "component"
                },
                {
                    "name": "DependentRequiredComponent",
                    "type": "component"
                },
                {
                    "name": "DependentSchemasComponent",
                    "type": "component"
                },
                {
                    "name": "DependenciesComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\n\r\nimport { IfElseThenComponent } from \"./if-else-then\";\r\nimport { DependentRequiredComponent } from \"./dependent-required\";\r\nimport { DependentSchemasComponent } from \"./dependent-schemas\";\r\nimport { DependenciesComponent } from \"./dependencies\";\r\n\r\nexport {\r\n  IfElseThenComponent,\r\n  DependentRequiredComponent,\r\n  DependentSchemasComponent,\r\n  DependenciesComponent\r\n}\r\n\r\nimport type { JSONSchema, JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-conditional',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    MatExpansionModule,\r\n    IfElseThenComponent,\r\n    DependentRequiredComponent,\r\n    DependentSchemasComponent,\r\n    DependenciesComponent\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <mat-accordion>\r\n        <mat-expansion-panel>\r\n            <mat-expansion-panel-header>\r\n                <mat-panel-title>\r\n                    {{ schemaConditionalLabel }}\r\n                </mat-panel-title>\r\n            </mat-expansion-panel-header>\r\n            <ng-template matExpansionPanelContent>\r\n              <!-- Handles if-then-else case -->\r\n              <ng-container *ngIf=\"isIfThenElse\">\r\n                <jse-schema-conditional-if-else-then [schema]=\"schema\" />\r\n              </ng-container>\r\n              <!-- Handles dependentRequired case -->\r\n              <ng-container *ngIf=\"isDependentRequired\">\r\n                <jse-schema-conditional-dependent-required [schema]=\"dependentRequired\" />\r\n              </ng-container>\r\n              <!-- Handles dependentSchemas case -->\r\n              <ng-container *ngIf=\"isDependentSchemas\">\r\n                <jse-schema-conditional-dependent-schemas [schema]=\"dependentSchemas\" />\r\n              </ng-container>\r\n              <!-- Handles dependencies (deprecated) -->\r\n              <ng-container *ngIf=\"isDependencies\">\r\n                <jse-schema-conditional-dependencies [schema]=\"dependencies\" />\r\n              </ng-container>\r\n            </ng-template>\r\n        </mat-expansion-panel>\r\n    </mat-accordion>\r\n  `,\r\n})\r\nexport class SchemaConditionalComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get isIfThenElse(): boolean {\r\n    return this.schema.if !== undefined;\r\n  }\r\n\r\n  get dependentRequired() : Record<string, string[] | readonly string[]> {\r\n    return (this.schema as JSONSchemaNS.Object).dependentRequired!;\r\n  }\r\n\r\n  get isDependentRequired(): boolean {\r\n    return (this.schema as JSONSchemaNS.Object).dependentRequired !== undefined;\r\n  }\r\n\r\n  get dependentSchemas() : Record<string, JSONSchema> {\r\n    return (this.schema as JSONSchemaNS.Object).dependentSchemas!;\r\n  }\r\n\r\n  get isDependentSchemas(): boolean {\r\n    return (this.schema as JSONSchemaNS.Object).dependentSchemas !== undefined;\r\n  }\r\n\r\n  get dependencies() {\r\n    return this.schema.dependencies!;\r\n  }\r\n\r\n  get isDependencies(): boolean {\r\n    return this.schema.dependencies !== undefined;\r\n  }\r\n\r\n  get schemaConditionalLabel(): string {\r\n    return \"Conditional subschemas\";\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "isIfThenElse": {
                    "name": "isIfThenElse",
                    "getSignature": {
                        "name": "isIfThenElse",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 64
                    }
                },
                "dependentRequired": {
                    "name": "dependentRequired",
                    "getSignature": {
                        "name": "dependentRequired",
                        "type": "",
                        "returnType": "Record<string, [] | >",
                        "line": 68
                    }
                },
                "isDependentRequired": {
                    "name": "isDependentRequired",
                    "getSignature": {
                        "name": "isDependentRequired",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 72
                    }
                },
                "dependentSchemas": {
                    "name": "dependentSchemas",
                    "getSignature": {
                        "name": "dependentSchemas",
                        "type": "",
                        "returnType": "Record<string, JSONSchema>",
                        "line": 76
                    }
                },
                "isDependentSchemas": {
                    "name": "isDependentSchemas",
                    "getSignature": {
                        "name": "isDependentSchemas",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 80
                    }
                },
                "dependencies": {
                    "name": "dependencies",
                    "getSignature": {
                        "name": "dependencies",
                        "type": "",
                        "returnType": "",
                        "line": 84
                    }
                },
                "isDependencies": {
                    "name": "isDependencies",
                    "getSignature": {
                        "name": "isDependencies",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 88
                    }
                },
                "schemaConditionalLabel": {
                    "name": "schemaConditionalLabel",
                    "getSignature": {
                        "name": "schemaConditionalLabel",
                        "type": "string",
                        "returnType": "string",
                        "line": 92
                    }
                }
            }
        },
        {
            "name": "StringLabelComponent",
            "id": "component-StringLabelComponent-7b6530e51680c885719041569bd18d5f41bd4b13faaa4e202be4a3b7dd8fd92b624b1c68f5be236bd9e1d605d0346dff2d68f7690f3511ef681548b2f89f13ac",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/string-label.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-string",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  string\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-string',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      string\r\n    </span>\r\n  `,\r\n})\r\nexport class StringLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StringLengthComponent",
            "id": "component-StringLengthComponent-ccedae485b0bf5a2962dca940888bc19ae3c066146e2e5ca72ca4a2b860ad2dab8462264c4ba8b0fb241147cbd2c540e7bb65cddc4c3058b1b982288e484ba9c",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/string-length.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-string-length",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ lengthLabel }}</strong>&nbsp;\n  <ng-container *ngIf=\"schema.minLength !== undefined\">\n    <code>{{ '>= ' + schema.minLength + ' character(s)' }}</code>\n  </ng-container>\n  <ng-container *ngIf=\"minAndMaxLength\">\n    <span>&nbsp;&&nbsp;</span>\n  </ng-container>\n  <ng-container *ngIf=\"schema.maxLength !== undefined\">\n    <code>{{ '<= ' + schema.maxLength + ' character(s)' }}</code>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 27,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "lengthLabel",
                    "defaultValue": "'Length :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-string-length',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      <strong>{{ lengthLabel }}</strong>&nbsp;\r\n      <ng-container *ngIf=\"schema.minLength !== undefined\">\r\n        <code>{{ '>= ' + schema.minLength + ' character(s)' }}</code>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"minAndMaxLength\">\r\n        <span>&nbsp;&&nbsp;</span>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"schema.maxLength !== undefined\">\r\n        <code>{{ '<= ' + schema.maxLength + ' character(s)' }}</code>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class StringLengthComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  lengthLabel = 'Length :';\r\n  \r\n  get minAndMaxLength(): boolean {\r\n    return this.schema.minLength !== undefined && this.schema.maxLength !== undefined;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "minAndMaxLength": {
                    "name": "minAndMaxLength",
                    "getSignature": {
                        "name": "minAndMaxLength",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 31
                    }
                }
            }
        },
        {
            "name": "ThenLabelComponent",
            "id": "component-ThenLabelComponent-9f00051e4744cc3aebd9d261eb6f61f93b26241575c4d2e395b612f430366d21b01d2d2fd7e8d4527eb8406aeba157a19857fd6091245119e9b68c013eb32623",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/then-label.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-then",
            "styleUrls": [],
            "styles": [],
            "template": "<strong>\n    Then\n</strong>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-then',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <strong>\r\n        Then\r\n    </strong>\r\n  `,\r\n})\r\nexport class ThenLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TrueLabelComponent",
            "id": "component-TrueLabelComponent-2c817b11f4512c321f4f255cdaa2e8940f58190ad8d3563ae00ce526bf4376cfe9fbb1abac90da300e6b5a6732d2af1d4c503b83e5107f11ba626138012c60ec",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/true-label.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-true",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  any\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-true',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      any\r\n    </span>\r\n  `,\r\n})\r\nexport class TrueLabelComponent {}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TypeLabelComponent",
            "id": "component-TypeLabelComponent-e27755f9d01aae6bd9d3e1018330ede9d6579ea7d6684b52772a99019fe025d48ad80a7223ef5aad20b533bb63bf8582bb31b85a32e1df5bc87aff93085e9905",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/type-label.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-type",
            "styleUrls": [],
            "styles": [],
            "template": "<strong>\n  type\n</strong>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-type',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <strong>\r\n      type\r\n    </strong>\r\n  `,\r\n})\r\nexport class TypeLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TypeLabelSwitchComponent",
            "id": "component-TypeLabelSwitchComponent-ae03f71894e38435506fd1539cf09dc619ae4907b645029248b0e93500a6f837bd8546708d4c372f4d5b5dafa2a9bc4dc980adbf4352302fd7c4598e24138ce5",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/type-label-switch.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jsv-type-label-switch",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container [ngSwitch]=\"type\">\n  <ng-container *ngSwitchCase=\"'string'\">\n    <labels-string />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'number'\">\n    <labels-number />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'boolean'\">\n    <labels-boolean />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'object'\">\n    <labels-object />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'array'\">\n    <labels-array />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'integer'\">\n    <labels-integer />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'null'\">\n    <labels-null />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"true\">\n    <labels-true />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"false\">\n    <labels-false />\n  </ng-container>\n  <ng-container *ngSwitchDefault>\n    <span style=\"opacity: 0.6\">{{ type }}</span>\n  </ng-container>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 70,
                    "type": "TypeValues |  |  | string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "StringLabelComponent",
                    "type": "component"
                },
                {
                    "name": "NumberLabelComponent",
                    "type": "component"
                },
                {
                    "name": "BooleanLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ObjectLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ArrayLabelComponent",
                    "type": "component"
                },
                {
                    "name": "IntegerLabelComponent",
                    "type": "component"
                },
                {
                    "name": "NullLabelComponent",
                    "type": "component"
                },
                {
                    "name": "TrueLabelComponent",
                    "type": "component"
                },
                {
                    "name": "FalseLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    StringLabelComponent,\r\n    NumberLabelComponent,\r\n    BooleanLabelComponent,\r\n    ObjectLabelComponent,\r\n    ArrayLabelComponent,\r\n    IntegerLabelComponent,\r\n    NullLabelComponent,\r\n    TrueLabelComponent,\r\n    FalseLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport type { TypeValues } from \"../types\"\r\n\r\n@Component({\r\n  selector: 'jsv-type-label-switch',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    StringLabelComponent,\r\n    NumberLabelComponent,\r\n    BooleanLabelComponent,\r\n    ObjectLabelComponent,\r\n    ArrayLabelComponent,\r\n    IntegerLabelComponent,\r\n    NullLabelComponent,\r\n    TrueLabelComponent,\r\n    FalseLabelComponent\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ng-container [ngSwitch]=\"type\">\r\n      <ng-container *ngSwitchCase=\"'string'\">\r\n        <labels-string />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'number'\">\r\n        <labels-number />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'boolean'\">\r\n        <labels-boolean />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'object'\">\r\n        <labels-object />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'array'\">\r\n        <labels-array />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'integer'\">\r\n        <labels-integer />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'null'\">\r\n        <labels-null />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"true\">\r\n        <labels-true />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"false\">\r\n        <labels-false />\r\n      </ng-container>\r\n      <ng-container *ngSwitchDefault>\r\n        <span style=\"opacity: 0.6\">{{ type }}</span>\r\n      </ng-container>\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class TypeLabelSwitchComponent {\r\n  @Input({ required: true }) type!: TypeValues | true | false | string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "WriteOnlyComponent",
            "id": "component-WriteOnlyComponent-613078c1a5019617977eb12b416c3be48adfcb2f48009ae8380ff14a24378d4200bb9a97b3bd933e42d8d5578bc6df6a86c6eb77f132b126c0126c524b6d79c8",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/writeOnly.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-write-only",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  🚨&nbsp;\n  <strong>{{ writeOnlyLabel }}</strong>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "writeOnlyLabel",
                    "defaultValue": "'write only'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-write-only',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div>\r\n      🚨&nbsp;\r\n      <strong>{{ writeOnlyLabel }}</strong>\r\n    </div>\r\n  `,\r\n})\r\nexport class WriteOnlyComponent {\r\n  writeOnlyLabel = 'write only';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "WriteOnlyLabelComponent",
            "id": "component-WriteOnlyLabelComponent-955c69f51a1499d031a5da21c3992d90d926806fcce7e41b9719632cad861d32e698332f77095e498114ccd5e67034618fcfdb6e2a4964e1193e784560d63205",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/WriteOnly/write-only-label.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-write-only",
            "styleUrls": [
                "./write-only-label.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./write-only-label.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-write-only',\r\n  standalone: true,\r\n  imports: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: './write-only-label.component.html',\r\n  styleUrls: ['./write-only-label.component.css']\r\n})\r\nexport class WriteOnlyLabelComponent { }",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".writeOnly {\r\n    font-size: 90%;\r\n    color: #2d66c3;\r\n    margin-right: 4px;\r\n}",
                    "styleUrl": "./write-only-label.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<strong class=\"writeOnly\">\r\n    writeOnly\r\n</strong>\r\n  "
        },
        {
            "name": "XorLabelComponent",
            "id": "component-XorLabelComponent-8e7545c345aa2b217f5360f21561ff3545c47503c8045761dde9e48997f8bd69cc952876dc570fb57ee9287e4478c6090e302efb67d3d39ec7d3fda9898e3e8d",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/xor-label.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-xor",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n<strong>XOR</strong>\n<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n\n<ng-template #spaceTemplate>\n  &nbsp;\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgTemplateOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-xor',\r\n  standalone: true,\r\n  imports: [\r\n    NgTemplateOutlet\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n    <strong>XOR</strong>\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n\r\n    <ng-template #spaceTemplate>\r\n      &nbsp;\r\n    </ng-template>\r\n  `,\r\n})\r\nexport class XorLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "AdditionalItems1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"❌ AdditionalItems (1)\",\r\n  schema: {\r\n      \"type\": \"array\",\r\n      \"items\": [\r\n        {\r\n          \"type\": \"integer\"\r\n        },\r\n        {\r\n          \"type\": \"string\"\r\n        }\r\n      ],\r\n      \"additionalItems\": false\r\n  }\r\n})"
            },
            {
                "name": "AdditionalItems2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"➕ AdditionalItems (2)\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"items\": [\r\n      {\r\n        \"type\": \"integer\"\r\n      },\r\n      {\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"additionalItems\": {\r\n      \"type\": \"boolean\"\r\n    }\r\n  }\r\n})"
            },
            {
                "name": "AdditionalProperties1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🗝️ AdditionalProperties (1)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        },\r\n        \"additionalProperties\": false\r\n    }\r\n})"
            },
            {
                "name": "AdditionalProperties2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🛠️ AdditionalProperties (2)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        },\r\n        \"additionalProperties\": {\r\n          \"type\": \"string\"\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "AdditionalPropertiesWithPatternProperties",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌈 AdditionalProperties with patternProperties\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"builtin\": {\r\n            \"type\": \"number\"\r\n          }\r\n        },\r\n        \"patternProperties\": {\r\n          \"^S_\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"^I_\": {\r\n            \"type\": \"integer\"\r\n          }\r\n        },\r\n        \"additionalProperties\": {\r\n          \"type\": \"string\"\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "allOf",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🤝 allOf\",\r\n    schema: {\r\n        \"allOf\": [\r\n          {\r\n            \"title\": \"Option 1\",\r\n            \"type\": \"string\"\r\n          },\r\n          {\r\n            \"title\": \"Option 2\",\r\n            \"maxLength\": 5\r\n          }\r\n        ]\r\n      }\r\n})"
            },
            {
                "name": "Annotations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"📌 Annotations\",\r\n    schema: {\r\n        \"title\": \"Match anything\",\r\n        \"description\": \"This is a *schema* that matches **anything.**\",\r\n        \"default\": \"Default value\",\r\n        \"examples\": [\r\n          \"Anything\",\r\n          4035\r\n        ],\r\n        \"deprecated\": true,\r\n        \"readOnly\": true,\r\n        \"writeOnly\": false\r\n    },\r\n    viewerOptions: {\r\n        showExamples: true\r\n    }\r\n  })"
            },
            {
                "name": "anyOf",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌐 anyOf\",\r\n    schema: {\r\n        \"anyOf\": [\r\n          {\r\n            \"title\": \"Option 1\",\r\n            \"type\": \"string\",\r\n            \"maxLength\": 5\r\n          },\r\n          {\r\n            \"title\": \"Option 2\",\r\n            \"type\": \"number\",\r\n            \"minimum\": 0\r\n          }\r\n        ]\r\n      }\r\n})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🟦 Basic\",\r\n    schema: {\r\n        \"type\": \"string\"\r\n      }\r\n})"
            },
            {
                "name": "Booleans",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Boolean.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"✅ Boolean\",\r\n    schema: {\r\n        \"type\": \"boolean\"\r\n    }\r\n})"
            },
            {
                "name": "Const",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🧊 Const\",\r\n    schema: {\r\n        \"properties\": {\r\n          \"country\": {\r\n            \"const\": \"United States of America\"\r\n          }\r\n        }\r\n    }\r\n})"
            },
            {
                "name": "Contains",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"🍱 Contains\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"contains\": {\r\n      \"type\": \"number\"\r\n    }\r\n  }\r\n})"
            },
            {
                "name": "ContentEncoding",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"📜 ContentEncoding\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"contentEncoding\": \"base64\"\r\n      }\r\n})"
            },
            {
                "name": "ContentEncodingAndContentMediaType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"📄 ContentEncoding & ContentMediaType\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"contentEncoding\": \"base64\",\r\n        \"contentMediaType\": \"application/json\"\r\n    }\r\n})"
            },
            {
                "name": "ContentMediaType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔖 ContentMediaType\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"contentMediaType\": \"application/json\"\r\n      }\r\n})"
            },
            {
                "name": "ContentSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"📑 ContentSchema\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"contentSchema\": {\r\n          \"type\": \"object\",\r\n          \"required\": [\r\n            \"name\",\r\n            \"age\"\r\n          ]\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "defaultMeta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<NgxJsonSchemaViewerComponent>",
                "defaultValue": "{\r\n    decorators: [\r\n        moduleMetadata({\r\n            imports: [NgxJsonSchemaViewerComponent],\r\n        }),\r\n        applicationConfig({\r\n            providers: [\r\n                // BrowserAnimationsModule\r\n                provideAnimations(),\r\n                // HighlightModule \r\n                {\r\n                    provide: HIGHLIGHT_OPTIONS,\r\n                    useValue: {\r\n                        coreLibraryLoader: () => import('highlight.js/lib/core'),\r\n                        languages: {\r\n                            json: () => import('highlight.js/lib/languages/json'),\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n        })\r\n    ]\r\n}"
            },
            {
                "name": "dependentRequired1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🤞 dependencies (dependentRequired)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"billing_address\": {\r\n            \"type\": \"string\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependencies\": {\r\n          \"credit_card\": [\r\n            \"billing_address\"\r\n          ]\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "dependentRequired2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔑 dependentRequired\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"billing_address\": {\r\n            \"type\": \"string\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependentRequired\": {\r\n          \"credit_card\": [\r\n            \"billing_address\"\r\n          ]\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "dependentRequired3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔁 dependentRequired (bidirectional)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"billing_address\": {\r\n            \"type\": \"string\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependentRequired\": {\r\n          \"credit_card\": [\r\n            \"billing_address\"\r\n          ],\r\n          \"billing_address\": [\r\n            \"credit_card\"\r\n          ]\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "dependentSchemas",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🏗️ dependentSchemas\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependentSchemas\": {\r\n          \"credit_card\": {\r\n            \"properties\": {\r\n              \"billing_address\": {\r\n                \"type\": \"string\"\r\n              }\r\n            },\r\n            \"required\": [\r\n              \"billing_address\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "dependentSchemas1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌳 dependencies (dependentSchemas)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependencies\": {\r\n          \"credit_card\": {\r\n            \"properties\": {\r\n              \"billing_address\": {\r\n                \"type\": \"string\"\r\n              }\r\n            },\r\n            \"required\": [\r\n              \"billing_address\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "Enum",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔒 Enum\",\r\n    schema: {\r\n        \"enum\": [\r\n          \"red\",\r\n          \"amber\",\r\n          \"green\"\r\n        ]\r\n    }\r\n})"
            },
            {
                "name": "Format",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"📅 Format\",\r\n    schema: {\r\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"prop1\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"date-time\",\r\n            \"examples\": [\r\n              \"2018-11-13T20:20:39+00:00\"\r\n            ]\r\n          },\r\n          \"prop2\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"time\",\r\n            \"examples\": [\r\n              \"20:20:39+00:00\"\r\n            ]\r\n          },\r\n          \"prop3\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"date\",\r\n            \"examples\": [\r\n              \"2018-11-13\"\r\n            ]\r\n          },\r\n          \"prop4\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"duration\",\r\n            \"examples\": [\r\n              \"P3D\"\r\n            ]\r\n          },\r\n          \"prop5\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"email\",\r\n            \"examples\": [\r\n              \"test@gmail.com\"\r\n            ]\r\n          },\r\n          \"prop6\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"idn-email\",\r\n            \"examples\": [\r\n              \"test@gmail.com\"\r\n            ]\r\n          },\r\n          \"prop7\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"hostname\",\r\n            \"examples\": [\r\n              \"example\"\r\n            ]\r\n          },\r\n          \"prop8\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"idn-hostname\",\r\n            \"examples\": [\r\n              \"example\"\r\n            ]\r\n          },\r\n          \"prop9\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"ipv4\",\r\n            \"examples\": [\r\n              \"192.168.1.1\"\r\n            ]\r\n          },\r\n          \"prop10\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"ipv6\",\r\n            \"examples\": [\r\n              \"2001:db8:3333:4444:5555:6666:7777:8888\"\r\n            ]\r\n          },\r\n          \"prop11\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uuid\",\r\n            \"examples\": [\r\n              \"3e4666bf-d5e5-4aa7-b8ce-cefe41c7568a\"\r\n            ]\r\n          },\r\n          \"prop12\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uri\",\r\n            \"examples\": [\r\n              \"https://www.perdu.com/\"\r\n            ]\r\n          },\r\n          \"prop12B\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uri-reference\"\r\n          },\r\n          \"prop13\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"iri\",\r\n            \"examples\": [\r\n              \"https://www.perdu.com/\"\r\n            ]\r\n          },\r\n          \"prop13B\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"iri-reference\"\r\n          },\r\n          \"prop14\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uri-template\"\r\n          },\r\n          \"prop15\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"json-pointer\"\r\n          },\r\n          \"prop16\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"relative-json-pointer\"\r\n          },\r\n          \"prop17\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"regex\",\r\n            \"examples\": [\r\n              \"^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "IfThenElse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🎬 If-Then-Else\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"street_address\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"country\": {\r\n            \"default\": \"United States of America\",\r\n            \"enum\": [\r\n              \"United States of America\",\r\n              \"Canada\"\r\n            ]\r\n          }\r\n        },\r\n        \"if\": {\r\n          \"properties\": {\r\n            \"country\": {\r\n              \"const\": \"United States of America\"\r\n            }\r\n          }\r\n        },\r\n        \"then\": {\r\n          \"properties\": {\r\n            \"postal_code\": {\r\n              \"pattern\": \"[0-9]{5}(-[0-9]{4})?\"\r\n            }\r\n          }\r\n        },\r\n        \"else\": {\r\n          \"properties\": {\r\n            \"postal_code\": {\r\n              \"pattern\": \"[A-Z][0-9][A-Z] [0-9][A-Z][0-9]\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "IfThenElse2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔀 If-Then-Else (multiple)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"street_address\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"country\": {\r\n            \"default\": \"United States of America\",\r\n            \"enum\": [\r\n              \"United States of America\",\r\n              \"Canada\",\r\n              \"Netherlands\"\r\n            ]\r\n          }\r\n        },\r\n        \"allOf\": [\r\n          {\r\n            \"title\": \"Rule 1\",\r\n            \"if\": {\r\n              \"properties\": {\r\n                \"country\": {\r\n                  \"const\": \"United States of America\"\r\n                }\r\n              }\r\n            },\r\n            \"then\": {\r\n              \"properties\": {\r\n                \"postal_code\": {\r\n                  \"pattern\": \"[0-9]{5}(-[0-9]{4})?\"\r\n                }\r\n              }\r\n            }\r\n          },\r\n          {\r\n            \"title\": \"Rule 2\",\r\n            \"if\": {\r\n              \"properties\": {\r\n                \"country\": {\r\n                  \"const\": \"Canada\"\r\n                }\r\n              },\r\n              \"required\": [\r\n                \"country\"\r\n              ]\r\n            },\r\n            \"then\": {\r\n              \"properties\": {\r\n                \"postal_code\": {\r\n                  \"pattern\": \"[A-Z][0-9][A-Z] [0-9][A-Z][0-9]\"\r\n                }\r\n              }\r\n            }\r\n          },\r\n          {\r\n            \"title\": \"Rule 3\",\r\n            \"if\": {\r\n              \"properties\": {\r\n                \"country\": {\r\n                  \"const\": \"Netherlands\"\r\n                }\r\n              },\r\n              \"required\": [\r\n                \"country\"\r\n              ]\r\n            },\r\n            \"then\": {\r\n              \"properties\": {\r\n                \"postal_code\": {\r\n                  \"pattern\": \"[0-9]{4} [A-Z]{2}\"\r\n                }\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      }\r\n})"
            },
            {
                "name": "Integer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"1️⃣ Integer\",\r\n    schema: {\r\n        \"type\": \"integer\"\r\n    }\r\n})"
            },
            {
                "name": "isArrayType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"array\" ||\r\n      schema.items !== undefined ||\r\n      schema.minItems !== undefined ||\r\n      schema.maxItems !== undefined ||\r\n      schema.additionalItems !== undefined ||\r\n      schema.contains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).minContains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).maxContains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).prefixItems !== undefined ||\r\n      (schema as JSONSchemaNS.Array).unevaluatedItems !== undefined ||\r\n      Array.isArray(schema.const) ||\r\n      schema.enum?.some((s) => Array.isArray(s)))"
            },
            {
                "name": "isBoolean",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"boolean\" ||\r\n      schema.enum?.some((val) => typeof val === \"boolean\") ||\r\n      typeof schema.const === \"boolean\")"
            },
            {
                "name": "isInteger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"integer\" ||\r\n      schema.multipleOf === 1 ||\r\n      schema.enum?.some((val) => typeof val === \"bigint\") ||\r\n      typeof schema.const === \"bigint\")"
            },
            {
                "name": "isNull",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"null\" ||\r\n      schema.enum?.some((val) => val === null) ||\r\n      schema.const === null)"
            },
            {
                "name": "isNumeric",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"number\" ||\r\n      schema.multipleOf !== undefined ||\r\n      schema.minimum !== undefined ||\r\n      schema.exclusiveMinimum !== undefined ||\r\n      schema.maximum !== undefined ||\r\n      schema.exclusiveMaximum !== undefined ||\r\n      schema.enum?.some((val) => typeof val === \"number\") ||\r\n      typeof schema.const === \"number\")"
            },
            {
                "name": "isObjectType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"object\" ||\r\n      schema.properties !== undefined ||\r\n      schema.additionalProperties !== undefined ||\r\n      schema.patternProperties !== undefined ||\r\n      schema.propertyNames !== undefined ||\r\n      schema.minProperties !== undefined ||\r\n      schema.maxProperties !== undefined ||\r\n      schema.required !== undefined ||\r\n      (schema as JSONSchemaNS.Object).unevaluatedProperties !== undefined)"
            },
            {
                "name": "isSchemaComposition",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.allOf !== undefined ||\r\n      schema.anyOf !== undefined ||\r\n      schema.oneOf !== undefined ||\r\n      schema.not !== undefined)"
            },
            {
                "name": "isSchemaConditional",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.if !== undefined ||\r\n      schema.dependencies !== undefined ||\r\n      (schema as JSONSchemaNS.Object).dependentRequired !== undefined ||\r\n      (schema as JSONSchemaNS.Object).dependentSchemas !== undefined)"
            },
            {
                "name": "isStringType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"string\" ||\r\n      schema.minLength !== undefined ||\r\n      schema.maxLength !== undefined ||\r\n      schema.pattern !== undefined ||\r\n      schema.enum?.some((val) => typeof val === \"string\") ||\r\n      typeof schema.const === \"string\")"
            },
            {
                "name": "Items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"🛍️ Items\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"items\": {\r\n      \"type\": \"number\"\r\n    }\r\n  }\r\n})"
            },
            {
                "name": "Length",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"📐 Length\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"minItems\": 2,\r\n    \"maxItems\": 3\r\n  }\r\n})"
            },
            {
                "name": "Length",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"📏 Length\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"minLength\": 2,\r\n        \"maxLength\": 3\r\n      }\r\n})"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Array\"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Boolean.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Boolean\"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Generic keywords\"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Null.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Null\"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Numeric \"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Object\"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Schema Composition\"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Schema Conditionally\"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/String\"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Type\"\r\n}"
            },
            {
                "name": "minContainsAndmaxContains",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"📊 minContains & maxContains\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"contains\": {\r\n      \"type\": \"number\"\r\n    },\r\n    \"minContains\": 2,\r\n    \"maxContains\": 3\r\n  }\r\n})"
            },
            {
                "name": "MultipleOf",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"✖️ Multiple Of\",\r\n    schema: {\r\n        \"type\": \"number\",\r\n        \"multipleOf\": 10\r\n    }\r\n})"
            },
            {
                "name": "MultipleTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🐾 Multiple types\",\r\n    schema: {\r\n        \"type\": [\r\n          \"number\",\r\n          \"string\"\r\n        ]\r\n      }\r\n})"
            },
            {
                "name": "not",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🚫 not\",\r\n    schema: {\r\n        \"title\": \"Not a string\",\r\n        \"not\": {\r\n            \"type\": \"string\"\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "Null",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Null.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🕳️ Null\",\r\n    schema: {\r\n        \"type\": \"null\"\r\n    }\r\n  })"
            },
            {
                "name": "Number",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔢 Number\",\r\n    schema: {\r\n        \"type\": \"number\"\r\n    }\r\n})"
            },
            {
                "name": "oneOf",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🎯 oneOf\",\r\n    schema: {\r\n        \"oneOf\": [\r\n          {\r\n            \"title\": \"Option 1\",\r\n            \"type\": \"number\",\r\n            \"multipleOf\": 5\r\n          },\r\n          {\r\n            \"title\": \"Option 2\",\r\n            \"type\": \"number\",\r\n            \"multipleOf\": 3\r\n          }\r\n        ]\r\n      }\r\n})"
            },
            {
                "name": "Pattern",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔮 Pattern\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"pattern\": \"^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$\"\r\n      }\r\n})"
            },
            {
                "name": "PatternProperties",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🎨 PatternProperties\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"patternProperties\": {\r\n          \"^S_\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"^I_\": {\r\n            \"type\": \"integer\"\r\n          }\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\r\n  parameters: {\r\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/,\r\n      },\r\n    },\r\n    docs: {\r\n      theme: themes.dark,\r\n    }\r\n  },\r\n  decorators: [\r\n    // https://material.angular.io/guide/theming#application-background-color\r\n    componentWrapperDecorator((story) => `<div class=\"mat-app-background\">${story}</div>`),\r\n  ]\r\n}"
            },
            {
                "name": "Properties",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"📝 Properties\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "PropertyNames",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🏷️ PropertyNames\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"propertyNames\": {\r\n          \"pattern\": \"^[A-Za-z_][A-Za-z0-9_]*$\"\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "Ranges",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌡️ Ranges\",\r\n    schema: {\r\n        \"type\": \"number\",\r\n        \"minimum\": 0,\r\n        \"exclusiveMaximum\": 100\r\n    }\r\n})"
            },
            {
                "name": "Required",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔴 Required\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"id\": {\r\n            \"type\": \"number\",\r\n            \"readOnly\": true\r\n          },\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"email\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"address\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"telephone\": {\r\n            \"type\": \"string\",\r\n            \"deprecated\": true\r\n          },\r\n          \"password\": {\r\n            \"type\": \"string\",\r\n            \"writeOnly\": true\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\",\r\n          \"email\"\r\n        ]\r\n      }\r\n})"
            },
            {
                "name": "Simple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"🟦 Simple\",\r\n  schema: {\r\n    \"type\": \"array\"\r\n  }\r\n})"
            },
            {
                "name": "Simple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🟦 Simple\",\r\n    schema: {\r\n        \"type\": \"object\"\r\n      }\r\n})"
            },
            {
                "name": "SingleTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌟 Single type\",\r\n    schema: {\r\n        \"type\": \"number\"\r\n      }\r\n})"
            },
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"📏 Size\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"minProperties\": 2,\r\n        \"maxProperties\": 3\r\n      }\r\n})"
            },
            {
                "name": "Tuples",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"📋 Tuples\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"description\": \"Represent a street address such as ['1600','Pennsylvania','Avenue','NW']\",\r\n    \"items\": false,\r\n    \"prefixItems\": [\r\n      {\r\n        \"type\": \"number\",\r\n        \"description\": \"The address number\"\r\n      },\r\n      {\r\n        \"type\": \"string\",\r\n        \"description\": \"The name of the street\"\r\n      },\r\n      {\r\n        \"enum\": [\r\n          \"Street\",\r\n          \"Avenue\",\r\n          \"Boulevard\"\r\n        ],\r\n        \"description\": \"The type of street\"\r\n      },\r\n      {\r\n        \"enum\": [\r\n          \"NW\",\r\n          \"NE\",\r\n          \"SW\",\r\n          \"SE\"\r\n        ],\r\n        \"description\": \"The city quadrant of the address\"\r\n      }\r\n    ]\r\n  }\r\n})"
            },
            {
                "name": "UnevaluatedItems1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"🤔 UnevaluatedItems (1)\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"prefixItems\": [\r\n      {\r\n        \"type\": \"integer\"\r\n      },\r\n      {\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"unevaluatedItems\": false\r\n  }\r\n})"
            },
            {
                "name": "UnevaluatedItems2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"📋 UnevaluatedItems (2)\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"prefixItems\": [\r\n      {\r\n        \"type\": \"integer\"\r\n      },\r\n      {\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"unevaluatedItems\": {\r\n      \"type\": \"boolean\"\r\n    }\r\n  }\r\n})"
            },
            {
                "name": "UnevaluatedProperties1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🧐 UnevaluatedProperties (1)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        },\r\n        \"unevaluatedProperties\": false\r\n      }\r\n})"
            },
            {
                "name": "UnevaluatedProperties2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🕵️‍♀️ UnevaluatedProperties (2)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        },\r\n        \"unevaluatedProperties\": {\r\n          \"type\": \"boolean\"\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "UniqueItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"🦄 Unique items\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"uniqueItems\": true\r\n  }\r\n})"
            }
        ],
        "functions": [
            {
                "name": "createStory",
                "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "params",
                        "type": "Params",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Story",
                "jsdoctags": [
                    {
                        "name": "params",
                        "type": "Params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "detectedTypes",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "schema",
                        "type": "Exclude",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "TypeValues[]",
                "jsdoctags": [
                    {
                        "name": "schema",
                        "type": "Exclude",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "foundUndeclaredTypes",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "schema",
                        "type": "Exclude",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Generator<TypeValues, void>",
                "jsdoctags": [
                    {
                        "name": "schema",
                        "type": "Exclude",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "CheckKey",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"nullable\" | \"deprecated\" | \"readOnly\" | \"writeOnly\" | \"enum\" | \"stringLength\" | \"objectProperties\" | \"no-extra-properties\" | \"arrayItems\" | \"arrayContains\" | \"no-extra-items\" | \"number-range\" | \"pattern\" | \"multipleOf\" | \"uniqueItems\" | \"default\" | \"const\" | \"examples\" | \"contentMediaType\" | \"contentEncoding\" | \"contentSchema\"",
                "file": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "ComponentProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "NgxJsonSchemaViewerComponent",
                "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "itemsType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type[]",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/examples.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "JSONSchema",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Draft_07 | Draft_2019_09 | Draft_2020_12",
                "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "JSONSchema_Draft_07",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Draft_07",
                "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "JSONSchema_Draft_2019_09",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Draft_2019_09",
                "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "JSONSchema_Draft_2020_12",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Draft_2020_12",
                "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "JSVOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "LinkType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"AND\" | \"OR\" | \"XOR\"",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name-fallback.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "MetaViewer",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Meta<NgxJsonSchemaViewerComponent>",
                "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "OutputType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Record<string | [] | >",
                "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependancies-to-dependent-required.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "OutputType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Record<string | JSONSchema>",
                "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependancies-to-dependent-schemas.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "OutputType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exclude<JSONSchema |  | >",
                "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependent-required.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "OutputType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Exclude<JSONSchema |  | >",
                "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependent-schemas.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Params",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "renderTemplates",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"booleanSchema\" | \"schemaTitle\" | \"schemaTypes\" | \"schemaFallback\"",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "StatusType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"LOADING\" | \"ERROR\" | \"DONE\"",
                "file": "projects/ngx-json-schema-viewer/src/lib/ngx-json-schema-viewer.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<NgxJsonSchemaViewerComponent>",
                "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "typedJSONArraySchema",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "JSONSchemaNS.Array",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-contains-number.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "typedJSONArraySchema",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "JSONSchemaNS.Array",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-number-of-items.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "TypeValues",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " `${TypeName}`",
                "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 200
            },
            {
                "name": "ValueType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Record<string | [] |  | JSONSchema>",
                "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependancies-to-dependent-required.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ValueType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Record<string | [] |  | JSONSchema>",
                "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependancies-to-dependent-schemas.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ValueType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Record<string | [] | >",
                "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependent-required.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ValueType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Record<string | JSONSchema>",
                "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependent-schemas.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts": [
                {
                    "name": "AdditionalItems1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"❌ AdditionalItems (1)\",\r\n  schema: {\r\n      \"type\": \"array\",\r\n      \"items\": [\r\n        {\r\n          \"type\": \"integer\"\r\n        },\r\n        {\r\n          \"type\": \"string\"\r\n        }\r\n      ],\r\n      \"additionalItems\": false\r\n  }\r\n})"
                },
                {
                    "name": "AdditionalItems2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"➕ AdditionalItems (2)\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"items\": [\r\n      {\r\n        \"type\": \"integer\"\r\n      },\r\n      {\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"additionalItems\": {\r\n      \"type\": \"boolean\"\r\n    }\r\n  }\r\n})"
                },
                {
                    "name": "Contains",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"🍱 Contains\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"contains\": {\r\n      \"type\": \"number\"\r\n    }\r\n  }\r\n})"
                },
                {
                    "name": "Items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"🛍️ Items\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"items\": {\r\n      \"type\": \"number\"\r\n    }\r\n  }\r\n})"
                },
                {
                    "name": "Length",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"📐 Length\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"minItems\": 2,\r\n    \"maxItems\": 3\r\n  }\r\n})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Array\"\r\n}"
                },
                {
                    "name": "minContainsAndmaxContains",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"📊 minContains & maxContains\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"contains\": {\r\n      \"type\": \"number\"\r\n    },\r\n    \"minContains\": 2,\r\n    \"maxContains\": 3\r\n  }\r\n})"
                },
                {
                    "name": "Simple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"🟦 Simple\",\r\n  schema: {\r\n    \"type\": \"array\"\r\n  }\r\n})"
                },
                {
                    "name": "Tuples",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"📋 Tuples\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"description\": \"Represent a street address such as ['1600','Pennsylvania','Avenue','NW']\",\r\n    \"items\": false,\r\n    \"prefixItems\": [\r\n      {\r\n        \"type\": \"number\",\r\n        \"description\": \"The address number\"\r\n      },\r\n      {\r\n        \"type\": \"string\",\r\n        \"description\": \"The name of the street\"\r\n      },\r\n      {\r\n        \"enum\": [\r\n          \"Street\",\r\n          \"Avenue\",\r\n          \"Boulevard\"\r\n        ],\r\n        \"description\": \"The type of street\"\r\n      },\r\n      {\r\n        \"enum\": [\r\n          \"NW\",\r\n          \"NE\",\r\n          \"SW\",\r\n          \"SE\"\r\n        ],\r\n        \"description\": \"The city quadrant of the address\"\r\n      }\r\n    ]\r\n  }\r\n})"
                },
                {
                    "name": "UnevaluatedItems1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"🤔 UnevaluatedItems (1)\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"prefixItems\": [\r\n      {\r\n        \"type\": \"integer\"\r\n      },\r\n      {\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"unevaluatedItems\": false\r\n  }\r\n})"
                },
                {
                    "name": "UnevaluatedItems2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"📋 UnevaluatedItems (2)\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"prefixItems\": [\r\n      {\r\n        \"type\": \"integer\"\r\n      },\r\n      {\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"unevaluatedItems\": {\r\n      \"type\": \"boolean\"\r\n    }\r\n  }\r\n})"
                },
                {
                    "name": "UniqueItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"🦄 Unique items\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"uniqueItems\": true\r\n  }\r\n})"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts": [
                {
                    "name": "AdditionalProperties1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🗝️ AdditionalProperties (1)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        },\r\n        \"additionalProperties\": false\r\n    }\r\n})"
                },
                {
                    "name": "AdditionalProperties2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🛠️ AdditionalProperties (2)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        },\r\n        \"additionalProperties\": {\r\n          \"type\": \"string\"\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "AdditionalPropertiesWithPatternProperties",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌈 AdditionalProperties with patternProperties\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"builtin\": {\r\n            \"type\": \"number\"\r\n          }\r\n        },\r\n        \"patternProperties\": {\r\n          \"^S_\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"^I_\": {\r\n            \"type\": \"integer\"\r\n          }\r\n        },\r\n        \"additionalProperties\": {\r\n          \"type\": \"string\"\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Object\"\r\n}"
                },
                {
                    "name": "PatternProperties",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🎨 PatternProperties\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"patternProperties\": {\r\n          \"^S_\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"^I_\": {\r\n            \"type\": \"integer\"\r\n          }\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "Properties",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"📝 Properties\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "PropertyNames",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🏷️ PropertyNames\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"propertyNames\": {\r\n          \"pattern\": \"^[A-Za-z_][A-Za-z0-9_]*$\"\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "Required",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔴 Required\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"id\": {\r\n            \"type\": \"number\",\r\n            \"readOnly\": true\r\n          },\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"email\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"address\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"telephone\": {\r\n            \"type\": \"string\",\r\n            \"deprecated\": true\r\n          },\r\n          \"password\": {\r\n            \"type\": \"string\",\r\n            \"writeOnly\": true\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\",\r\n          \"email\"\r\n        ]\r\n      }\r\n})"
                },
                {
                    "name": "Simple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🟦 Simple\",\r\n    schema: {\r\n        \"type\": \"object\"\r\n      }\r\n})"
                },
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"📏 Size\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"minProperties\": 2,\r\n        \"maxProperties\": 3\r\n      }\r\n})"
                },
                {
                    "name": "UnevaluatedProperties1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🧐 UnevaluatedProperties (1)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        },\r\n        \"unevaluatedProperties\": false\r\n      }\r\n})"
                },
                {
                    "name": "UnevaluatedProperties2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🕵️‍♀️ UnevaluatedProperties (2)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        },\r\n        \"unevaluatedProperties\": {\r\n          \"type\": \"boolean\"\r\n        }\r\n      }\r\n})"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts": [
                {
                    "name": "allOf",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🤝 allOf\",\r\n    schema: {\r\n        \"allOf\": [\r\n          {\r\n            \"title\": \"Option 1\",\r\n            \"type\": \"string\"\r\n          },\r\n          {\r\n            \"title\": \"Option 2\",\r\n            \"maxLength\": 5\r\n          }\r\n        ]\r\n      }\r\n})"
                },
                {
                    "name": "anyOf",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌐 anyOf\",\r\n    schema: {\r\n        \"anyOf\": [\r\n          {\r\n            \"title\": \"Option 1\",\r\n            \"type\": \"string\",\r\n            \"maxLength\": 5\r\n          },\r\n          {\r\n            \"title\": \"Option 2\",\r\n            \"type\": \"number\",\r\n            \"minimum\": 0\r\n          }\r\n        ]\r\n      }\r\n})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Schema Composition\"\r\n}"
                },
                {
                    "name": "not",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🚫 not\",\r\n    schema: {\r\n        \"title\": \"Not a string\",\r\n        \"not\": {\r\n            \"type\": \"string\"\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "oneOf",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🎯 oneOf\",\r\n    schema: {\r\n        \"oneOf\": [\r\n          {\r\n            \"title\": \"Option 1\",\r\n            \"type\": \"number\",\r\n            \"multipleOf\": 5\r\n          },\r\n          {\r\n            \"title\": \"Option 2\",\r\n            \"type\": \"number\",\r\n            \"multipleOf\": 3\r\n          }\r\n        ]\r\n      }\r\n})"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts": [
                {
                    "name": "Annotations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"📌 Annotations\",\r\n    schema: {\r\n        \"title\": \"Match anything\",\r\n        \"description\": \"This is a *schema* that matches **anything.**\",\r\n        \"default\": \"Default value\",\r\n        \"examples\": [\r\n          \"Anything\",\r\n          4035\r\n        ],\r\n        \"deprecated\": true,\r\n        \"readOnly\": true,\r\n        \"writeOnly\": false\r\n    },\r\n    viewerOptions: {\r\n        showExamples: true\r\n    }\r\n  })"
                },
                {
                    "name": "Const",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🧊 Const\",\r\n    schema: {\r\n        \"properties\": {\r\n          \"country\": {\r\n            \"const\": \"United States of America\"\r\n          }\r\n        }\r\n    }\r\n})"
                },
                {
                    "name": "Enum",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔒 Enum\",\r\n    schema: {\r\n        \"enum\": [\r\n          \"red\",\r\n          \"amber\",\r\n          \"green\"\r\n        ]\r\n    }\r\n})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Generic keywords\"\r\n}"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/String.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🟦 Basic\",\r\n    schema: {\r\n        \"type\": \"string\"\r\n      }\r\n})"
                },
                {
                    "name": "ContentEncoding",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"📜 ContentEncoding\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"contentEncoding\": \"base64\"\r\n      }\r\n})"
                },
                {
                    "name": "ContentEncodingAndContentMediaType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"📄 ContentEncoding & ContentMediaType\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"contentEncoding\": \"base64\",\r\n        \"contentMediaType\": \"application/json\"\r\n    }\r\n})"
                },
                {
                    "name": "ContentMediaType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔖 ContentMediaType\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"contentMediaType\": \"application/json\"\r\n      }\r\n})"
                },
                {
                    "name": "ContentSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"📑 ContentSchema\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"contentSchema\": {\r\n          \"type\": \"object\",\r\n          \"required\": [\r\n            \"name\",\r\n            \"age\"\r\n          ]\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "Format",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"📅 Format\",\r\n    schema: {\r\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"prop1\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"date-time\",\r\n            \"examples\": [\r\n              \"2018-11-13T20:20:39+00:00\"\r\n            ]\r\n          },\r\n          \"prop2\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"time\",\r\n            \"examples\": [\r\n              \"20:20:39+00:00\"\r\n            ]\r\n          },\r\n          \"prop3\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"date\",\r\n            \"examples\": [\r\n              \"2018-11-13\"\r\n            ]\r\n          },\r\n          \"prop4\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"duration\",\r\n            \"examples\": [\r\n              \"P3D\"\r\n            ]\r\n          },\r\n          \"prop5\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"email\",\r\n            \"examples\": [\r\n              \"test@gmail.com\"\r\n            ]\r\n          },\r\n          \"prop6\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"idn-email\",\r\n            \"examples\": [\r\n              \"test@gmail.com\"\r\n            ]\r\n          },\r\n          \"prop7\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"hostname\",\r\n            \"examples\": [\r\n              \"example\"\r\n            ]\r\n          },\r\n          \"prop8\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"idn-hostname\",\r\n            \"examples\": [\r\n              \"example\"\r\n            ]\r\n          },\r\n          \"prop9\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"ipv4\",\r\n            \"examples\": [\r\n              \"192.168.1.1\"\r\n            ]\r\n          },\r\n          \"prop10\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"ipv6\",\r\n            \"examples\": [\r\n              \"2001:db8:3333:4444:5555:6666:7777:8888\"\r\n            ]\r\n          },\r\n          \"prop11\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uuid\",\r\n            \"examples\": [\r\n              \"3e4666bf-d5e5-4aa7-b8ce-cefe41c7568a\"\r\n            ]\r\n          },\r\n          \"prop12\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uri\",\r\n            \"examples\": [\r\n              \"https://www.perdu.com/\"\r\n            ]\r\n          },\r\n          \"prop12B\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uri-reference\"\r\n          },\r\n          \"prop13\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"iri\",\r\n            \"examples\": [\r\n              \"https://www.perdu.com/\"\r\n            ]\r\n          },\r\n          \"prop13B\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"iri-reference\"\r\n          },\r\n          \"prop14\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uri-template\"\r\n          },\r\n          \"prop15\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"json-pointer\"\r\n          },\r\n          \"prop16\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"relative-json-pointer\"\r\n          },\r\n          \"prop17\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"regex\",\r\n            \"examples\": [\r\n              \"^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "Length",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"📏 Length\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"minLength\": 2,\r\n        \"maxLength\": 3\r\n      }\r\n})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/String\"\r\n}"
                },
                {
                    "name": "Pattern",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔮 Pattern\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"pattern\": \"^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$\"\r\n      }\r\n})"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/Boolean.stories.ts": [
                {
                    "name": "Booleans",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Boolean.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"✅ Boolean\",\r\n    schema: {\r\n        \"type\": \"boolean\"\r\n    }\r\n})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Boolean.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Boolean\"\r\n}"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/setup.ts": [
                {
                    "name": "defaultMeta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<NgxJsonSchemaViewerComponent>",
                    "defaultValue": "{\r\n    decorators: [\r\n        moduleMetadata({\r\n            imports: [NgxJsonSchemaViewerComponent],\r\n        }),\r\n        applicationConfig({\r\n            providers: [\r\n                // BrowserAnimationsModule\r\n                provideAnimations(),\r\n                // HighlightModule \r\n                {\r\n                    provide: HIGHLIGHT_OPTIONS,\r\n                    useValue: {\r\n                        coreLibraryLoader: () => import('highlight.js/lib/core'),\r\n                        languages: {\r\n                            json: () => import('highlight.js/lib/languages/json'),\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n        })\r\n    ]\r\n}"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts": [
                {
                    "name": "dependentRequired1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🤞 dependencies (dependentRequired)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"billing_address\": {\r\n            \"type\": \"string\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependencies\": {\r\n          \"credit_card\": [\r\n            \"billing_address\"\r\n          ]\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "dependentRequired2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔑 dependentRequired\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"billing_address\": {\r\n            \"type\": \"string\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependentRequired\": {\r\n          \"credit_card\": [\r\n            \"billing_address\"\r\n          ]\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "dependentRequired3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔁 dependentRequired (bidirectional)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"billing_address\": {\r\n            \"type\": \"string\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependentRequired\": {\r\n          \"credit_card\": [\r\n            \"billing_address\"\r\n          ],\r\n          \"billing_address\": [\r\n            \"credit_card\"\r\n          ]\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "dependentSchemas",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🏗️ dependentSchemas\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependentSchemas\": {\r\n          \"credit_card\": {\r\n            \"properties\": {\r\n              \"billing_address\": {\r\n                \"type\": \"string\"\r\n              }\r\n            },\r\n            \"required\": [\r\n              \"billing_address\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "dependentSchemas1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌳 dependencies (dependentSchemas)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependencies\": {\r\n          \"credit_card\": {\r\n            \"properties\": {\r\n              \"billing_address\": {\r\n                \"type\": \"string\"\r\n              }\r\n            },\r\n            \"required\": [\r\n              \"billing_address\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "IfThenElse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🎬 If-Then-Else\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"street_address\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"country\": {\r\n            \"default\": \"United States of America\",\r\n            \"enum\": [\r\n              \"United States of America\",\r\n              \"Canada\"\r\n            ]\r\n          }\r\n        },\r\n        \"if\": {\r\n          \"properties\": {\r\n            \"country\": {\r\n              \"const\": \"United States of America\"\r\n            }\r\n          }\r\n        },\r\n        \"then\": {\r\n          \"properties\": {\r\n            \"postal_code\": {\r\n              \"pattern\": \"[0-9]{5}(-[0-9]{4})?\"\r\n            }\r\n          }\r\n        },\r\n        \"else\": {\r\n          \"properties\": {\r\n            \"postal_code\": {\r\n              \"pattern\": \"[A-Z][0-9][A-Z] [0-9][A-Z][0-9]\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "IfThenElse2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔀 If-Then-Else (multiple)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"street_address\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"country\": {\r\n            \"default\": \"United States of America\",\r\n            \"enum\": [\r\n              \"United States of America\",\r\n              \"Canada\",\r\n              \"Netherlands\"\r\n            ]\r\n          }\r\n        },\r\n        \"allOf\": [\r\n          {\r\n            \"title\": \"Rule 1\",\r\n            \"if\": {\r\n              \"properties\": {\r\n                \"country\": {\r\n                  \"const\": \"United States of America\"\r\n                }\r\n              }\r\n            },\r\n            \"then\": {\r\n              \"properties\": {\r\n                \"postal_code\": {\r\n                  \"pattern\": \"[0-9]{5}(-[0-9]{4})?\"\r\n                }\r\n              }\r\n            }\r\n          },\r\n          {\r\n            \"title\": \"Rule 2\",\r\n            \"if\": {\r\n              \"properties\": {\r\n                \"country\": {\r\n                  \"const\": \"Canada\"\r\n                }\r\n              },\r\n              \"required\": [\r\n                \"country\"\r\n              ]\r\n            },\r\n            \"then\": {\r\n              \"properties\": {\r\n                \"postal_code\": {\r\n                  \"pattern\": \"[A-Z][0-9][A-Z] [0-9][A-Z][0-9]\"\r\n                }\r\n              }\r\n            }\r\n          },\r\n          {\r\n            \"title\": \"Rule 3\",\r\n            \"if\": {\r\n              \"properties\": {\r\n                \"country\": {\r\n                  \"const\": \"Netherlands\"\r\n                }\r\n              },\r\n              \"required\": [\r\n                \"country\"\r\n              ]\r\n            },\r\n            \"then\": {\r\n              \"properties\": {\r\n                \"postal_code\": {\r\n                  \"pattern\": \"[0-9]{4} [A-Z]{2}\"\r\n                }\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      }\r\n})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Schema Conditionally\"\r\n}"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts": [
                {
                    "name": "Integer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"1️⃣ Integer\",\r\n    schema: {\r\n        \"type\": \"integer\"\r\n    }\r\n})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Numeric \"\r\n}"
                },
                {
                    "name": "MultipleOf",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"✖️ Multiple Of\",\r\n    schema: {\r\n        \"type\": \"number\",\r\n        \"multipleOf\": 10\r\n    }\r\n})"
                },
                {
                    "name": "Number",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔢 Number\",\r\n    schema: {\r\n        \"type\": \"number\"\r\n    }\r\n})"
                },
                {
                    "name": "Ranges",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌡️ Ranges\",\r\n    schema: {\r\n        \"type\": \"number\",\r\n        \"minimum\": 0,\r\n        \"exclusiveMaximum\": 100\r\n    }\r\n})"
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts": [
                {
                    "name": "isArrayType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"array\" ||\r\n      schema.items !== undefined ||\r\n      schema.minItems !== undefined ||\r\n      schema.maxItems !== undefined ||\r\n      schema.additionalItems !== undefined ||\r\n      schema.contains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).minContains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).maxContains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).prefixItems !== undefined ||\r\n      (schema as JSONSchemaNS.Array).unevaluatedItems !== undefined ||\r\n      Array.isArray(schema.const) ||\r\n      schema.enum?.some((s) => Array.isArray(s)))"
                },
                {
                    "name": "isBoolean",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"boolean\" ||\r\n      schema.enum?.some((val) => typeof val === \"boolean\") ||\r\n      typeof schema.const === \"boolean\")"
                },
                {
                    "name": "isInteger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"integer\" ||\r\n      schema.multipleOf === 1 ||\r\n      schema.enum?.some((val) => typeof val === \"bigint\") ||\r\n      typeof schema.const === \"bigint\")"
                },
                {
                    "name": "isNull",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"null\" ||\r\n      schema.enum?.some((val) => val === null) ||\r\n      schema.const === null)"
                },
                {
                    "name": "isNumeric",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"number\" ||\r\n      schema.multipleOf !== undefined ||\r\n      schema.minimum !== undefined ||\r\n      schema.exclusiveMinimum !== undefined ||\r\n      schema.maximum !== undefined ||\r\n      schema.exclusiveMaximum !== undefined ||\r\n      schema.enum?.some((val) => typeof val === \"number\") ||\r\n      typeof schema.const === \"number\")"
                },
                {
                    "name": "isObjectType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"object\" ||\r\n      schema.properties !== undefined ||\r\n      schema.additionalProperties !== undefined ||\r\n      schema.patternProperties !== undefined ||\r\n      schema.propertyNames !== undefined ||\r\n      schema.minProperties !== undefined ||\r\n      schema.maxProperties !== undefined ||\r\n      schema.required !== undefined ||\r\n      (schema as JSONSchemaNS.Object).unevaluatedProperties !== undefined)"
                },
                {
                    "name": "isSchemaComposition",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.allOf !== undefined ||\r\n      schema.anyOf !== undefined ||\r\n      schema.oneOf !== undefined ||\r\n      schema.not !== undefined)"
                },
                {
                    "name": "isSchemaConditional",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.if !== undefined ||\r\n      schema.dependencies !== undefined ||\r\n      (schema as JSONSchemaNS.Object).dependentRequired !== undefined ||\r\n      (schema as JSONSchemaNS.Object).dependentSchemas !== undefined)"
                },
                {
                    "name": "isStringType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"string\" ||\r\n      schema.minLength !== undefined ||\r\n      schema.maxLength !== undefined ||\r\n      schema.pattern !== undefined ||\r\n      schema.enum?.some((val) => typeof val === \"string\") ||\r\n      typeof schema.const === \"string\")"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/Null.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Null.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Null\"\r\n}"
                },
                {
                    "name": "Null",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Null.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🕳️ Null\",\r\n    schema: {\r\n        \"type\": \"null\"\r\n    }\r\n  })"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Type\"\r\n}"
                },
                {
                    "name": "MultipleTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🐾 Multiple types\",\r\n    schema: {\r\n        \"type\": [\r\n          \"number\",\r\n          \"string\"\r\n        ]\r\n      }\r\n})"
                },
                {
                    "name": "SingleTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌟 Single type\",\r\n    schema: {\r\n        \"type\": \"number\"\r\n      }\r\n})"
                }
            ],
            "projects/ngx-json-schema-viewer/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\r\n  parameters: {\r\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/,\r\n      },\r\n    },\r\n    docs: {\r\n      theme: themes.dark,\r\n    }\r\n  },\r\n  decorators: [\r\n    // https://material.angular.io/guide/theming#application-background-color\r\n    componentWrapperDecorator((story) => `<div class=\"mat-app-background\">${story}</div>`),\r\n  ]\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "projects/ngx-json-schema-viewer/src/stories/setup.ts": [
                {
                    "name": "createStory",
                    "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Story",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts": [
                {
                    "name": "detectedTypes",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "schema",
                            "type": "Exclude",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "TypeValues[]",
                    "jsdoctags": [
                        {
                            "name": "schema",
                            "type": "Exclude",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "foundUndeclaredTypes",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "schema",
                            "type": "Exclude",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Generator<TypeValues, void>",
                    "jsdoctags": [
                        {
                            "name": "schema",
                            "type": "Exclude",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts": [
                {
                    "name": "CheckKey",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"nullable\" | \"deprecated\" | \"readOnly\" | \"writeOnly\" | \"enum\" | \"stringLength\" | \"objectProperties\" | \"no-extra-properties\" | \"arrayItems\" | \"arrayContains\" | \"no-extra-items\" | \"number-range\" | \"pattern\" | \"multipleOf\" | \"uniqueItems\" | \"default\" | \"const\" | \"examples\" | \"contentMediaType\" | \"contentEncoding\" | \"contentSchema\"",
                    "file": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                },
                {
                    "name": "JSVOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/setup.ts": [
                {
                    "name": "ComponentProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "NgxJsonSchemaViewerComponent",
                    "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "MetaViewer",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Meta<NgxJsonSchemaViewerComponent>",
                    "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "Params",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<NgxJsonSchemaViewerComponent>",
                    "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/examples.ts": [
                {
                    "name": "itemsType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type[]",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/examples.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/types.ts": [
                {
                    "name": "JSONSchema",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Draft_07 | Draft_2019_09 | Draft_2020_12",
                    "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                },
                {
                    "name": "JSONSchema_Draft_07",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Draft_07",
                    "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "JSONSchema_Draft_2019_09",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Draft_2019_09",
                    "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "JSONSchema_Draft_2020_12",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Draft_2020_12",
                    "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "TypeValues",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " `${TypeName}`",
                    "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 200
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name-fallback.ts": [
                {
                    "name": "LinkType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"AND\" | \"OR\" | \"XOR\"",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name-fallback.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/pipes/dependancies-to-dependent-required.pipe.ts": [
                {
                    "name": "OutputType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Record<string | [] | >",
                    "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependancies-to-dependent-required.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "ValueType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Record<string | [] |  | JSONSchema>",
                    "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependancies-to-dependent-required.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/pipes/dependancies-to-dependent-schemas.pipe.ts": [
                {
                    "name": "OutputType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Record<string | JSONSchema>",
                    "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependancies-to-dependent-schemas.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "ValueType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Record<string | [] |  | JSONSchema>",
                    "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependancies-to-dependent-schemas.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/pipes/dependent-required.pipe.ts": [
                {
                    "name": "OutputType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exclude<JSONSchema |  | >",
                    "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependent-required.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "ValueType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Record<string | [] | >",
                    "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependent-required.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/pipes/dependent-schemas.pipe.ts": [
                {
                    "name": "OutputType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Exclude<JSONSchema |  | >",
                    "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependent-schemas.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "ValueType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Record<string | JSONSchema>",
                    "file": "projects/ngx-json-schema-viewer/src/lib/pipes/dependent-schemas.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name.ts": [
                {
                    "name": "renderTemplates",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"booleanSchema\" | \"schemaTitle\" | \"schemaTypes\" | \"schemaFallback\"",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/ngx-json-schema-viewer.component.ts": [
                {
                    "name": "StatusType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"LOADING\" | \"ERROR\" | \"DONE\"",
                    "file": "projects/ngx-json-schema-viewer/src/lib/ngx-json-schema-viewer.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-contains-number.ts": [
                {
                    "name": "typedJSONArraySchema",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "JSONSchemaNS.Array",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-contains-number.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-number-of-items.ts": [
                {
                    "name": "typedJSONArraySchema",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "JSONSchemaNS.Array",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-number-of-items.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ngx-json-schema-viewer/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/additional-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAdditionalItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/contains.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateContainsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/index.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateArrayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/items.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/prefix-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreatePrefixItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/unevaluated-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateUnevaluatedItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-always-invalid.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAlwaysInvalidComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-always-valid.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAlwaysValidComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-boolean.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateBooleanComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-description.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateDescriptionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-integer.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateIntegerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-null.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateNullComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-number.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateNumberComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-string.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateStringComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/additional-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAdditionalPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/index.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateObjectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/pattern-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreatePatternPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreatePropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/property-names.ts",
                "type": "component",
                "linktype": "component",
                "name": "PropertyNamesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/unevaluated-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateUnevaluatedPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/unlisted-required-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateUnlistedPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/all-of.ts",
                "type": "component",
                "linktype": "component",
                "name": "AllOfSchemaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/any-of.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnyOfSchemaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/index.ts",
                "type": "component",
                "linktype": "component",
                "name": "SchemaCompositionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/not.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotSchemaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/one-of.ts",
                "type": "component",
                "linktype": "component",
                "name": "OneOfSchemaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependencies.ts",
                "type": "component",
                "linktype": "component",
                "name": "DependenciesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependent-required.ts",
                "type": "component",
                "linktype": "component",
                "name": "DependentRequiredComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependent-schemas.ts",
                "type": "component",
                "linktype": "component",
                "name": "DependentSchemasComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/if-else-then.ts",
                "type": "component",
                "linktype": "component",
                "name": "IfElseThenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/index.ts",
                "type": "component",
                "linktype": "component",
                "name": "SchemaConditionalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/create-edge.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateEdgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/create-nodes.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateNodesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/create-types.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateTypesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/create-valid-or-invalid.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateValidOrInvalidComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/render-multiple-types.ts",
                "type": "component",
                "linktype": "component",
                "name": "RenderMultipleTypesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/render-provided-type.ts",
                "type": "component",
                "linktype": "component",
                "name": "RenderProvidedTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/Deprecated/deprecated-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeprecatedLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/ReadOnly/read-only-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReadOnlyLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/Required/required-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RequiredLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/WriteOnly/write-only-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WriteOnlyLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/and-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "AndLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/array-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArrayLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/boolean-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooleanLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/else-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "ElseLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/error-occurred.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorOccurredLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/false-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "FalseLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/if-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "IfLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/integer-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "IntegerLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/loading-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/not-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/null-labels.ts",
                "type": "component",
                "linktype": "component",
                "name": "NullLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/number-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumberLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/object-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "ObjectLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/or-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/string-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "StringLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/then-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThenLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/true-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "TrueLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/type-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypeLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/xor-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "XorLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/ngx-json-schema-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgxJsonSchemaViewerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/pipes/dependancies-to-dependent-required.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DependanciesToDependentRequiredPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/pipes/dependancies-to-dependent-schemas.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DependanciesToDependentSchemasPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/pipes/dependent-required.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DependentRequiredPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/pipes/dependent-schemas.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DependentSchemasPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "JSVOptionsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/services/schema-resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SchemaResolutionService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/customized-array.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenerateFriendlyNameCustomArrayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/customized-name.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenerateFriendlyNameCustomComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name-fallback.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenerateFriendlyNameFallbackComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenerateFriendlyNameComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-contains-number.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArrayContainsNumberComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-number-of-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArrayNumberOfItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-unique-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArrayUniqueItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/constant.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConstantComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-encoding.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentEncodingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-media.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentMediaTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-schema.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentSchemaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/default-value.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultValueComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/deprecated.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeprecatedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/enum.ts",
                "type": "component",
                "linktype": "component",
                "name": "EnumComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/examples.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExamplesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/no-extra-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoExtraItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/no-extra-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoExtraPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/nullable.ts",
                "type": "component",
                "linktype": "component",
                "name": "NullableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/number-bounds.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumberBoundsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/number-multiple-of.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultipleOfComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/object-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "ObjectPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/pattern.ts",
                "type": "component",
                "linktype": "component",
                "name": "PatternComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/print-schema-type.ts",
                "type": "component",
                "linktype": "component",
                "name": "PrintSchemaTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/readOnly.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReadOnlyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/string-length.ts",
                "type": "component",
                "linktype": "component",
                "name": "StringLengthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/writeOnly.ts",
                "type": "component",
                "linktype": "component",
                "name": "WriteOnlyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "detectedTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "foundUndeclaredTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isArrayType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isBoolean",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isInteger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isNull",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isNumeric",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isObjectType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isSchemaComposition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isSchemaConditional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isStringType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/qualifier-messages.ts",
                "type": "component",
                "linktype": "component",
                "name": "QualifierMessages",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/type-label-switch.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypeLabelSwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AdditionalItems1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AdditionalItems2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Contains",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Length",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "minContainsAndmaxContains",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Simple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tuples",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UnevaluatedItems1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UnevaluatedItems2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UniqueItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Boolean.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Booleans",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Boolean.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Annotations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Const",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Enum",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Null.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Null.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Null",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Integer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleOf",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Number",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Ranges",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AdditionalProperties1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AdditionalProperties2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AdditionalPropertiesWithPatternProperties",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PatternProperties",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Properties",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PropertyNames",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Required",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Simple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UnevaluatedProperties1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UnevaluatedProperties2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "allOf",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "anyOf",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "not",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "oneOf",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dependentRequired1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dependentRequired2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dependentRequired3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dependentSchemas",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dependentSchemas1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IfThenElse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IfThenElse2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ContentEncoding",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ContentEncodingAndContentMediaType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ContentMediaType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ContentSchema",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Format",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Length",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pattern",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SingleTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultMeta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}