{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "JSVOptionsService",
            "id": "injectable-JSVOptionsService-64e9d6382bec6ea6a3fde1450bf67f5df65b416671aef23334a417bd4614a566f0f7b3f9d538d34450845fc3dbf9b1e1fdd3c2b3d2268b26a7136a7d6daa0f9d",
            "file": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
            "properties": [
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JSVOptions",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "JSVOptions",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setOptions",
                    "args": [
                        {
                            "name": "userOptions",
                            "type": "Partial<JSVOptions>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userOptions",
                            "type": "Partial<JSVOptions>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nexport type CheckKey =\r\n  | \"nullable\"\r\n  | \"deprecated\"\r\n  | \"readOnly\"\r\n  | \"writeOnly\"\r\n  | \"enum\"\r\n  | \"stringLength\"\r\n  | \"objectProperties\"\r\n  | \"no-extra-properties\"\r\n  | \"arrayItems\"\r\n  | \"arrayContains\"\r\n  | \"no-extra-items\"\r\n  | \"number-range\"\r\n  | \"pattern\"\r\n  | \"multipleOf\"\r\n  | \"uniqueItems\"\r\n  | \"default\"\r\n  | \"const\"\r\n  | \"examples\"\r\n  | \"contentMediaType\"\r\n  | \"contentEncoding\"\r\n  | \"contentSchema\"\r\n\r\nexport type JSVOptions = {\r\n    /**\r\n     * Should we display \"examples\" ?\r\n     * @default false\r\n     */\r\n    showExamples: boolean\r\n    /**\r\n     * To overwrite the order to display qualifier messages\r\n     * @default [\"nullable\",\"deprecated\",\"readOnly\",\"writeOnly\",\"enum\",\"stringLength\",\"objectProperties\",\"no-extra-properties\",\"arrayItems\",\"arrayContains\",\"no-extra-items\",\"number-range\",\"pattern\",\"multipleOf\",\"uniqueItems\",\"contentEncoding\",\"contentMediaType\",\"contentSchema\",\"default\",\"const\",\"examples\"]\r\n     */\r\n    qualifierMessagesOrder: CheckKey[]\r\n}\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class JSVOptionsService {\r\n\r\n    private options: JSVOptions;\r\n\r\n    constructor() {\r\n        this.options = {\r\n            showExamples: false,\r\n            qualifierMessagesOrder: [\r\n                \"nullable\",\r\n                \"deprecated\",\r\n                \"readOnly\",\r\n                \"writeOnly\",\r\n                \"enum\",\r\n                \"stringLength\",\r\n                \"objectProperties\",\r\n                \"no-extra-properties\",\r\n                \"arrayItems\",\r\n                \"arrayContains\",\r\n                \"no-extra-items\",\r\n                \"number-range\",\r\n                \"pattern\",\r\n                \"multipleOf\",\r\n                \"uniqueItems\",\r\n                \"contentEncoding\",\r\n                \"contentMediaType\",\r\n                \"contentSchema\",\r\n                \"default\",\r\n                \"const\",\r\n                \"examples\"\r\n            ]\r\n        }\r\n    }\r\n\r\n    setOptions(userOptions?: Partial<JSVOptions>) {\r\n        this.options = {\r\n            ...this.options,\r\n            ...userOptions\r\n        }\r\n    }\r\n\r\n    getOptions(): JSVOptions {\r\n        return this.options;\r\n    }\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 44
            },
            "type": "injectable"
        },
        {
            "name": "SchemaResolutionService",
            "id": "injectable-SchemaResolutionService-5f8aaf0fe6af184844c88c7095b8b73f1beabb13e9bb1825f615b5600e77a780e6acf3f93eace573f1c9de5e721c4e7f722d81f8c063a1fb470e67eacbedf3e4",
            "file": "projects/ngx-json-schema-viewer/src/lib/services/schema-resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolveSchema",
                    "args": [
                        {
                            "name": "schema",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "resolverOptions",
                            "type": "IResolveOpts",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<JSONSchema>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "schema",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "resolverOptions",
                            "type": "IResolveOpts",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Resolver } from '@stoplight/json-ref-resolver';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport type { IResolveOpts } from \"@stoplight/json-ref-resolver/types\"\r\nimport type { JSONSchema } from \"../types\";\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class SchemaResolutionService {\r\n\r\n    resolveSchema(schema: unknown, resolverOptions?: IResolveOpts): Observable<JSONSchema> {\r\n        return new Observable((observer) => {\r\n          new Resolver()\r\n            .resolve(schema, resolverOptions)\r\n            .then((result) => {\r\n              observer.next(result.result);\r\n              observer.complete();\r\n            })\r\n            .catch((err) => {\r\n              observer.error(err);\r\n            });\r\n        });\r\n    }\r\n}",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AllOfSchemaComponent",
            "id": "component-AllOfSchemaComponent-aab2fe705d80c108692bd19c34f7d2fb0ee65bf65b0ad3ed10701a175bbd4dc2e292e69ed4292bfa351e9067ef0928e1c4c3e327b2dfb2130f27485bcb5ce99e",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/all-of.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-composition-all-of",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span class=\"badge badge--info\">{{ typeOf }}</span>\n  <mat-tab-group>\n    <mat-tab *ngFor=\"let compositeSchema of typedSchema\">\n      <ng-template mat-tab-label>\n        <jsv-friendly-name [schema]=\"compositeSchema\" />\n      </ng-template>\n      <jse-common-create-nodes [schema]=\"compositeSchema\" />\n    </mat-tab>\n  </mat-tab-group>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 34,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateNodesComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\n\r\nimport { GenerateFriendlyNameComponent } from \"../../utils/index\";\r\nimport { CreateNodesComponent } from \"../../common/create-nodes\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-composition-all-of',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    MatTabsModule, \r\n    forwardRef(() => GenerateFriendlyNameComponent),\r\n    forwardRef(() => CreateNodesComponent)\r\n  ],\r\n  template: `\r\n    <div>\r\n      <span class=\"badge badge--info\">{{ typeOf }}</span>\r\n      <mat-tab-group>\r\n        <mat-tab *ngFor=\"let compositeSchema of typedSchema\">\r\n          <ng-template mat-tab-label>\r\n            <jsv-friendly-name [schema]=\"compositeSchema\" />\r\n          </ng-template>\r\n          <jse-common-create-nodes [schema]=\"compositeSchema\" />\r\n        </mat-tab>\r\n      </mat-tab-group>\r\n    </div>\r\n  `,\r\n})\r\nexport class AllOfSchemaComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): JSONSchema[] {\r\n    return this.schema.allOf! as JSONSchema[];\r\n  }\r\n\r\n  get typeOf(): string {\r\n    return \"allOf\";\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 36
                    }
                },
                "typeOf": {
                    "name": "typeOf",
                    "getSignature": {
                        "name": "typeOf",
                        "type": "string",
                        "returnType": "string",
                        "line": 40
                    }
                }
            }
        },
        {
            "name": "AndLabelComponent",
            "id": "component-AndLabelComponent-59fa189852eac292acb1d556d701eed4997358d8255be747cc7d393adecffc8a89b99a4486ded736eee156c4b63376ec00c25c83bda50fed33c18bcac21bd4f2",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/and-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-and",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n<strong>AND</strong>\n<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n\n<ng-template #spaceTemplate>\n  &nbsp;\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgTemplateOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-and',\r\n  standalone: true,\r\n  imports: [NgTemplateOutlet],\r\n  template: `\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n    <strong>AND</strong>\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n\r\n    <ng-template #spaceTemplate>\r\n      &nbsp;\r\n    </ng-template>\r\n  `,\r\n})\r\nexport class AndLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "AnyOfSchemaComponent",
            "id": "component-AnyOfSchemaComponent-14b01b106e8681e406c2083a7cf7fc45f437712df078f5c7e4de89f14534d11cd201cc56ea0ad0c503fe061753cbbaac0e1e34594bf5d41f97f0dcca9e376dc2",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/any-of.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-composition-any-of",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span class=\"badge badge--info\">{{ typeOf }}</span>\n  <mat-tab-group>\n    <mat-tab *ngFor=\"let compositeSchema of typedSchema\">\n      <ng-template mat-tab-label>\n        <jsv-friendly-name [schema]=\"compositeSchema\" />\n      </ng-template>\n      <jse-common-create-nodes [schema]=\"compositeSchema\" />\n    </mat-tab>\n  </mat-tab-group>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 34,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateNodesComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\n\r\nimport { GenerateFriendlyNameComponent } from \"../../utils/index\";\r\nimport { CreateNodesComponent } from \"../../common/create-nodes\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-composition-any-of',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatTabsModule, \r\n    forwardRef(() => GenerateFriendlyNameComponent), \r\n    forwardRef(() => CreateNodesComponent)\r\n  ],\r\n  template: `\r\n    <div>\r\n      <span class=\"badge badge--info\">{{ typeOf }}</span>\r\n      <mat-tab-group>\r\n        <mat-tab *ngFor=\"let compositeSchema of typedSchema\">\r\n          <ng-template mat-tab-label>\r\n            <jsv-friendly-name [schema]=\"compositeSchema\" />\r\n          </ng-template>\r\n          <jse-common-create-nodes [schema]=\"compositeSchema\" />\r\n        </mat-tab>\r\n      </mat-tab-group>\r\n    </div>\r\n  `,\r\n})\r\nexport class AnyOfSchemaComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): JSONSchema[] {\r\n    return this.schema.anyOf! as JSONSchema[];\r\n  }\r\n\r\n  get typeOf(): string {\r\n    return \"anyOf\";\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 36
                    }
                },
                "typeOf": {
                    "name": "typeOf",
                    "getSignature": {
                        "name": "typeOf",
                        "type": "string",
                        "returnType": "string",
                        "line": 40
                    }
                }
            }
        },
        {
            "name": "ArrayContainsNumberComponent",
            "id": "component-ArrayContainsNumberComponent-8466e9ab91d15a234dc55602e9bd69125a7f72aac229c31ad90ddd39e59ff504e7b26e868cb4d836a9e15388f866b31db7af219986b73e70f97106bec03cb533",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-contains-number.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-array-contains",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <strong>Must contain : </strong>\n    <ng-container *ngIf=\"typedSchema.minContains\">\n      <code>\n        {{ getMinContainsLabel(typedSchema.minContains) }}\n      </code>\n    </ng-container>\n    <ng-container *ngIf=\"hasMinAndMax\">\n      <labels-and></labels-and>\n    </ng-container>\n    <ng-container *ngIf=\"typedSchema.maxContains !== undefined\">\n      <code>\n        {{ getMaxContainsLabel(typedSchema.maxContains) }}\n      </code>\n    </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 34,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getMaxContainsLabel",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMinContainsLabel",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AndLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AndLabelComponent } from \"../../labels/and-label\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from '../../types';\r\n\r\ntype typedJSONArraySchema = JSONSchemaNS.Array;\r\n\r\n@Component({\r\n    selector: 'qm-array-contains',\r\n    standalone: true,\r\n    template: `\r\n  <div>\r\n      <strong>Must contain : </strong>\r\n      <ng-container *ngIf=\"typedSchema.minContains\">\r\n        <code>\r\n          {{ getMinContainsLabel(typedSchema.minContains) }}\r\n        </code>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"hasMinAndMax\">\r\n        <labels-and></labels-and>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"typedSchema.maxContains !== undefined\">\r\n        <code>\r\n          {{ getMaxContainsLabel(typedSchema.maxContains) }}\r\n        </code>\r\n      </ng-container>\r\n  </div>\r\n  `,\r\n    imports: [CommonModule, AndLabelComponent]\r\n})\r\nexport class ArrayContainsNumberComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): typedJSONArraySchema {\r\n    return this.schema as typedJSONArraySchema;\r\n  }\r\n\r\n  // minContains\r\n  getMinContainsLabel(value: number): string {\r\n    return `at least ${value} valid item(s)`;\r\n  }\r\n\r\n  // maxContains\r\n  getMaxContainsLabel(value: number): string {\r\n    return `at most ${value} valid item(s)`;\r\n  }\r\n\r\n  get hasMinAndMax() : boolean {\r\n    return this.typedSchema.minContains !== undefined && this.typedSchema.maxContains !== undefined;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "typedJSONArraySchema",
                        "line": 36
                    }
                },
                "hasMinAndMax": {
                    "name": "hasMinAndMax",
                    "getSignature": {
                        "name": "hasMinAndMax",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 50
                    }
                }
            }
        },
        {
            "name": "ArrayLabelComponent",
            "id": "component-ArrayLabelComponent-949f58936c4f5a3f6ebe8a40d08a7d7d273e269873ca5133e6c2fc1052c7cdfee471acba5465097175fd1a82335b9962152ede1974a946d550df6cd3a3e06a04",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/array-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-array",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n    array\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-array',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n        array\r\n    </span>\r\n  `,\r\n})\r\nexport class ArrayLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ArrayNumberOfItemsComponent",
            "id": "component-ArrayNumberOfItemsComponent-f6b7a9f16faf59f94b519ba94529afcdc7f6ca806261e8c06420f6d43e95f424d54662af751604c2e8f9227afda5451747081bb913c691743e72f44ef36af2a7",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-number-of-items.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-array-number-of-items",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <strong>Length :</strong>\n    &nbsp;\n    <ng-container *ngIf=\"typedSchema.minItems !== undefined\">\n      <code>\n        {{ getMinItemsLabel(typedSchema.minItems!) }}\n      </code>\n    </ng-container>\n    <ng-container *ngIf=\"hasMinAndMax\">\n      <labels-and></labels-and>\n    </ng-container>\n    <ng-container *ngIf=\"typedSchema.maxItems !== undefined\">\n      <code>\n        {{ getMaxItemsLabel(typedSchema.maxItems!) }}\n      </code>\n    </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 34,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getMaxItemsLabel",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMinItemsLabel",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AndLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AndLabelComponent } from \"../../labels/and-label\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from '../../types';\r\ntype typedJSONArraySchema = JSONSchemaNS.Array;\r\n\r\n@Component({\r\n  selector: 'qm-array-number-of-items',\r\n  standalone: true,\r\n  imports: [CommonModule,AndLabelComponent],\r\n  template: `\r\n    <div>\r\n        <strong>Length :</strong>\r\n        &nbsp;\r\n        <ng-container *ngIf=\"typedSchema.minItems !== undefined\">\r\n          <code>\r\n            {{ getMinItemsLabel(typedSchema.minItems!) }}\r\n          </code>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"hasMinAndMax\">\r\n          <labels-and></labels-and>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"typedSchema.maxItems !== undefined\">\r\n          <code>\r\n            {{ getMaxItemsLabel(typedSchema.maxItems!) }}\r\n          </code>\r\n        </ng-container>\r\n    </div>\r\n  `\r\n})\r\nexport class ArrayNumberOfItemsComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): typedJSONArraySchema {\r\n    return this.schema as typedJSONArraySchema;\r\n  }\r\n\r\n  // minItems\r\n  getMinItemsLabel(value: number): string {\r\n    return `>= ${value}`;\r\n  }\r\n\r\n  // maxItems\r\n  getMaxItemsLabel(value: number): string {\r\n    return `<= ${value}`;\r\n  }\r\n\r\n  get hasMinAndMax(): boolean {\r\n    return this.typedSchema.minItems !== undefined && this.typedSchema.maxItems !== undefined;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "typedJSONArraySchema",
                        "line": 36
                    }
                },
                "hasMinAndMax": {
                    "name": "hasMinAndMax",
                    "getSignature": {
                        "name": "hasMinAndMax",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 50
                    }
                }
            }
        },
        {
            "name": "ArrayUniqueItemsComponent",
            "id": "component-ArrayUniqueItemsComponent-0508de229828b1d37a2e500a2a06118e4756dfbdbcb09ebb7d21ec436dd537beee4a39828b1a29d4d5c7a5cdf1a938f24ccbdfbded20b010bedc7f11682f49ec",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-unique-items.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-array-unique-items",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <strong>Unique items :</strong>\n    &nbsp;\n    <code>yes</code>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-array-unique-items',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n  <div>\r\n      <strong>Unique items :</strong>\r\n      &nbsp;\r\n      <code>yes</code>\r\n  </div>\r\n  `\r\n})\r\nexport class ArrayUniqueItemsComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "BooleanLabelComponent",
            "id": "component-BooleanLabelComponent-dc95b4c36961ea8797706b71628ecbd9d95846a9855381c0fdfd1dd403abfc15ecd3459a2e3a8735544da86257ba9459073b63fcabe20b18fd41bbf4e6542966",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/boolean-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-boolean",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n    boolean\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-boolean',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n        boolean\r\n    </span>\r\n  `,\r\n})\r\nexport class BooleanLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ConstantComponent",
            "id": "component-ConstantComponent-4816735e9c57d881dbc1031a0125318ebe008049f86ee139be46c8732302b8cecea264ee50f825033b6bd2219e6d295c85e44bd7b0b44705692a9fe487db7d45",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/constant.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-constant",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <strong>Constant value :</strong>\n    &nbsp;\n    <lib-print-schema-type [obj]=\"constValue()\" />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 19,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-constant',\r\n  standalone: true,\r\n  imports: [PrintSchemaTypeComponent],\r\n  template: `\r\n  <div>\r\n      <strong>Constant value :</strong>\r\n      &nbsp;\r\n      <lib-print-schema-type [obj]=\"constValue()\" />\r\n  </div>\r\n  `\r\n})\r\nexport class ConstantComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get constValue(): any {\r\n    return this.schema.const;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "constValue": {
                    "name": "constValue",
                    "getSignature": {
                        "name": "constValue",
                        "type": "any",
                        "returnType": "any",
                        "line": 21
                    }
                }
            }
        },
        {
            "name": "ContentEncodingComponent",
            "id": "component-ContentEncodingComponent-8dee6b50d4a674f6070996770ae0cd8e325aefcefbc6b4ee70c4afee79a8a6996e97c45b86d61ded9c4dc7f07edec5a8e8fa42c70f69585f69ab67f79ec2a063",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-encoding.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-content-encoding",
            "styleUrls": [],
            "styles": [],
            "template": "<div *ngIf=\"schema\" key=\"contentEncoding\">\n  <strong>Encoding :</strong>\n  &nbsp;\n  <lib-print-schema-type [obj]=\"schema.contentEncoding\" />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 20,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport type { JSONSchema } from '../../types';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\n@Component({\r\n  selector: 'qm-content-encoding',\r\n  standalone: true,\r\n  imports: [CommonModule,PrintSchemaTypeComponent],\r\n  template: `\r\n    <div *ngIf=\"schema\" key=\"contentEncoding\">\r\n      <strong>Encoding :</strong>\r\n      &nbsp;\r\n      <lib-print-schema-type [obj]=\"schema.contentEncoding\" />\r\n    </div>\r\n  `,\r\n})\r\nexport class ContentEncodingComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ContentMediaTypeComponent",
            "id": "component-ContentMediaTypeComponent-ab755b1b94168d7d29d95a15488cd7fa0a2c61b442a8ac3261f60db57c223ce4148d4c513c65b992d40323c7e8a4a596e55c006d50e1f2425f7d224dca59b503",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-media.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-content-media-type",
            "styleUrls": [],
            "styles": [],
            "template": "<div key=\"contentMediaType\">\n  <strong>Media type :</strong>\n  &nbsp;\n  <lib-print-schema-type [obj]=\"schema.contentMediaType\" />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 19,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-content-media-type',\r\n  standalone: true,\r\n  imports: [PrintSchemaTypeComponent],\r\n  template: `\r\n    <div key=\"contentMediaType\">\r\n      <strong>Media type :</strong>\r\n      &nbsp;\r\n      <lib-print-schema-type [obj]=\"schema.contentMediaType\" />\r\n    </div>\r\n  `,\r\n})\r\nexport class ContentMediaTypeComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ContentSchemaComponent",
            "id": "component-ContentSchemaComponent-2549a60c18e97150879d72f01747c305ce6f79d60b5e3dc5c2a958cebe84b6400992a5ff9bbfd0d1c744beb438bb485d99444d0df07801d9e11574f5fb00ff31",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-schema.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-content-schema",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ contentSchemaLabel }}</strong>\n  &nbsp;\n  <mat-accordion>\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          {{ title }}\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <ng-template matExpansionPanelContent>\n        <jse-common-create-nodes [schema]=\"schema.contentSchema!\"/>\n      </ng-template>\n    </mat-expansion-panel>\n  </mat-accordion>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 38,
                    "type": "JSONSchemaNS.String",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contentSchemaLabel",
                    "defaultValue": "'Decoded content must be validated against this schema :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "title",
                    "defaultValue": "'Schema'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateNodesComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\n\r\nimport {\r\n  CreateNodesComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\"\r\n\r\n@Component({\r\n  selector: 'qm-content-schema',\r\n  standalone: true,\r\n  imports: [\r\n    MatExpansionModule,\r\n    forwardRef(() => CreateNodesComponent)\r\n  ],\r\n  template: `\r\n    <div>\r\n      <strong>{{ contentSchemaLabel }}</strong>\r\n      &nbsp;\r\n      <mat-accordion>\r\n        <mat-expansion-panel>\r\n          <mat-expansion-panel-header>\r\n            <mat-panel-title>\r\n              {{ title }}\r\n            </mat-panel-title>\r\n          </mat-expansion-panel-header>\r\n          <ng-template matExpansionPanelContent>\r\n            <jse-common-create-nodes [schema]=\"schema.contentSchema!\"/>\r\n          </ng-template>\r\n        </mat-expansion-panel>\r\n      </mat-accordion>\r\n    </div>\r\n  `,\r\n})\r\nexport class ContentSchemaComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.String;\r\n\r\n  // Translated Label\r\n  contentSchemaLabel = 'Decoded content must be validated against this schema :';\r\n\r\n  // TODO maybe later refactor this name ...\r\n  title = 'Schema';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateAdditionalItemsComponent",
            "id": "component-CreateAdditionalItemsComponent-1380ffc074b0314f946630af976cd8a5e13d31c48f6f638147d6ac3cbbb1b77f5ffde3f0e2ec491aafd4d255129d396797d2847cf2509a7d3ce7d99406815633",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/additional-items.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array-additional-items",
            "styleUrls": [],
            "styles": [],
            "template": "<ul *ngIf=\"items !== undefined\">\n  <jse-common-create-edge [schema]=\"items\" [required]=\"isMinItemsValid()\">\n    <code name>\n      {{ additionalItemsLabel(startingIndex) }}\n    </code>\n  </jse-common-create-edge>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 28,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "additionalItemsLabel",
                    "args": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isMinItemsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'jse-array-additional-items',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  template: `\r\n    <ul *ngIf=\"items !== undefined\">\r\n      <jse-common-create-edge [schema]=\"items\" [required]=\"isMinItemsValid()\">\r\n        <code name>\r\n          {{ additionalItemsLabel(startingIndex) }}\r\n        </code>\r\n      </jse-common-create-edge>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateAdditionalItemsComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n  get items() : JSONSchema | undefined {\r\n    return this.schema.additionalItems;\r\n  }\r\n  \r\n  get startingIndex() : number {\r\n    return Array.isArray(this.schema.items) ? this.schema.items.length : 1;\r\n  }\r\n\r\n  isMinItemsValid(): boolean {\r\n    return (\r\n      this.schema.minItems !== undefined && this.startingIndex >= this.schema.minItems - 1\r\n    );\r\n  }\r\n\r\n  additionalItemsLabel(count: number): string {\r\n    return `items[${count},...]`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "items": {
                    "name": "items",
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "JSONSchema | undefined",
                        "line": 30
                    }
                },
                "startingIndex": {
                    "name": "startingIndex",
                    "getSignature": {
                        "name": "startingIndex",
                        "type": "number",
                        "returnType": "number",
                        "line": 34
                    }
                }
            }
        },
        {
            "name": "CreateAdditionalPropertiesComponent",
            "id": "component-CreateAdditionalPropertiesComponent-ce2fde7d8a48bdd575003d562c2bfc19220bdeb76efa93f6b1f33641264bd4ce3c32c0229e40215a81665fbf214c6fc5fa2d5508b5a4d6bc751a138e299c30dd",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/additional-properties.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-additional-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<ul *ngIf=\"!isUndefinedOrBoolean(additionalProperties)\">\n  <jse-common-create-edge [schema]=\"additionalProperties!\" [required]=\"false\">\n    <code name>\n      {{ additionalPropertiesLabel() }}\n    </code>\n  </jse-common-create-edge>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 28,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "additionalPropertiesLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isUndefinedOrBoolean",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-additional-properties',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  template: `\r\n    <ul *ngIf=\"!isUndefinedOrBoolean(additionalProperties)\">\r\n      <jse-common-create-edge [schema]=\"additionalProperties!\" [required]=\"false\">\r\n        <code name>\r\n          {{ additionalPropertiesLabel() }}\r\n        </code>\r\n      </jse-common-create-edge>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateAdditionalPropertiesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  get additionalProperties() {\r\n    return this.schema.additionalProperties;\r\n  }\r\n\r\n  isUndefinedOrBoolean(value: any): boolean {\r\n    return value === undefined || typeof value === 'boolean';\r\n  }\r\n\r\n  additionalPropertiesLabel(): string {\r\n    return `property name*`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "additionalProperties": {
                    "name": "additionalProperties",
                    "getSignature": {
                        "name": "additionalProperties",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                }
            }
        },
        {
            "name": "CreateAlwaysInvalidComponent",
            "id": "component-CreateAlwaysInvalidComponent-e61417fe784e637e3bca52ad2805057f3b18def0134734bef7a465eddd44680a7708febdb3f72ba45eadfb42d06c32662baebd11ebe9fcd3e6cf2011ed268e58",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-always-invalid.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-always-invalid",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-false></labels-false>\n  <div style=\"margin-top: 0.75rem;\">\n    {{ \"Always invalid\" }}\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "FalseLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    FalseLabelComponent\r\n} from \"../labels/index\";\r\n\r\n@Component({\r\n  selector: 'jse-always-invalid',\r\n  standalone: true,\r\n  imports: [TypeLabelComponent, FalseLabelComponent],\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-false></labels-false>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        {{ \"Always invalid\" }}\r\n      </div>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateAlwaysInvalidComponent {\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateAlwaysValidComponent",
            "id": "component-CreateAlwaysValidComponent-c77dbf7d1f6685764c9d68881a65720495ae8414a18cf0b86f4248b7f76c9c3a7eeb497589cbfaa4e28f4e50e32c5d7903a5a72057f99a1b7b1949e2be0a6d3e",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-always-valid.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-always-valid",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-true></labels-true>\n  <div style=\"margin-top: 0.75rem;\">\n    {{ \"Always valid\" }}\n  </div>\n  <div style=\"margin-top: 0.75rem;\" *ngIf=\"notBoolean\" >\n    <qm-messages [schema]=\"typedSchema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\"></jse-description>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 48,
                    "type": "JSONSchema",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "TrueLabelComponent",
                    "type": "component"
                },
                {
                    "name": "QualifierMessages"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateDescriptionComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    TrueLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n  CreateDescriptionComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n  QualifierMessages\r\n} from \"../utils/index\";\r\n\r\nimport type { JSONSchema } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-always-valid',\r\n  standalone: true,\r\n  imports: [\r\n    TypeLabelComponent, \r\n    TrueLabelComponent, \r\n    QualifierMessages, \r\n    CommonModule,\r\n    forwardRef(() => CreateDescriptionComponent)\r\n  ],\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-true></labels-true>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        {{ \"Always valid\" }}\r\n      </div>\r\n      <div style=\"margin-top: 0.75rem;\" *ngIf=\"notBoolean\" >\r\n        <qm-messages [schema]=\"typedSchema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\"></jse-description>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateAlwaysValidComponent {\r\n  @Input({ required: true }) schema!: JSONSchema;\r\n\r\n  get notBoolean(): boolean {\r\n    return typeof this.schema !== \"boolean\";\r\n  }\r\n\r\n  get typedSchema(): Exclude<JSONSchema, true | false> {\r\n    return this.schema as Exclude<JSONSchema, true | false>;\r\n  }\r\n\r\n  get description(): string | undefined {\r\n    return typeof this.schema !== \"boolean\" ? this.schema.description : undefined;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "notBoolean": {
                    "name": "notBoolean",
                    "getSignature": {
                        "name": "notBoolean",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 50
                    }
                },
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "Exclude<JSONSchema,  | >",
                        "line": 54
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 58
                    }
                }
            }
        },
        {
            "name": "CreateArrayComponent",
            "id": "component-CreateArrayComponent-70ba8975de7a67d0c53ddbb81ca73b29f7300e09e6bb4e11285960a48968ce9d8a164627f1c99e3e9526bddd71b6f6cff008828bbd98dcede78ec3bdd0f57254",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/index.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type />\n  &nbsp;&#58;&nbsp;\n  <labels-array />\n  <jse-array-prefix-items [schema]=\"schema\" />\n  <jse-array-items [schema]=\"schema\" />\n  <jse-array-additional-items [schema]=\"schema\" />\n  <jse-array-unevaluated-items [schema]=\"schema\" />\n  <jse-array-contains [schema]=\"schema\" />\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\"></jse-description>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 56,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ArrayLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateDescriptionComponent)",
                    "type": "component"
                },
                {
                    "name": "QualifierMessages"
                },
                {
                    "name": "CreateAdditionalItemsComponent",
                    "type": "component"
                },
                {
                    "name": "CreateContainsComponent",
                    "type": "component"
                },
                {
                    "name": "CreateItemsComponent",
                    "type": "component"
                },
                {
                    "name": "CreatePrefixItemsComponent",
                    "type": "component"
                },
                {
                    "name": "CreateUnevaluatedItemsComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport { \r\n    TypeLabelComponent,\r\n    ArrayLabelComponent\r\n } from \"../../labels/index\";\r\nimport { \r\n    CreateDescriptionComponent\r\n } from \"../index\";\r\nimport { CreatePrefixItemsComponent } from \"./prefix-items\";\r\nimport { CreateItemsComponent } from \"./items\";\r\nimport { CreateAdditionalItemsComponent } from \"./additional-items\";\r\nimport { CreateUnevaluatedItemsComponent } from \"./unevaluated-items\";\r\nimport { CreateContainsComponent } from \"./contains\";\r\n\r\nimport { QualifierMessages } from \"../../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-array',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    TypeLabelComponent, \r\n    ArrayLabelComponent,\r\n    forwardRef(() => CreateDescriptionComponent),\r\n    QualifierMessages,\r\n    CreateAdditionalItemsComponent,\r\n    CreateContainsComponent,\r\n    CreateItemsComponent,\r\n    CreatePrefixItemsComponent,\r\n    CreateUnevaluatedItemsComponent\r\n  ],\r\n  template: `\r\n    <div>\r\n      <labels-type />\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-array />\r\n      <jse-array-prefix-items [schema]=\"schema\" />\r\n      <jse-array-items [schema]=\"schema\" />\r\n      <jse-array-additional-items [schema]=\"schema\" />\r\n      <jse-array-unevaluated-items [schema]=\"schema\" />\r\n      <jse-array-contains [schema]=\"schema\" />\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\"></jse-description>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateArrayComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateBooleanComponent",
            "id": "component-CreateBooleanComponent-dfe1f0167e69b8911658ec54572f4fda39913d3d56ecafd97b730aafe12c65079c937e99a8a0c8b2c8f176119ccf44ff641668ce1fbf23a7571a44bb0351b8e4",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-boolean.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-boolean",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-boolean></labels-boolean>\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\"></jse-description>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 45,
                    "type": "JSONSchemaNS.Boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "BooleanLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateDescriptionComponent)",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    CreateDescriptionComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    BooleanLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    QualifierMessages\r\n} from \"../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-boolean',\r\n  standalone: true,\r\n  imports: [\r\n    TypeLabelComponent, \r\n    BooleanLabelComponent,\r\n    forwardRef(() => CreateDescriptionComponent),\r\n    CommonModule,\r\n    QualifierMessages\r\n  ],\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-boolean></labels-boolean>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\"></jse-description>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateBooleanComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Boolean;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateContainsComponent",
            "id": "component-CreateContainsComponent-6596104c749919a0c4026228ddeabe39592676a5a28f76285d426ad845e5841e9b1000157aec2f05d395c26ddea08ec3fe5f8253918e32ef63ae67c27da6041f",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/contains.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array-contains",
            "styleUrls": [],
            "styles": [],
            "template": "<ul *ngIf=\"item !== undefined\">\n  <jse-common-create-edge [schema]=\"item\" [required]=\"isMinContainsValid()\">\n    <code name>\n      {{ containsLabel }}\n    </code>\n  </jse-common-create-edge>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 28,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isMinContainsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'jse-array-contains',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  template: `\r\n    <ul *ngIf=\"item !== undefined\">\r\n      <jse-common-create-edge [schema]=\"item\" [required]=\"isMinContainsValid()\">\r\n        <code name>\r\n          {{ containsLabel }}\r\n        </code>\r\n      </jse-common-create-edge>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateContainsComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n  get item() : JSONSchema | undefined {\r\n    return this.schema.contains;\r\n  }\r\n\r\n  get containsLabel() {\r\n    return `items[..., x, ...]`;\r\n  }\r\n\r\n  isMinContainsValid(): boolean {\r\n    return this.schema.minContains !== undefined && this.schema.minContains > 0;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "item": {
                    "name": "item",
                    "getSignature": {
                        "name": "item",
                        "type": "",
                        "returnType": "JSONSchema | undefined",
                        "line": 30
                    }
                },
                "containsLabel": {
                    "name": "containsLabel",
                    "getSignature": {
                        "name": "containsLabel",
                        "type": "",
                        "returnType": "",
                        "line": 34
                    }
                }
            }
        },
        {
            "name": "CreateDescriptionComponent",
            "id": "component-CreateDescriptionComponent-b877d74f678dc4b60b488b00067df1f6f683eb1a37413ca67c008764ed74d59a887e65f888526bd234af9fb2e32d3a66822f09dbe5cf6cd9193bf631045e91b2",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-description.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-description",
            "styleUrls": [],
            "styles": [],
            "template": "<div style=\"margin-top: 0.75rem;\">\n  {{ description }}\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'jse-description',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div style=\"margin-top: 0.75rem;\">\r\n      {{ description }}\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateDescriptionComponent {\r\n  @Input() description!: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateEdgeComponent",
            "id": "component-CreateEdgeComponent-9bbadc326a8000ccf90528fd66702cce8921399cd7076dc1873554259f7e475de13b62650ece822f4f82c5f29dc52162e3a839d9ff11ab998d73d3e1480af746",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/create-edge.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-create-edge",
            "styleUrls": [
                "./create-edge.component.css"
            ],
            "styles": [],
            "template": "<li class=\"schemaItem\">\n    <mat-accordion>\n        <mat-expansion-panel>\n            <mat-expansion-panel-header>\n                <mat-panel-title>\n                    <ng-content select=\"[name]\" />\n                    &nbsp;\n                    <jsv-friendly-name [schema]=\"schema\" />\n                </mat-panel-title>\n                <mat-panel-description>\n                    <labels-required *ngIf=\"isRequired\" />\n                    <ng-container *ngIf=\"isRequired\" >\n                        &nbsp;\n                    </ng-container>\n                    <labels-deprecated *ngIf=\"isDeprecated\" />\n                    <ng-container *ngIf=\"isDeprecated\" >\n                        &nbsp;\n                    </ng-container>\n                    <labels-read-only *ngIf=\"isReadOnly\" />\n                    <ng-container *ngIf=\"isReadOnly\" >\n                        &nbsp;\n                    </ng-container>\n                    <labels-write-only *ngIf=\"isWriteOnly\" />\n                </mat-panel-description>\n            </mat-expansion-panel-header>\n            <ng-template matExpansionPanelContent>\n              <jse-common-create-nodes [schema]=\"schema\" />\n            </ng-template>\n        </mat-expansion-panel>\n    </mat-accordion>\n</li>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 71,
                    "type": "JSONSchema",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "GenerateFriendlyNameComponent",
                    "type": "component"
                },
                {
                    "name": "RequiredLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ReadOnlyLabelComponent",
                    "type": "component"
                },
                {
                    "name": "WriteOnlyLabelComponent",
                    "type": "component"
                },
                {
                    "name": "DeprecatedLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateNodesComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\n\r\nimport {\r\n    GenerateFriendlyNameComponent\r\n} from \"../utils/index\";\r\n\r\nimport {\r\n    RequiredLabelComponent,\r\n    ReadOnlyLabelComponent,\r\n    WriteOnlyLabelComponent,\r\n    DeprecatedLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    CreateNodesComponent\r\n} from \"./index\";\r\n\r\nimport type { JSONSchema, JSONSchema_Draft_2019_09 } from '../types';\r\n\r\n@Component({\r\n  selector: 'jse-common-create-edge',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatExpansionModule,\r\n    GenerateFriendlyNameComponent,\r\n    RequiredLabelComponent,\r\n    ReadOnlyLabelComponent,\r\n    WriteOnlyLabelComponent,\r\n    DeprecatedLabelComponent,\r\n    forwardRef(() => CreateNodesComponent)\r\n  ],\r\n  template: `\r\n    <li class=\"schemaItem\">\r\n        <mat-accordion>\r\n            <mat-expansion-panel>\r\n                <mat-expansion-panel-header>\r\n                    <mat-panel-title>\r\n                        <ng-content select=\"[name]\" />\r\n                        &nbsp;\r\n                        <jsv-friendly-name [schema]=\"schema\" />\r\n                    </mat-panel-title>\r\n                    <mat-panel-description>\r\n                        <labels-required *ngIf=\"isRequired\" />\r\n                        <ng-container *ngIf=\"isRequired\" >\r\n                            &nbsp;\r\n                        </ng-container>\r\n                        <labels-deprecated *ngIf=\"isDeprecated\" />\r\n                        <ng-container *ngIf=\"isDeprecated\" >\r\n                            &nbsp;\r\n                        </ng-container>\r\n                        <labels-read-only *ngIf=\"isReadOnly\" />\r\n                        <ng-container *ngIf=\"isReadOnly\" >\r\n                            &nbsp;\r\n                        </ng-container>\r\n                        <labels-write-only *ngIf=\"isWriteOnly\" />\r\n                    </mat-panel-description>\r\n                </mat-expansion-panel-header>\r\n                <ng-template matExpansionPanelContent>\r\n                  <jse-common-create-nodes [schema]=\"schema\" />\r\n                </ng-template>\r\n            </mat-expansion-panel>\r\n        </mat-accordion>\r\n    </li>\r\n  `,\r\n  styleUrls: ['./create-edge.component.css']\r\n})\r\nexport class CreateEdgeComponent {\r\n  @Input({ required: true }) schema!: JSONSchema;\r\n  @Input({ required: true }) required!: boolean;\r\n\r\n  get isDeprecated(): boolean {\r\n    const typedSchema = this.schema as JSONSchema_Draft_2019_09;\r\n    return typeof typedSchema !== \"boolean\" && typedSchema.deprecated === true;\r\n  }\r\n\r\n  get isReadOnly(): boolean {\r\n    return typeof this.schema !== \"boolean\" && this.schema.readOnly === true;\r\n  }\r\n\r\n  get isWriteOnly(): boolean {\r\n    return typeof this.schema !== \"boolean\" && this.schema.writeOnly === true;\r\n  }\r\n\r\n  get isRequired(): boolean {\r\n    return !this.isDeprecated && this.required;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* create-edge.component.css or create-edge.component.scss */\r\n\r\n.schemaItem {\r\n    list-style: none;\r\n    position: relative;\r\n    margin: 0 !important;\r\n    padding: 5px 0 5px 1rem;\r\n    border-left: thin solid #bec3c9 !important;\r\n}\r\n\r\n.schemaItem:hover {\r\n    background-color: #ffffff0d;\r\n}\r\n\r\n.schemaItem:focus {\r\n    background-color: #ffffff0d;\r\n}\r\n  \r\n[class^=\"schemaItem\"]::before {\r\n    border-bottom: thin solid #bec3c9;\r\n    content: \"\";\r\n    display: inline-block;\r\n    height: 0.5rem;\r\n    left: 0;\r\n    position: absolute;\r\n    top: 10px;\r\n    vertical-align: top;\r\n    width: 0.7rem;\r\n}\r\n  \r\n.schemaName {\r\n    opacity: 0.6;\r\n}\r\n\r\n.strikethrough {\r\n    text-decoration: line-through;\r\n}\r\n  ",
                    "styleUrl": "./create-edge.component.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "isDeprecated": {
                    "name": "isDeprecated",
                    "getSignature": {
                        "name": "isDeprecated",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 74
                    }
                },
                "isReadOnly": {
                    "name": "isReadOnly",
                    "getSignature": {
                        "name": "isReadOnly",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 79
                    }
                },
                "isWriteOnly": {
                    "name": "isWriteOnly",
                    "getSignature": {
                        "name": "isWriteOnly",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 83
                    }
                },
                "isRequired": {
                    "name": "isRequired",
                    "getSignature": {
                        "name": "isRequired",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 87
                    }
                }
            }
        },
        {
            "name": "CreateIntegerComponent",
            "id": "component-CreateIntegerComponent-bfd5439c633794684a336ba092ed385e4d31807dfb2dd1469543aebf4a360eb9e82f1e8030e9fa5a1496fc8993c8a38250c119fe8f58911b2f9359b3b62fc618",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-integer.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-integer",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-integer></labels-integer>\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\"></jse-description>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 45,
                    "type": "JSONSchemaNS.Integer",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "IntegerLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateDescriptionComponent)",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    CreateDescriptionComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    IntegerLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    QualifierMessages\r\n} from \"../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-integer',\r\n  standalone: true,\r\n  imports: [\r\n    TypeLabelComponent, \r\n    IntegerLabelComponent,\r\n    forwardRef(() => CreateDescriptionComponent),\r\n    CommonModule,\r\n    QualifierMessages\r\n  ],\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-integer></labels-integer>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\"></jse-description>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateIntegerComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Integer;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateItemsComponent",
            "id": "component-CreateItemsComponent-d2ad652dd93eea5edb08927a07e32cfdce16a536d0e9cd2649f878fa3ede56275945197e017134497fa13282f49d2409e80b9ed4f90741439f7dcd1f6efd84c3",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/items.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array-items",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <jse-common-create-edge [schema]=\"item\" [required]=\"isMinItemsValid()\" *ngFor=\"let item of itemsAsArray; let idx = index\">\n    <code name>\n      {{ itemsLabel(startingIndex + idx, isArray) }}\n    </code>\n  </jse-common-create-edge>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 28,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isMinItemsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "itemsLabel",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isArray",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isArray",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-array-items',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  template: `\r\n    <ul>\r\n      <jse-common-create-edge [schema]=\"item\" [required]=\"isMinItemsValid()\" *ngFor=\"let item of itemsAsArray; let idx = index\">\r\n        <code name>\r\n          {{ itemsLabel(startingIndex + idx, isArray) }}\r\n        </code>\r\n      </jse-common-create-edge>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateItemsComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n  get itemsAsArray(): JSONSchema[] {\r\n    if (this.schema.items === undefined) {\r\n      return [];\r\n    }\r\n    return Array.isArray(this.schema.items) ? this.schema.items : [this.schema.items];\r\n  }\r\n\r\n  get startingIndex(): number {\r\n    return Array.isArray(this.schema.prefixItems) ? this.schema.prefixItems.length : 0;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return Array.isArray(this.schema.items);\r\n  }\r\n\r\n  isMinItemsValid(): boolean {\r\n    return this.schema.minItems !== undefined && this.schema.minItems >= this.itemsAsArray.length;\r\n  }\r\n\r\n  itemsLabel(index: number, isArray: boolean): string {\r\n    const finalIdx = isArray ? index.toString() : 'x';\r\n    return `items[${finalIdx}]`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "itemsAsArray": {
                    "name": "itemsAsArray",
                    "getSignature": {
                        "name": "itemsAsArray",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 30
                    }
                },
                "startingIndex": {
                    "name": "startingIndex",
                    "getSignature": {
                        "name": "startingIndex",
                        "type": "number",
                        "returnType": "number",
                        "line": 37
                    }
                },
                "isArray": {
                    "name": "isArray",
                    "getSignature": {
                        "name": "isArray",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 41
                    }
                }
            }
        },
        {
            "name": "CreateNodesComponent",
            "id": "component-CreateNodesComponent-4b4a3e46222a19114f9371b0a8125ad431ed93ddf8192a26a3a5cfa7f8aa2270c129409fe887936c951cae0182f09205c2a2b3cffe150bdc6e169920ebccfd52",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/create-nodes.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-create-nodes",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"typedSchema !== undefined; else BooleanSchema\">\n\n  <!-- Handle standard types -->\n  <jse-common-create-types [schema]=\"typedSchema\" />\n\n  <!-- Handle Composition -->\n  <ng-container *ngIf=\"isCompositionSchema\">\n    <jse-schema-composition [schema]=\"typedSchema\" />\n  </ng-container>\n\n  <!-- Handle Conditional -->\n  <ng-container *ngIf=\"isConditionalSchema\">\n    <jse-schema-conditional [schema]=\"typedSchema\" />\n  </ng-container>\n\n</ng-container>\n\n<ng-template #BooleanSchema>\n  <jse-common-create-valid-or-invalid [schema]=\"schema\" />\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 56,
                    "type": "JSONSchema",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => SchemaConditionalComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => SchemaCompositionComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateTypesComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateValidOrInvalidComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n    SchemaConditionalComponent,\r\n    SchemaCompositionComponent,\r\n} from \"../JSONSchemaElements/index\";\r\n\r\nimport {\r\n  isSchemaComposition,\r\n  isSchemaConditional,\r\n} from '../utils/index';\r\n\r\nimport {\r\n    CreateTypesComponent,\r\n    CreateValidOrInvalidComponent\r\n} from \"./index\";\r\n\r\nimport type { JSONSchema } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-common-create-nodes',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => SchemaConditionalComponent),\r\n    forwardRef(() => SchemaCompositionComponent),\r\n    forwardRef(() => CreateTypesComponent),\r\n    forwardRef(() => CreateValidOrInvalidComponent)\r\n  ],\r\n  template: `\r\n    <ng-container *ngIf=\"typedSchema !== undefined; else BooleanSchema\">\r\n\r\n      <!-- Handle standard types -->\r\n      <jse-common-create-types [schema]=\"typedSchema\" />\r\n\r\n      <!-- Handle Composition -->\r\n      <ng-container *ngIf=\"isCompositionSchema\">\r\n        <jse-schema-composition [schema]=\"typedSchema\" />\r\n      </ng-container>\r\n\r\n      <!-- Handle Conditional -->\r\n      <ng-container *ngIf=\"isConditionalSchema\">\r\n        <jse-schema-conditional [schema]=\"typedSchema\" />\r\n      </ng-container>\r\n      \r\n    </ng-container>\r\n\r\n    <ng-template #BooleanSchema>\r\n      <jse-common-create-valid-or-invalid [schema]=\"schema\" />\r\n    </ng-template>\r\n  `,\r\n})\r\nexport class CreateNodesComponent {\r\n  @Input({ required: true }) schema!: JSONSchema;\r\n\r\n  // Check if the schema is a composition\r\n  get isCompositionSchema() : boolean {\r\n    return isSchemaComposition(this.schema);\r\n  };\r\n\r\n  // Check if the schema is conditional\r\n  get isConditionalSchema() : boolean {\r\n    return isSchemaConditional(this.schema);\r\n  };\r\n  // Typed schema, if not a boolean\r\n  get typedSchema(): Exclude<JSONSchema, false | true> | undefined {\r\n    let isBooleanSchema = typeof this.schema === 'boolean';\r\n    if (!isBooleanSchema) {\r\n      return this.schema as Exclude<JSONSchema, false | true>;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  };\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "isCompositionSchema": {
                    "name": "isCompositionSchema",
                    "getSignature": {
                        "name": "isCompositionSchema",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 59
                    }
                },
                "isConditionalSchema": {
                    "name": "isConditionalSchema",
                    "getSignature": {
                        "name": "isConditionalSchema",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 64
                    }
                },
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "Exclude | undefined",
                        "line": 68
                    }
                }
            }
        },
        {
            "name": "CreateNullComponent",
            "id": "component-CreateNullComponent-43a0707c19feb2bf8f57186e331330b226e69c77f67a3afd252d67adfdbbaa08eceda021915488ea245f3053001b668a6178736acc6e2e017e701daeeaba2fe2",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-null.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-null",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-null></labels-null>\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\"></jse-description>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 45,
                    "type": "JSONSchemaNS.Null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "NullLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateDescriptionComponent)",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    CreateDescriptionComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    NullLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    QualifierMessages\r\n} from \"../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-null',\r\n  standalone: true,\r\n  imports: [\r\n    TypeLabelComponent, \r\n    NullLabelComponent,\r\n    forwardRef(() => CreateDescriptionComponent),\r\n    CommonModule,\r\n    QualifierMessages\r\n  ],\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-null></labels-null>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\"></jse-description>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateNullComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Null;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateNumberComponent",
            "id": "component-CreateNumberComponent-56eb37ded3f9162e1f77baeb39306f8587b1439f74049e0ab2e1023d1597887e9c65dfc7a1081f3aef487f99e847079a10dfec4288c1b1609e5f8c72c45e156f",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-number.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-number",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-number></labels-number>\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\"></jse-description>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 45,
                    "type": "JSONSchemaNS.Number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "NumberLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateDescriptionComponent)",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    CreateDescriptionComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    NumberLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    QualifierMessages\r\n} from \"../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-number',\r\n  standalone: true,\r\n  imports: [\r\n    TypeLabelComponent, \r\n    NumberLabelComponent,\r\n    forwardRef(() => CreateDescriptionComponent),\r\n    CommonModule,\r\n    QualifierMessages\r\n  ],\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-number></labels-number>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\"></jse-description>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateNumberComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Number;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateObjectComponent",
            "id": "component-CreateObjectComponent-cb2a7bf6bb776a20703b67503225ca4af5fc14644c6cf52ae55babb87c73acda0bf82ae09483bc1d3da05cc192e0329e04fa79832d7c7e6c4adaf67576e56fe5",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/index.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type />\n  &nbsp;&#58;&nbsp;\n  <labels-object />\n  <jse-object-unlisted-properties [schema]=\"schema\" />\n  <jse-object-properties [schema]=\"schema\" />\n  <jse-object-pattern-properties [schema]=\"schema\" />\n  <jse-object-property-names [schema]=\"schema\" />\n  <jse-object-additional-properties [schema]=\"schema\" />\n  <jse-object-unevaluated-properties [schema]=\"schema\" />\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\"></jse-description>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 59,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                },
                {
                    "name": "CreateUnlistedPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "CreatePropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "CreatePatternPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "PropertyNamesComponent",
                    "type": "component"
                },
                {
                    "name": "CreateAdditionalPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "CreateUnevaluatedPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "ObjectLabelComponent",
                    "type": "component"
                },
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateDescriptionComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport { CreateUnlistedPropertiesComponent } from \"./unlisted-required-properties\";\r\nimport { CreatePropertiesComponent } from \"./properties\";\r\nimport { CreatePatternPropertiesComponent } from \"./pattern-properties\";\r\nimport { PropertyNamesComponent } from \"./property-names\";\r\nimport { CreateAdditionalPropertiesComponent } from \"./additional-properties\";\r\nimport { CreateUnevaluatedPropertiesComponent } from \"./unevaluated-properties\";\r\n\r\nimport { QualifierMessages } from \"../../utils/index\";\r\n\r\nimport { \r\n    ObjectLabelComponent,\r\n    TypeLabelComponent\r\n} from \"../../labels/index\";\r\n\r\nimport { CreateDescriptionComponent } from \"../index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    QualifierMessages,\r\n    CreateUnlistedPropertiesComponent,\r\n    CreatePropertiesComponent,\r\n    CreatePatternPropertiesComponent,\r\n    PropertyNamesComponent,\r\n    CreateAdditionalPropertiesComponent,\r\n    CreateUnevaluatedPropertiesComponent,\r\n    ObjectLabelComponent,\r\n    TypeLabelComponent,\r\n    forwardRef(() => CreateDescriptionComponent)\r\n  ],\r\n  template: `\r\n    <div>\r\n      <labels-type />\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-object />\r\n      <jse-object-unlisted-properties [schema]=\"schema\" />\r\n      <jse-object-properties [schema]=\"schema\" />\r\n      <jse-object-pattern-properties [schema]=\"schema\" />\r\n      <jse-object-property-names [schema]=\"schema\" />\r\n      <jse-object-additional-properties [schema]=\"schema\" />\r\n      <jse-object-unevaluated-properties [schema]=\"schema\" />\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\"></jse-description>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateObjectComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreatePatternPropertiesComponent",
            "id": "component-CreatePatternPropertiesComponent-76f6b090713d59412ac45ffde3c3ddac3c50ce18e1862351dacedc18804c23295b86b80c8511b63ff41c1d51dd798c7903c276d3d4853ee9764c0ae570c50fb1",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/pattern-properties.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-pattern-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <jse-common-create-edge [schema]=\"entry[1]\" [required]=\"false\" *ngFor=\"let entry of patternPropertiesEntries\">\n    <code name>\n      {{ generatePropertyName(entry[0]) }}\n    </code>\n  </jse-common-create-edge>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 28,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "generatePropertyName",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-pattern-properties',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  template: `\r\n    <ul>\r\n      <jse-common-create-edge [schema]=\"entry[1]\" [required]=\"false\" *ngFor=\"let entry of patternPropertiesEntries\">\r\n        <code name>\r\n          {{ generatePropertyName(entry[0]) }}\r\n        </code>\r\n      </jse-common-create-edge>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreatePatternPropertiesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  get patternPropertiesEntries() {\r\n    return Object.entries(this.schema.patternProperties || {});\r\n  }\r\n\r\n  generatePropertyName(key: string): string {\r\n    return `${key}`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "patternPropertiesEntries": {
                    "name": "patternPropertiesEntries",
                    "getSignature": {
                        "name": "patternPropertiesEntries",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                }
            }
        },
        {
            "name": "CreatePrefixItemsComponent",
            "id": "component-CreatePrefixItemsComponent-b5ca67bc2a2ec086d5aa089f8b70d040e1dfc92c46924253b028accef668672461a52098911cf654549e9ce7b0f6af54618b4f89f66babef86b040cfedc2ed57",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/prefix-items.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array-prefix-items",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <jse-common-create-edge [schema]=\"val\" [required]=\"isMinItemsValid()\" *ngFor=\"let val of arrayItems; let idx = index\">\n    <code name>\n      {{ prefixItemsLabel(idx) }}\n    </code>\n  </jse-common-create-edge>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 28,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isMinItemsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prefixItemsLabel",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchema, JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-array-prefix-items',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  template: `\r\n    <ul>\r\n      <jse-common-create-edge [schema]=\"val\" [required]=\"isMinItemsValid()\" *ngFor=\"let val of arrayItems; let idx = index\">\r\n        <code name>\r\n          {{ prefixItemsLabel(idx) }}\r\n        </code>\r\n      </jse-common-create-edge>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreatePrefixItemsComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n  get arrayItems() : JSONSchema[] {\r\n    if (this.schema.prefixItems === undefined) {\r\n      return [];\r\n    }\r\n    return Array.isArray(this.schema.prefixItems) ? this.schema.prefixItems : [this.schema.prefixItems] as JSONSchema[];\r\n  } \r\n\r\n  isMinItemsValid(): boolean {\r\n    return this.schema.minItems !== undefined && this.schema.minItems >= this.arrayItems.length;\r\n  }\r\n\r\n  prefixItemsLabel(index: number): string {\r\n    return `items[${index}]`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "arrayItems": {
                    "name": "arrayItems",
                    "getSignature": {
                        "name": "arrayItems",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 30
                    }
                }
            }
        },
        {
            "name": "CreatePropertiesComponent",
            "id": "component-CreatePropertiesComponent-d282aeb38c63bf4a6cb733c0d4c5daa91bad0e0ba40a89063ba2c384839714af3321cbc65a8e6c14866c2f55c45e195418e2004f68fec2950605301259b35582",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/properties.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <jse-common-create-edge [schema]=\"entry[1]\" [required]=\"isRequired(entry[0])\" *ngFor=\"let entry of propertiesEntries\">\n    <strong name>\n      {{ generatePropertyName(entry[0]) }}\n    </strong>\n  </jse-common-create-edge>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 28,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "generatePropertyName",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isRequired",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-properties',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  template: `\r\n    <ul>\r\n      <jse-common-create-edge [schema]=\"entry[1]\" [required]=\"isRequired(entry[0])\" *ngFor=\"let entry of propertiesEntries\">\r\n        <strong name>\r\n          {{ generatePropertyName(entry[0]) }}\r\n        </strong>\r\n      </jse-common-create-edge>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreatePropertiesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  get propertiesEntries() {\r\n    return Object.entries(this.schema.properties || {});\r\n  }\r\n\r\n  generatePropertyName(key: string): string {\r\n    return `${key}`;\r\n  }\r\n\r\n  isRequired(key: string): boolean {\r\n    return Array.isArray(this.schema.required) ? this.schema.required.includes(key) : false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "propertiesEntries": {
                    "name": "propertiesEntries",
                    "getSignature": {
                        "name": "propertiesEntries",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                }
            }
        },
        {
            "name": "CreateStringComponent",
            "id": "component-CreateStringComponent-00a23de5433c83b8e354a7eab4c9274487c5bf164538034df12296d71ee8888510979e8e711c9bb2ec6f27a07ea4050495fc43d68f3ac11ecba825a7dbcc8d3d",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-string.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-string",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <labels-type></labels-type>\n  &nbsp;&#58;&nbsp;\n  <labels-string></labels-string>\n  <div style=\"margin-top: 0.75rem;\">\n    <qm-messages [schema]=\"schema\" />\n  </div>\n  <ng-container *ngIf=\"description\">\n    <jse-description [description]=\"description\"></jse-description>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 45,
                    "type": "JSONSchemaNS.String",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TypeLabelComponent",
                    "type": "component"
                },
                {
                    "name": "StringLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateDescriptionComponent)",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "QualifierMessages"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    CreateDescriptionComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelComponent,\r\n    StringLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport {\r\n    QualifierMessages\r\n} from \"../utils/index\";\r\n\r\nimport type { JSONSchemaNS } from '../types';\r\n\r\n\r\n@Component({\r\n  selector: 'jse-string',\r\n  standalone: true,\r\n  imports: [\r\n    TypeLabelComponent, \r\n    StringLabelComponent,\r\n    forwardRef(() => CreateDescriptionComponent),\r\n    CommonModule,\r\n    QualifierMessages\r\n  ],\r\n  template: `\r\n    <div>\r\n      <labels-type></labels-type>\r\n      &nbsp;&#58;&nbsp;\r\n      <labels-string></labels-string>\r\n      <div style=\"margin-top: 0.75rem;\">\r\n        <qm-messages [schema]=\"schema\" />\r\n      </div>\r\n      <ng-container *ngIf=\"description\">\r\n        <jse-description [description]=\"description\"></jse-description>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class CreateStringComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.String;\r\n  @Input() description?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreateTypesComponent",
            "id": "component-CreateTypesComponent-cbeca9c59af097c32dc247b7153ba3ef40f94b4166f9a8f7281db2659394336ab6bb90e28feef3541645c99ce40ce6d3a53e1bfbe5bec21038cab01330f98e23",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/create-types.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-create-types",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container>\n\n  <ng-container *ngIf=\"foundTypes.length > 0; else defaultCase\">\n    <!-- Case 1: Single type or type with null -->\n    <ng-container *ngIf=\"hasSingleType; else case2\">\n      <jse-common-render-provided-type [schema]=\"schema\" [type]=\"firstType\" [nullable]=\"hasNull\" />\n    </ng-container>\n\n    <!-- Case 2: Multiple types -->\n    <ng-template #case2>\n      <jse-common-multiple-types [schema]=\"schema\" [types]=\"notNullTypeValues\" [nullable]=\"hasNull\" />\n    </ng-template>\n  </ng-container>\n\n  <!-- Default Case: Handle cases like { \"allOf\": ... } or { \"if\": ... } -->\n  <ng-template #defaultCase>\n    <ng-container *ngIf=\"!hasSchemaComposition; else compositionCase\">\n      <jse-common-create-valid-or-invalid [schema]=\"schema\" />\n    </ng-container>\n\n    <ng-template #compositionCase>\n      <!--  Otherwise, we have a SchemaComposition, which will be handled by CreateNodes -->\n    </ng-template>\n  </ng-template>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 53,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CreateValidOrInvalidComponent",
                    "type": "component"
                },
                {
                    "name": "RenderProvidedTypeComponent",
                    "type": "component"
                },
                {
                    "name": "RenderMultipleTypesComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n    CreateValidOrInvalidComponent,\r\n    RenderProvidedTypeComponent,\r\n    RenderMultipleTypesComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    detectedTypes,\r\n    isSchemaComposition\r\n} from \"../utils/index\"\r\n\r\nimport type {\r\n    TypeValues,\r\n    JSONSchema\r\n} from \"../types\";\r\n\r\n@Component({\r\n  selector: 'jse-common-create-types',\r\n  standalone: true,\r\n  imports: [CommonModule, CreateValidOrInvalidComponent, RenderProvidedTypeComponent,RenderMultipleTypesComponent],\r\n  template: `\r\n    <ng-container>\r\n\r\n      <ng-container *ngIf=\"foundTypes.length > 0; else defaultCase\">\r\n        <!-- Case 1: Single type or type with null -->\r\n        <ng-container *ngIf=\"hasSingleType; else case2\">\r\n          <jse-common-render-provided-type [schema]=\"schema\" [type]=\"firstType\" [nullable]=\"hasNull\" />\r\n        </ng-container>\r\n\r\n        <!-- Case 2: Multiple types -->\r\n        <ng-template #case2>\r\n          <jse-common-multiple-types [schema]=\"schema\" [types]=\"notNullTypeValues\" [nullable]=\"hasNull\" />\r\n        </ng-template>\r\n      </ng-container>\r\n\r\n      <!-- Default Case: Handle cases like { \"allOf\": ... } or { \"if\": ... } -->\r\n      <ng-template #defaultCase>\r\n        <ng-container *ngIf=\"!hasSchemaComposition; else compositionCase\">\r\n          <jse-common-create-valid-or-invalid [schema]=\"schema\" />\r\n        </ng-container>\r\n\r\n        <ng-template #compositionCase>\r\n          <!--  Otherwise, we have a SchemaComposition, which will be handled by CreateNodes -->\r\n        </ng-template>\r\n      </ng-template>\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class CreateTypesComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get foundTypes() : TypeValues[] {\r\n    return detectedTypes(this.schema);\r\n  }\r\n\r\n  // Single type or type with null\r\n  get hasSingleType(): boolean {\r\n    return this.foundTypes.length === 1 || (this.hasNull && this.foundTypes.length === 2);\r\n  }\r\n\r\n  get hasNull() : boolean {\r\n    return this.foundTypes.includes(\"null\");\r\n  }\r\n\r\n  get hasSchemaComposition() : boolean {\r\n    return isSchemaComposition(this.schema);\r\n  }\r\n\r\n  get firstType(): TypeValues {\r\n    return this.foundTypes.find((s) => s !== \"null\") || this.foundTypes[0];\r\n  }\r\n\r\n  get notNullTypeValues(): TypeValues[] {\r\n    return this.foundTypes.filter((s) => s !== \"null\");\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "foundTypes": {
                    "name": "foundTypes",
                    "getSignature": {
                        "name": "foundTypes",
                        "type": "[]",
                        "returnType": "TypeValues[]",
                        "line": 55
                    }
                },
                "hasSingleType": {
                    "name": "hasSingleType",
                    "getSignature": {
                        "name": "hasSingleType",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 60
                    }
                },
                "hasNull": {
                    "name": "hasNull",
                    "getSignature": {
                        "name": "hasNull",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 64
                    }
                },
                "hasSchemaComposition": {
                    "name": "hasSchemaComposition",
                    "getSignature": {
                        "name": "hasSchemaComposition",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 68
                    }
                },
                "firstType": {
                    "name": "firstType",
                    "getSignature": {
                        "name": "firstType",
                        "type": "",
                        "returnType": "TypeValues",
                        "line": 72
                    }
                },
                "notNullTypeValues": {
                    "name": "notNullTypeValues",
                    "getSignature": {
                        "name": "notNullTypeValues",
                        "type": "[]",
                        "returnType": "TypeValues[]",
                        "line": 76
                    }
                }
            }
        },
        {
            "name": "CreateUnevaluatedItemsComponent",
            "id": "component-CreateUnevaluatedItemsComponent-51bfbc2738f7c7b4a152fc979dd9fe5f48c40f4e1b41c7ab407d29a0a9cb02d4de219a1d6f4e8ca76a57e4ce1e3adecb28c476d170d7888b6180e699f8e1a56e",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/unevaluated-items.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-array-unevaluated-items",
            "styleUrls": [],
            "styles": [],
            "template": "<ul *ngIf=\"items !== undefined\">\n  <jse-common-create-edge [schema]=\"items\" [required]=\"false\">\n    <code name>\n      {{ unevaluatedItemsLabel() }}\n    </code>\n  </jse-common-create-edge>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 28,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "unevaluatedItemsLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-array-unevaluated-items',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  template: `\r\n    <ul *ngIf=\"items !== undefined\">\r\n      <jse-common-create-edge [schema]=\"items\" [required]=\"false\">\r\n        <code name>\r\n          {{ unevaluatedItemsLabel() }}\r\n        </code>\r\n      </jse-common-create-edge>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateUnevaluatedItemsComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n  get items() : JSONSchema | undefined {\r\n    return this.schema.unevaluatedItems;\r\n  }\r\n\r\n  unevaluatedItemsLabel(): string {\r\n    return `items[y]`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "items": {
                    "name": "items",
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "JSONSchema | undefined",
                        "line": 30
                    }
                }
            }
        },
        {
            "name": "CreateUnevaluatedPropertiesComponent",
            "id": "component-CreateUnevaluatedPropertiesComponent-13a0a1f01daeb65161650ca9aa429cf1bdb7af30bb1c60287fbc77ce223758c8db82cf9d79f94664af1c06194f5948112c92697aaf771ddcefc2f1d7f75f7c28",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/unevaluated-properties.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-unevaluated-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<ul *ngIf=\"!isUndefinedOrBoolean(unevaluatedProperties)\">\n  <jse-common-create-edge [schema]=\"unevaluatedProperties!\" [required]=\"false\">\n    <code name>\n      {{ unevaluatedPropertiesLabel() }}\n    </code>\n  </jse-common-create-edge>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 28,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isUndefinedOrBoolean",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unevaluatedPropertiesLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-unevaluated-properties',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  template: `\r\n    <ul *ngIf=\"!isUndefinedOrBoolean(unevaluatedProperties)\">\r\n      <jse-common-create-edge [schema]=\"unevaluatedProperties!\" [required]=\"false\">\r\n        <code name>\r\n          {{ unevaluatedPropertiesLabel() }}\r\n        </code>\r\n      </jse-common-create-edge>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateUnevaluatedPropertiesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  get unevaluatedProperties() {\r\n    return this.schema.unevaluatedProperties;\r\n  }\r\n\r\n  isUndefinedOrBoolean(value: any): boolean {\r\n    return value === undefined || typeof value === 'boolean';\r\n  }\r\n\r\n  unevaluatedPropertiesLabel(): string {\r\n    return `property name*`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "unevaluatedProperties": {
                    "name": "unevaluatedProperties",
                    "getSignature": {
                        "name": "unevaluatedProperties",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                }
            }
        },
        {
            "name": "CreateUnlistedPropertiesComponent",
            "id": "component-CreateUnlistedPropertiesComponent-d4698d1e8ed94cfa32c65a587ee08b33945dbee3845cfcd25ac9757f70aefa4ac7af2e384efea4973f5efa8dfcdeb5b577dd774717325e437a998f2dad9d77af",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/unlisted-required-properties.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-unlisted-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\n  <jse-common-create-edge\n    [schema]=\"true\"]\n    [required]=\"true\"]\n    *ngFor=\"let prop of unlistedProperties\"\n  >\n    <strong name>\n      {{ generatePropertyName(prop) }}\n    </strong>\n  </jse-common-create-edge>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 32,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "generatePropertyName",
                    "args": [
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-unlisted-properties',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  template: `\r\n    <ul>\r\n      <jse-common-create-edge\r\n        [schema]=\"true\"]\r\n        [required]=\"true\"]\r\n        *ngFor=\"let prop of unlistedProperties\"\r\n      >\r\n        <strong name>\r\n          {{ generatePropertyName(prop) }}\r\n        </strong>\r\n      </jse-common-create-edge>\r\n    </ul>\r\n  `,\r\n})\r\nexport class CreateUnlistedPropertiesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  get unlistedProperties() {\r\n    const required: string[] = (this.schema.required || []) as string[];\r\n    const listedProperties = Object.keys(this.schema.properties || {});\r\n    return required.filter((r) => !listedProperties.includes(r));\r\n  }\r\n\r\n  generatePropertyName(prop: string): string {\r\n    return `${prop}`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "unlistedProperties": {
                    "name": "unlistedProperties",
                    "getSignature": {
                        "name": "unlistedProperties",
                        "type": "",
                        "returnType": "",
                        "line": 34
                    }
                }
            }
        },
        {
            "name": "CreateValidOrInvalidComponent",
            "id": "component-CreateValidOrInvalidComponent-8d52e79876c9e821ada6c02742bd49734cf1f126d2aa55455d1e1c2e3a39ce36def8bf2d323fe2d5745b503164756352b4a919a9d23d394628bc47a56a190be4",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/create-valid-or-invalid.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-create-valid-or-invalid",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"schema; else alwaysInvalid\">\n  <jse-always-valid [schema]=\"schema\" />\n</ng-container>\n<ng-template #alwaysInvalid>\n  <jse-always-invalid />\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 29,
                    "type": "JSONSchema",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateAlwaysInvalidComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateAlwaysValidComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n    CreateAlwaysInvalidComponent,\r\n    CreateAlwaysValidComponent\r\n} from \"../JSONSchemaElements/index\";\r\n\r\nimport type { JSONSchema } from '../types';\r\n\r\n@Component({\r\n  selector: 'jse-common-create-valid-or-invalid',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateAlwaysInvalidComponent),\r\n    forwardRef(() => CreateAlwaysValidComponent),\r\n  ],\r\n  template: `\r\n    <ng-container *ngIf=\"schema; else alwaysInvalid\">\r\n      <jse-always-valid [schema]=\"schema\" />\r\n    </ng-container>\r\n    <ng-template #alwaysInvalid>\r\n      <jse-always-invalid />\r\n    </ng-template>\r\n  `,\r\n})\r\nexport class CreateValidOrInvalidComponent {\r\n  @Input({ required: true }) schema!: JSONSchema;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "DefaultValueComponent",
            "id": "component-DefaultValueComponent-0de47e235d7f9b95e06df4a94e4fff11277588da8d586c7a3b79aec9288e1471012e76df2c5fa22d03cc2b4f3e4d632be84acaa924b38b967cdd038ab18f4b9d",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/default-value.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-default-value",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ defaultLabel }}</strong>\n  &nbsp;\n  <lib-print-schema-type [obj]=\"schema.default\" />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 19,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "defaultLabel",
                    "defaultValue": "'Default value :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-default-value',\r\n  standalone: true,\r\n  imports: [PrintSchemaTypeComponent],\r\n  template: `\r\n    <div>\r\n      <strong>{{ defaultLabel }}</strong>\r\n      &nbsp;\r\n      <lib-print-schema-type [obj]=\"schema.default\" />\r\n    </div>\r\n  `,\r\n})\r\nexport class DefaultValueComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  defaultLabel = 'Default value :';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "DependenciesComponent",
            "id": "component-DependenciesComponent-6916a3b63b7b6e19b86bb597f6b4d32b782c78c5dd6c9f5a4b3b0871a09b70c4d5549e6fedffe700cca59630323eb57b010ec650c5d3d0acd08fc2a694f7b3ed",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependencies.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-conditional-dependencies",
            "styleUrls": [],
            "styles": [],
            "template": "<div *ngIf=\"hasDependentRequired\">\n  <jse-schema-conditional-dependent-required [schema]=\"dependentRequired\" />\n</div>\n<div *ngIf=\"hasDependentSchemas\">\n  <jse-schema-conditional-dependent-schemas [schema]=\"dependentSchemas\" />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 25,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "DependentRequiredComponent",
                    "type": "component"
                },
                {
                    "name": "DependentSchemasComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  DependentRequiredComponent,\r\n  DependentSchemasComponent\r\n} from \"./index\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-conditional-dependencies',\r\n  standalone: true,\r\n  imports: [CommonModule,DependentRequiredComponent,DependentSchemasComponent],\r\n  template: `\r\n    <div *ngIf=\"hasDependentRequired\">\r\n      <jse-schema-conditional-dependent-required [schema]=\"dependentRequired\" />\r\n    </div>\r\n    <div *ngIf=\"hasDependentSchemas\">\r\n      <jse-schema-conditional-dependent-schemas [schema]=\"dependentSchemas\" />\r\n    </div>\r\n  `,\r\n})\r\nexport class DependenciesComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get hasDependentRequired(): boolean {\r\n    return (\r\n      !!this.schema.dependencies &&\r\n      Object.values(this.schema.dependencies).some(Array.isArray)\r\n    );\r\n  }\r\n  \r\n  get hasDependentSchemas(): boolean {\r\n    return (\r\n      !!this.schema.dependencies &&\r\n      Object.values(this.schema.dependencies).some((subSchema) => !Array.isArray(subSchema))\r\n    );\r\n  }\r\n\r\n  get dependentRequired(): { dependentRequired: Record<string, string[] | readonly string[]> } {\r\n    const result: Record<string, string[] | readonly string[]> = {};\r\n\r\n    if (this.schema.dependencies) {\r\n      for (const [property, subSchema] of Object.entries(this.schema.dependencies)) {\r\n        if (Array.isArray(subSchema)) {\r\n          // dependentRequired case\r\n          result[property] = subSchema;\r\n        }\r\n      }\r\n    }\r\n\r\n    return { dependentRequired: result };\r\n  }\r\n\r\n  get dependentSchemas(): { dependentSchemas: Record<string, JSONSchema> } {\r\n    const result: Record<string, JSONSchema> = {};\r\n\r\n    if (this.schema.dependencies) {\r\n      for (const [property, subSchema] of Object.entries(this.schema.dependencies)) {\r\n        if (!Array.isArray(subSchema)) {\r\n          // dependentSchemas case\r\n          result[property] = subSchema as JSONSchema;\r\n        }\r\n      }\r\n    }\r\n\r\n    return { dependentSchemas: result };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "hasDependentRequired": {
                    "name": "hasDependentRequired",
                    "getSignature": {
                        "name": "hasDependentRequired",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 27
                    }
                },
                "hasDependentSchemas": {
                    "name": "hasDependentSchemas",
                    "getSignature": {
                        "name": "hasDependentSchemas",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 34
                    }
                },
                "dependentRequired": {
                    "name": "dependentRequired",
                    "getSignature": {
                        "name": "dependentRequired",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 41
                    }
                },
                "dependentSchemas": {
                    "name": "dependentSchemas",
                    "getSignature": {
                        "name": "dependentSchemas",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 56
                    }
                }
            }
        },
        {
            "name": "DependentRequiredComponent",
            "id": "component-DependentRequiredComponent-3034d4a1deda3749a720fb65b3f62e35320d187fad5ab2676e1d7f96869507fd4b7fedcebd7543a14696775a961d32eb17932a8660b83c57fd3f96b2b6347570",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependent-required.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-conditional-dependent-required",
            "styleUrls": [],
            "styles": [],
            "template": "<jse-schema-composition-all-of [schema]=\"simplifiedSchema\" />\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 19,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AllOfSchemaComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  AllOfSchemaComponent\r\n} from \"../schemaComposition/index\";\r\n\r\nimport type { JSONSchema, JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-conditional-dependent-required',\r\n  standalone: true,\r\n  imports: [CommonModule,AllOfSchemaComponent],\r\n  template: `\r\n    <jse-schema-composition-all-of [schema]=\"simplifiedSchema\" />\r\n  `,\r\n})\r\nexport class DependentRequiredComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get dependentRequired(): JSONSchemaNS.Object {\r\n    return this.schema as JSONSchemaNS.Object;\r\n  }\r\n\r\n  get simplifiedSchema(): Exclude<JSONSchema, true | false> {\r\n    const allOf = Object.entries(this.dependentRequired).map(\r\n      ([property, requiredProperties]) => ({\r\n        if: {\r\n          type: \"object\",\r\n          required: [property],\r\n        },\r\n        then: {\r\n          type: \"object\",\r\n          required: requiredProperties,\r\n        },\r\n      })\r\n    );\r\n\r\n    return { allOf };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "dependentRequired": {
                    "name": "dependentRequired",
                    "getSignature": {
                        "name": "dependentRequired",
                        "type": "",
                        "returnType": "JSONSchemaNS.Object",
                        "line": 21
                    }
                },
                "simplifiedSchema": {
                    "name": "simplifiedSchema",
                    "getSignature": {
                        "name": "simplifiedSchema",
                        "type": "",
                        "returnType": "Exclude<JSONSchema,  | >",
                        "line": 25
                    }
                }
            }
        },
        {
            "name": "DependentSchemasComponent",
            "id": "component-DependentSchemasComponent-c8d305265b9ddbdbb9d60506cfc4a65f431c4f340f780312f9f3ded10a9ad0941d94e87fc2ffa73100f7c434ad7906a1db012d82c380a239a5f37185e50e55df",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependent-schemas.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-conditional-dependent-schemas",
            "styleUrls": [],
            "styles": [],
            "template": "<jse-schema-composition-all-of [schema]=\"simplifiedSchema\" />\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 19,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AllOfSchemaComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  AllOfSchemaComponent\r\n} from \"../schemaComposition/index\";\r\n\r\nimport type { JSONSchema, JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-conditional-dependent-schemas',\r\n  standalone: true,\r\n  imports: [CommonModule,AllOfSchemaComponent],\r\n  template: `\r\n    <jse-schema-composition-all-of [schema]=\"simplifiedSchema\" />\r\n  `,\r\n})\r\nexport class DependentSchemasComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get dependentSchemas(): JSONSchemaNS.Object {\r\n    return this.schema as JSONSchemaNS.Object;\r\n  }\r\n\r\n  get simplifiedSchema(): Exclude<JSONSchema, true | false> {\r\n    const allOf = Object.entries(this.dependentSchemas).map(([property, subSchema]) => ({\r\n      if: {\r\n        type: \"object\",\r\n        required: [property],\r\n      },\r\n      then: subSchema,\r\n    }));\r\n\r\n    return { allOf };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "dependentSchemas": {
                    "name": "dependentSchemas",
                    "getSignature": {
                        "name": "dependentSchemas",
                        "type": "",
                        "returnType": "JSONSchemaNS.Object",
                        "line": 21
                    }
                },
                "simplifiedSchema": {
                    "name": "simplifiedSchema",
                    "getSignature": {
                        "name": "simplifiedSchema",
                        "type": "",
                        "returnType": "Exclude<JSONSchema,  | >",
                        "line": 25
                    }
                }
            }
        },
        {
            "name": "DeprecatedComponent",
            "id": "component-DeprecatedComponent-4c7f87a0313713090e3f501f5028c0760e5a14febeb582441cebee9b0afc58aac2f1f389e0d430dfafefea96a240aca70572d7217397fb0f8ca568951846a641",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/deprecated.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-deprecated",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span>🚨&nbsp;</span>\n  <ng-container>Deprecated</ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-deprecated',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div>\r\n      <span>🚨&nbsp;</span>\r\n      <ng-container>Deprecated</ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class DeprecatedComponent {}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "DeprecatedLabelComponent",
            "id": "component-DeprecatedLabelComponent-188128143ed1134290aaab4f9fec09b3cc4d590952a0bb8ae7a74a403810c5351bc3467ba13062319203ade62b17ebec41c838953a7af559eaa222ba62ed577d",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/Deprecated/deprecated-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-deprecated",
            "styleUrls": [
                "./deprecated-label.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./deprecated-label.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-deprecated',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './deprecated-label.component.html',\r\n  styleUrls: ['./deprecated-label.component.css']\r\n})\r\nexport class DeprecatedLabelComponent { }",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".deprecated {\r\n    font-size: 90%;\r\n    color: #ffba00\r\n}  ",
                    "styleUrl": "./deprecated-label.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<strong class=\"deprecated\">\r\n    deprecated\r\n</strong>  "
        },
        {
            "name": "ElseLabelComponent",
            "id": "component-ElseLabelComponent-0e2002bc660984bbd8ec0150dc903e8ba26c76fb6521da27b667f34d8e430bfe9a0cbc533ec61e7d80812802b673ed6081032e63871a68c70065b9c56b2d8d22",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/else-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-else",
            "styleUrls": [],
            "styles": [],
            "template": "<strong>\n    Else\n</strong>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-else',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <strong>\r\n        Else\r\n    </strong>\r\n  `,\r\n})\r\nexport class ElseLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "EnumComponent",
            "id": "component-EnumComponent-9c216389a3b1397ae0a474ce4cbd2bb46b067528bb886d79c58d7b1eea4732f3e57062fe4d6daae2323cbfa15da720678536e357b66ab9676b8bdad18564b865",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/enum.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-enum",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ enumLabel }}</strong>\n  &nbsp;\n  <lib-print-schema-type [obj]=\"schema.enum\" />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 19,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "enumLabel",
                    "defaultValue": "'Possible values :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-enum',\r\n  standalone: true,\r\n  imports: [PrintSchemaTypeComponent],\r\n  template: `\r\n    <div>\r\n      <strong>{{ enumLabel }}</strong>\r\n      &nbsp;\r\n      <lib-print-schema-type [obj]=\"schema.enum\" />\r\n    </div>\r\n  `,\r\n})\r\nexport class EnumComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  enumLabel = 'Possible values :';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ErrorOccurredLabelComponent",
            "id": "component-ErrorOccurredLabelComponent-a6faee219a033c566e67f02357f22146e90fc42161f98c64a1b66d2b21767b08bac7366f5b09687ae4f059e7fa57f95788a1a35c58daf97da13a69644c55d804",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/error-occurred.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-error-occurred",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"error\">\n  <strong>Something bad happens : </strong> {{ error.message }}\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 15,
                    "type": "Error",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-error-occurred',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <ng-container *ngIf=\"error\">\r\n      <strong>Something bad happens : </strong> {{ error.message }}\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class ErrorOccurredLabelComponent {\r\n  @Input({ required: true }) error!: Error;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ExamplesComponent",
            "id": "component-ExamplesComponent-4798d17eea320ea4b14c679ba9bc28faa5555ce1d9627ed9fd0c57185310ace973af29e9e86884553c5c906e5fa1c5c1f7431c9e90f0dabd7103be4787648fa8",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/examples.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-examples",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ examplesLabel }}</strong>&nbsp;\n  <mat-tab-group>\n    <mat-tab *ngFor=\"let item of items\" [label]=\"item.label\">\n        <lib-print-schema-type [obj]=\"item.value\"></lib-print-schema-type>\n    </mat-tab>\n  </mat-tab-group>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 30,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "examplesLabel",
                    "defaultValue": "'Example values :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "PrintSchemaTypeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport { PrintSchemaTypeComponent } from './print-schema-type';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\ntype itemsType = { id: number; value: any; label: string }[]\r\n\r\n@Component({\r\n  selector: 'qm-examples',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatTabsModule, \r\n    PrintSchemaTypeComponent\r\n  ],\r\n  template: `\r\n    <div>\r\n      <strong>{{ examplesLabel }}</strong>&nbsp;\r\n      <mat-tab-group>\r\n        <mat-tab *ngFor=\"let item of items\" [label]=\"item.label\">\r\n            <lib-print-schema-type [obj]=\"item.value\"></lib-print-schema-type>\r\n        </mat-tab>\r\n      </mat-tab-group>\r\n    </div>\r\n  `,\r\n})\r\nexport class ExamplesComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  examplesLabel = 'Example values :';\r\n\r\n  get items(): itemsType {\r\n    return (this.schema.examples || [])\r\n      .map((val, idx) => ({\r\n        id: idx,\r\n        value: val,\r\n        label: `Example ${idx}`,\r\n    }));\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "items": {
                    "name": "items",
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "itemsType",
                        "line": 34
                    }
                }
            }
        },
        {
            "name": "FalseLabelComponent",
            "id": "component-FalseLabelComponent-69e838c70614de3b0bcce33f68deee7248a2df6e42425a8d74ea86a8ed50a4aa992b5a2ac7483de4167ddf41e0976cb7d8c336e5be6540f1fa713d4afafbdef9",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/false-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-false",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n    none\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-false',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n        none\r\n    </span>\r\n  `,\r\n})\r\nexport class FalseLabelComponent {}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "GenerateFriendlyNameComponent",
            "id": "component-GenerateFriendlyNameComponent-1e804841ec72e514435d2654e8259f612ab35f4587a17afda94185063fb0f326ddbb00033459d7c27f5839a4e6b5886af7fca7dde203a5d192ce003ef2772067",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jsv-friendly-name",
            "styleUrls": [],
            "styles": [],
            "template": "<!--  In case the schema is always valid or not -->\n<ng-container *ngIf=\"isBoolean(schema)\" else titleOrCustomBlock>\n  <jsv-type-label-switch [type]=\"typedBoolean\" />\n</ng-container>\n\n<ng-template #titleOrCustomBlock>\n\n  <!-- Some people maintaining schemas provide a friendly name by themself -->\n  <ng-container *ngIf=\"typedSchema.title; else customTypeBlock\">\n    {{ typedSchema.title }}\n  </ng-container>\n\n  <!-- -->\n  <ng-template #customTypeBlock>\n    <ng-container *ngIf=\"foundTypes.length === 0; else customTypeLoopBlock\">\n      <jsv-friendly-name-fallback [schema]=\"typedSchema\" />\n    </ng-container>\n    <ng-template #customTypeLoopBlock>\n      <ng-container *ngFor=\"let type of foundTypes; let idx = index\">\n        <jsv-friendly-name-custom [schema]=\"typedSchema\" [type]=\"type\"/>\n        <ng-container *ngIf=\"shouldAddSeparator(idx, foundTypes.length)\">\n          <labels-or />\n        </ng-container>\n      </ng-container>\n    </ng-template>\n\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 64,
                    "type": "JSONSchema",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isBoolean",
                    "args": [
                        {
                            "name": "value",
                            "type": "JSONSchema",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "JSONSchema",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldAddSeparator",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "OrLabelComponent",
                    "type": "component"
                },
                {
                    "name": "TypeLabelSwitchComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameFallbackComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameCustomComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    OrLabelComponent,\r\n} from \"../../labels/index\"\r\n\r\nimport {\r\n    detectedTypes\r\n} from \"../detectTypes\";\r\n\r\nimport {\r\n  TypeLabelSwitchComponent\r\n} from \"../type-label-switch\";\r\n\r\nimport {\r\n    GenerateFriendlyNameFallbackComponent,\r\n    GenerateFriendlyNameCustomComponent\r\n} from \"./index\";\r\n\r\nimport type { JSONSchema, TypeValues } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jsv-friendly-name',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    OrLabelComponent,\r\n    TypeLabelSwitchComponent,\r\n    forwardRef( () => GenerateFriendlyNameFallbackComponent),\r\n    forwardRef( () => GenerateFriendlyNameCustomComponent)\r\n  ],\r\n  template: `\r\n    <!--  In case the schema is always valid or not -->\r\n    <ng-container *ngIf=\"isBoolean(schema)\" else titleOrCustomBlock>\r\n      <jsv-type-label-switch [type]=\"typedBoolean\" />\r\n    </ng-container>\r\n\r\n    <ng-template #titleOrCustomBlock>\r\n\r\n      <!-- Some people maintaining schemas provide a friendly name by themself -->\r\n      <ng-container *ngIf=\"typedSchema.title; else customTypeBlock\">\r\n        {{ typedSchema.title }}\r\n      </ng-container>\r\n\r\n      <!-- -->\r\n      <ng-template #customTypeBlock>\r\n        <ng-container *ngIf=\"foundTypes.length === 0; else customTypeLoopBlock\">\r\n          <jsv-friendly-name-fallback [schema]=\"typedSchema\" />\r\n        </ng-container>\r\n        <ng-template #customTypeLoopBlock>\r\n          <ng-container *ngFor=\"let type of foundTypes; let idx = index\">\r\n            <jsv-friendly-name-custom [schema]=\"typedSchema\" [type]=\"type\"/>\r\n            <ng-container *ngIf=\"shouldAddSeparator(idx, foundTypes.length)\">\r\n              <labels-or />\r\n            </ng-container>\r\n          </ng-container>\r\n        </ng-template>\r\n\r\n    </ng-template>\r\n  `,\r\n})\r\nexport class GenerateFriendlyNameComponent {\r\n  @Input({ required: true }) schema!: JSONSchema;\r\n\r\n  get foundTypes(): TypeValues[] {\r\n    return (typeof this.schema !== \"boolean\") ? detectedTypes(this.schema) : [];\r\n  }\r\n\r\n  isBoolean(value: JSONSchema): boolean {\r\n    return typeof value === 'boolean';\r\n  }\r\n\r\n  get typedBoolean(): boolean {\r\n    return this.schema as boolean;\r\n  }\r\n\r\n  get typedSchema(): Exclude<JSONSchema, true | false> {\r\n    return this.schema as Exclude<JSONSchema, true | false>;\r\n  }\r\n\r\n  shouldAddSeparator(idx: number, length: number): boolean {\r\n    return length <= 1 ? false : idx !== length - 1;\r\n  }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "foundTypes": {
                    "name": "foundTypes",
                    "getSignature": {
                        "name": "foundTypes",
                        "type": "[]",
                        "returnType": "TypeValues[]",
                        "line": 66
                    }
                },
                "typedBoolean": {
                    "name": "typedBoolean",
                    "getSignature": {
                        "name": "typedBoolean",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 74
                    }
                },
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "Exclude<JSONSchema,  | >",
                        "line": 78
                    }
                }
            }
        },
        {
            "name": "GenerateFriendlyNameCustomArrayComponent",
            "id": "component-GenerateFriendlyNameCustomArrayComponent-b858600c956d712ef82968f6ddae4bd0dd530e8bf90698853ebda9847276e512d6ae57968d8631777a006f94e84a4ce66752ece9f001c9947f268d2fe469afc0",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/customized-array.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jsv-friendly-name-custom-array",
            "styleUrls": [],
            "styles": [],
            "template": "<!-- KISS return the generic type when specs are messy -->\n<ng-template *ngIf=\"noClearSpecs; else clearSpecs\">\n    <jsv-type-label-switch [type]=\"'array'\"] />\n</ng-template>\n\n<ng-template #clearSpecs>\n\n    <!-- 1) \"prefixItems\" -->\n    <ng-container *ngIf=\"isPrefixItemsArray\">\n        <ng-container *ngFor=\"let subSchema of typedPrefixItemsArray; let idx = index\">\n            <jsv-friendly-name [schema]=\"subSchema\" />\n            {{ shouldAddSeparator(idx, typedPrefixItemsArray.length) ? ',' : '' }}\n        </ng-container>\n    </ng-container>\n\n    <!-- Separator -->\n    <ng-container *ngIf=\"firstSeparator\">\n        {{ ',' }}\n    </ng-container>\n\n    <!-- 2A) \"items\" -->\n    <ng-container *ngIf=\"hasItems\">\n        <ng-container *ngFor=\"let subSchema of itemsAsArray; let idx = index\">\n            <jsv-friendly-name [schema]=\"subSchema\" />\n            {{ shouldAddSeparator(idx, typedPrefixItemsArray.length) ? ',' : '' }}\n        </ng-container>\n    </ng-container>\n\n    <!-- Separator -->\n    <ng-container *ngIf=\"secondSeparator\">\n        {{ ',' }}\n    </ng-container>\n\n    <!-- 2B) \"additionalItems\" (to cover cases for specs below the draft-2020-12 version) -->\n    <ng-container *ngIf=\"hasAdditionalItems\">\n        <jsv-friendly-name [schema]=\"schema.additionalItems!\" />\n    </ng-container>\n\n    <!-- Separator -->\n    <ng-container *ngIf=\"thirdSeparator\">\n        {{ ',' }}\n    </ng-container>\n\n    <!-- 2C) \"unevaluatedItems\" (to cover cases specs >= draft-2020-12 version) -->\n    <ng-container *ngIf=\"hasUnevaluatedItems\">\n        <jsv-friendly-name [schema]=\"schema.unevaluatedItems!\" />\n    </ng-container>\n\n    <!-- Separator -->\n    <ng-container *ngIf=\"fourSeparator\">\n        {{ ',' }}\n    </ng-container>\n\n    <!-- 3) \"contains\" -->\n    <ng-container *ngIf=\"hasContains\">\n        {{ '...' }}\n        {{ ',' }}\n        <jsv-friendly-name [schema]=\"schema.contains!\" />\n    </ng-container>\n\n    <!-- Separator -->\n    <ng-container *ngIf=\"fithSeparator\">\n        {{ ',' }}\n    </ng-container>\n\n    <!-- 4) Is it a open tuple ? -->\n    <ng-container *ngIf=\"isOpenTuple\">\n        {{ '...' }}\n    </ng-container>\n\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 94,
                    "type": "JSONSchemaNS.Array",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "shouldAddSeparator",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TypeLabelSwitchComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    TypeLabelSwitchComponent,\r\n    GenerateFriendlyNameComponent\r\n} from \"../index\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n    selector: 'jsv-friendly-name-custom-array',\r\n    standalone: true,\r\n    imports: [\r\n      CommonModule,\r\n      TypeLabelSwitchComponent,\r\n      forwardRef(() => GenerateFriendlyNameComponent)\r\n    ],\r\n    template: `\r\n        <!-- KISS return the generic type when specs are messy -->\r\n        <ng-template *ngIf=\"noClearSpecs; else clearSpecs\">\r\n            <jsv-type-label-switch [type]=\"'array'\"] />\r\n        </ng-template>\r\n\r\n        <ng-template #clearSpecs>\r\n\r\n            <!-- 1) \"prefixItems\" -->\r\n            <ng-container *ngIf=\"isPrefixItemsArray\">\r\n                <ng-container *ngFor=\"let subSchema of typedPrefixItemsArray; let idx = index\">\r\n                    <jsv-friendly-name [schema]=\"subSchema\" />\r\n                    {{ shouldAddSeparator(idx, typedPrefixItemsArray.length) ? ',' : '' }}\r\n                </ng-container>\r\n            </ng-container>\r\n\r\n            <!-- Separator -->\r\n            <ng-container *ngIf=\"firstSeparator\">\r\n                {{ ',' }}\r\n            </ng-container>\r\n\r\n            <!-- 2A) \"items\" -->\r\n            <ng-container *ngIf=\"hasItems\">\r\n                <ng-container *ngFor=\"let subSchema of itemsAsArray; let idx = index\">\r\n                    <jsv-friendly-name [schema]=\"subSchema\" />\r\n                    {{ shouldAddSeparator(idx, typedPrefixItemsArray.length) ? ',' : '' }}\r\n                </ng-container>\r\n            </ng-container>\r\n\r\n            <!-- Separator -->\r\n            <ng-container *ngIf=\"secondSeparator\">\r\n                {{ ',' }}\r\n            </ng-container>\r\n\r\n            <!-- 2B) \"additionalItems\" (to cover cases for specs below the draft-2020-12 version) -->\r\n            <ng-container *ngIf=\"hasAdditionalItems\">\r\n                <jsv-friendly-name [schema]=\"schema.additionalItems!\" />\r\n            </ng-container>\r\n\r\n            <!-- Separator -->\r\n            <ng-container *ngIf=\"thirdSeparator\">\r\n                {{ ',' }}\r\n            </ng-container>\r\n\r\n            <!-- 2C) \"unevaluatedItems\" (to cover cases specs >= draft-2020-12 version) -->\r\n            <ng-container *ngIf=\"hasUnevaluatedItems\">\r\n                <jsv-friendly-name [schema]=\"schema.unevaluatedItems!\" />\r\n            </ng-container>\r\n\r\n            <!-- Separator -->\r\n            <ng-container *ngIf=\"fourSeparator\">\r\n                {{ ',' }}\r\n            </ng-container>\r\n\r\n            <!-- 3) \"contains\" -->\r\n            <ng-container *ngIf=\"hasContains\">\r\n                {{ '...' }}\r\n                {{ ',' }}\r\n                <jsv-friendly-name [schema]=\"schema.contains!\" />\r\n            </ng-container>\r\n\r\n            <!-- Separator -->\r\n            <ng-container *ngIf=\"fithSeparator\">\r\n                {{ ',' }}\r\n            </ng-container>\r\n\r\n            <!-- 4) Is it a open tuple ? -->\r\n            <ng-container *ngIf=\"isOpenTuple\">\r\n                {{ '...' }}\r\n            </ng-container>\r\n\r\n        </ng-template>\r\n    `\r\n})\r\nexport class GenerateFriendlyNameCustomArrayComponent {\r\n    @Input({ required: true }) schema!: JSONSchemaNS.Array;\r\n\r\n    // For separators\r\n    get firstSeparator() : boolean {\r\n        return this.isPrefixItemsArray && this.hasItems;\r\n    }\r\n\r\n    get secondSeparator() : boolean {\r\n        return this.hasItems && this.hasAdditionalItems;\r\n    }\r\n\r\n    get thirdSeparator() : boolean {\r\n        return this.hasAdditionalItems && this.hasUnevaluatedItems;\r\n    }\r\n\r\n    get fourSeparator() : boolean {\r\n        return this.hasUnevaluatedItems && this.hasContains;\r\n    }\r\n\r\n    get fithSeparator() : boolean {\r\n        return this.hasContains && this.isOpenTuple;\r\n    }\r\n\r\n    // No clear specifications about the contents of the array ?\r\n    get noClearSpecs(): boolean {\r\n        return [undefined, false].includes(this.schema.items as any) &&\r\n            [undefined, false].includes(this.schema.prefixItems as any) &&\r\n            this.schema.contains === undefined;\r\n    }\r\n\r\n    get isPrefixItemsArray(): boolean {\r\n        return Array.isArray(this.schema.prefixItems);\r\n    }\r\n\r\n    get typedPrefixItemsArray() {\r\n        return this.schema.prefixItems as JSONSchema[];\r\n    }\r\n\r\n    shouldAddSeparator(idx: number, length: number): boolean {\r\n        return length <= 1 ? false : idx !== length - 1;\r\n    }\r\n\r\n    get hasItems() : boolean {\r\n        return this.schema.items !== undefined && typeof this.schema.items !== \"boolean\";\r\n    }\r\n\r\n    get itemsAsArray() : JSONSchema[] {\r\n        return (Array.isArray(this.schema.items) ? this.schema.items : [this.schema.items]) as JSONSchema[];\r\n    }\r\n\r\n    get hasAdditionalItems(): boolean {\r\n        return this.schema.additionalItems !== undefined && typeof this.schema.additionalItems !== \"boolean\";\r\n    }\r\n\r\n    get hasUnevaluatedItems(): boolean {\r\n        return this.schema.unevaluatedItems !== undefined && typeof this.schema.unevaluatedItems !== \"boolean\";\r\n    }\r\n\r\n    get hasContains(): boolean {\r\n        return this.schema.contains !== undefined;\r\n    }\r\n\r\n    get isOpenTuple(): boolean {\r\n        return !(\r\n            (this.schema as JSONSchemaNS.Array).unevaluatedItems === false ||\r\n            this.schema.items === false ||\r\n            this.schema.additionalItems === false\r\n        );\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "firstSeparator": {
                    "name": "firstSeparator",
                    "getSignature": {
                        "name": "firstSeparator",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 97
                    }
                },
                "secondSeparator": {
                    "name": "secondSeparator",
                    "getSignature": {
                        "name": "secondSeparator",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 101
                    }
                },
                "thirdSeparator": {
                    "name": "thirdSeparator",
                    "getSignature": {
                        "name": "thirdSeparator",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 105
                    }
                },
                "fourSeparator": {
                    "name": "fourSeparator",
                    "getSignature": {
                        "name": "fourSeparator",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 109
                    }
                },
                "fithSeparator": {
                    "name": "fithSeparator",
                    "getSignature": {
                        "name": "fithSeparator",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 113
                    }
                },
                "noClearSpecs": {
                    "name": "noClearSpecs",
                    "getSignature": {
                        "name": "noClearSpecs",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 118
                    }
                },
                "isPrefixItemsArray": {
                    "name": "isPrefixItemsArray",
                    "getSignature": {
                        "name": "isPrefixItemsArray",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 124
                    }
                },
                "typedPrefixItemsArray": {
                    "name": "typedPrefixItemsArray",
                    "getSignature": {
                        "name": "typedPrefixItemsArray",
                        "type": "",
                        "returnType": "",
                        "line": 128
                    }
                },
                "hasItems": {
                    "name": "hasItems",
                    "getSignature": {
                        "name": "hasItems",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 136
                    }
                },
                "itemsAsArray": {
                    "name": "itemsAsArray",
                    "getSignature": {
                        "name": "itemsAsArray",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 140
                    }
                },
                "hasAdditionalItems": {
                    "name": "hasAdditionalItems",
                    "getSignature": {
                        "name": "hasAdditionalItems",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 144
                    }
                },
                "hasUnevaluatedItems": {
                    "name": "hasUnevaluatedItems",
                    "getSignature": {
                        "name": "hasUnevaluatedItems",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 148
                    }
                },
                "hasContains": {
                    "name": "hasContains",
                    "getSignature": {
                        "name": "hasContains",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 152
                    }
                },
                "isOpenTuple": {
                    "name": "isOpenTuple",
                    "getSignature": {
                        "name": "isOpenTuple",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 156
                    }
                }
            }
        },
        {
            "name": "GenerateFriendlyNameCustomComponent",
            "id": "component-GenerateFriendlyNameCustomComponent-9bd9ae3edca1bf15ef19cdc37b0eb55af7d23d8b3ec55c24895a340835485c0e9bb899ca718bb9174cbfab0a9e9e3a09cfc0e3a02e3cbecfc933f92fb7309722",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/customized-name.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jsv-friendly-name-custom",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"type === 'string' && schema.format !== undefined\">\n    <jsv-type-label-switch [type]=\"schema.format\" />\n</ng-container>\n<ng-container *ngIf=\"type === 'array'\">\n    <jsv-friendly-name-custom-array [schema]=\"asTypedArray\" />\n</ng-container>\n<ng-container *ngIf=\"type !== 'string' && type !== 'array'\">\n    <jsv-type-label-switch [type]=\"type\" />\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 35,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "TypeValues | string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TypeLabelSwitchComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameCustomArrayComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    TypeLabelSwitchComponent,\r\n} from \"../index\"\r\n\r\nimport {\r\n    GenerateFriendlyNameCustomArrayComponent\r\n} from \"./index\";\r\n\r\nimport type { JSONSchema, JSONSchemaNS, TypeValues } from \"../../types\";\r\n\r\n@Component({\r\n    selector: 'jsv-friendly-name-custom',\r\n    standalone: true,\r\n    imports: [\r\n      CommonModule,\r\n      TypeLabelSwitchComponent,\r\n      forwardRef(() => GenerateFriendlyNameCustomArrayComponent)\r\n    ],\r\n    template: `\r\n        <ng-container *ngIf=\"type === 'string' && schema.format !== undefined\">\r\n            <jsv-type-label-switch [type]=\"schema.format\" />\r\n        </ng-container>\r\n        <ng-container *ngIf=\"type === 'array'\">\r\n            <jsv-friendly-name-custom-array [schema]=\"asTypedArray\" />\r\n        </ng-container>\r\n        <ng-container *ngIf=\"type !== 'string' && type !== 'array'\">\r\n            <jsv-type-label-switch [type]=\"type\" />\r\n        </ng-container>\r\n    `\r\n})\r\nexport class GenerateFriendlyNameCustomComponent {\r\n    @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n    @Input() type!: TypeValues | string;\r\n\r\n    get asTypedArray() {\r\n        return this.schema as JSONSchemaNS.Array;\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "asTypedArray": {
                    "name": "asTypedArray",
                    "getSignature": {
                        "name": "asTypedArray",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                }
            }
        },
        {
            "name": "GenerateFriendlyNameFallbackComponent",
            "id": "component-GenerateFriendlyNameFallbackComponent-bf300e882875a66f03ce96a6dff8b8af15e248a245930374b24d0776eb6d373ac82968a03a4c9f30dafb7ee37307f279b530029262859d39282db8e5eb4d7f68",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name-fallback.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jsv-friendly-name-fallback",
            "styleUrls": [],
            "styles": [],
            "template": "<!--  1. we have a Schema Composition case (not, allOf, ...) -->\n\n<!--  1A) the \"not\" case -->\n<ng-container *ngIf=\"hasNotKeyword\">\n    <labels-not />\n    {{ ' (' }}\n    <jsv-friendly-name [schema]=\"schema.not!\" />\n    {{ ' ) ' }}\n</ng-container>\n\n<!--  1B) the \"allOf\" / \"oneOf\" / \"anyOf\" -->\n<ng-template *ngIf=\"hasOfKeyword; else defaultStrategy\">\n    <ng-container *ngFor=\"let elem of elementsOf; let idx = index\">\n        <jsv-friendly-name [schema]=\"elem\" />\n        <ng-container *ngIf=\"shouldAddSeparator(idx, elementsOf.length)\">\n            <ng-container [ngSwitch]=\"linkword\">\n                <labels-or *ngSwitchCase=\"'OR'\" />\n                <labels-xor *ngSwitchCase=\"'XOR'\" />\n                <labels-and *ngSwitchCase=\"'AND'\" />\n            </ng-container>\n        </ng-container>\n    </ng-container>\n</ng-template>\n\n<!--  2. Assume it is \"any\" by default -->\n<ng-template #defaultStrategy>\n    <jsv-type-label-switch [type]=\"true\"] />\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 67,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "shouldAddSeparator",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NotLabelComponent",
                    "type": "component"
                },
                {
                    "name": "AndLabelComponent",
                    "type": "component"
                },
                {
                    "name": "XorLabelComponent",
                    "type": "component"
                },
                {
                    "name": "OrLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameComponent)",
                    "type": "component"
                },
                {
                    "name": "TypeLabelSwitchComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    AndLabelComponent,\r\n    NotLabelComponent,\r\n    OrLabelComponent,\r\n    XorLabelComponent\r\n} from \"../../labels/index\";\r\n\r\nimport {\r\n    GenerateFriendlyNameComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelSwitchComponent\r\n} from \"../index\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\ntype LinkType = \"AND\" | \"OR\" | \"XOR\";\r\n\r\n@Component({\r\n    selector: 'jsv-friendly-name-fallback',\r\n    standalone: true,\r\n    imports: [\r\n      CommonModule,\r\n      NotLabelComponent,\r\n      AndLabelComponent,\r\n      XorLabelComponent,\r\n      OrLabelComponent,\r\n      forwardRef(() => GenerateFriendlyNameComponent),\r\n      TypeLabelSwitchComponent\r\n    ],\r\n    template: `\r\n        <!--  1. we have a Schema Composition case (not, allOf, ...) -->\r\n\r\n        <!--  1A) the \"not\" case -->\r\n        <ng-container *ngIf=\"hasNotKeyword\">\r\n            <labels-not />\r\n            {{ ' (' }}\r\n            <jsv-friendly-name [schema]=\"schema.not!\" />\r\n            {{ ' ) ' }}\r\n        </ng-container>\r\n\r\n        <!--  1B) the \"allOf\" / \"oneOf\" / \"anyOf\" -->\r\n        <ng-template *ngIf=\"hasOfKeyword; else defaultStrategy\">\r\n            <ng-container *ngFor=\"let elem of elementsOf; let idx = index\">\r\n                <jsv-friendly-name [schema]=\"elem\" />\r\n                <ng-container *ngIf=\"shouldAddSeparator(idx, elementsOf.length)\">\r\n                    <ng-container [ngSwitch]=\"linkword\">\r\n                        <labels-or *ngSwitchCase=\"'OR'\" />\r\n                        <labels-xor *ngSwitchCase=\"'XOR'\" />\r\n                        <labels-and *ngSwitchCase=\"'AND'\" />\r\n                    </ng-container>\r\n                </ng-container>\r\n            </ng-container>\r\n        </ng-template>\r\n\r\n        <!--  2. Assume it is \"any\" by default -->\r\n        <ng-template #defaultStrategy>\r\n            <jsv-type-label-switch [type]=\"true\"] />\r\n        </ng-template>\r\n    `\r\n})\r\nexport class GenerateFriendlyNameFallbackComponent {\r\n    @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>\r\n\r\n    // has a \"...Of\" keyword ?\r\n    get hasOfKeyword(): boolean {\r\n        return this.schema.allOf !== undefined || this.schema.anyOf !== undefined || this.schema.oneOf !== undefined;\r\n    }\r\n\r\n    // has a \"not\" keyword ?\r\n    get hasNotKeyword(): boolean {\r\n        return this.schema.not !== undefined;\r\n    }\r\n\r\n    // Kind of operators to use ?\r\n    get linkword(): LinkType {\r\n        return this.schema.anyOf ? \"OR\" : this.schema.oneOf ? \"XOR\" : \"AND\";\r\n    }\r\n\r\n    shouldAddSeparator(idx: number, length: number): boolean {\r\n        return length <= 1 ? false : idx !== length - 1;\r\n    }\r\n\r\n    // allOf / anyOf / oneOf\r\n    get elementsOf() : JSONSchema[] {\r\n        return (this.schema.allOf || this.schema.anyOf || this.schema.oneOf || []) as JSONSchema[];\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "hasOfKeyword": {
                    "name": "hasOfKeyword",
                    "getSignature": {
                        "name": "hasOfKeyword",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 70
                    }
                },
                "hasNotKeyword": {
                    "name": "hasNotKeyword",
                    "getSignature": {
                        "name": "hasNotKeyword",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 75
                    }
                },
                "linkword": {
                    "name": "linkword",
                    "getSignature": {
                        "name": "linkword",
                        "type": "",
                        "returnType": "LinkType",
                        "line": 80
                    }
                },
                "elementsOf": {
                    "name": "elementsOf",
                    "getSignature": {
                        "name": "elementsOf",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 89
                    }
                }
            }
        },
        {
            "name": "IfElseThenComponent",
            "id": "component-IfElseThenComponent-551eedbdef6d78e8ada83f767dfddde64f54711be93201c21468bda2bd8cb8f415efdfe55f939e7ee024c22bb088379429cdc5e978a03b6516967ae04634ffe2",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/if-else-then.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-conditional-if-else-then",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-tab-group>\n  <mat-tab *ngFor=\"let val of values\">\n    <ng-template mat-tab-label>\n      <ng-container *ngIf=\"val.key === 'if'; else elseTemplate\">\n        <labels-if />\n      </ng-container>\n      <ng-template #elseTemplate>\n        <ng-container *ngIf=\"val.key === 'then'; else otherElseTemplate\">\n          <labels-then />\n        </ng-container>\n        <ng-template #otherElseTemplate>\n          <labels-else />\n        </ng-template>\n      </ng-template>\n    </ng-template>\n    <ng-template matTabContent>\n        <jse-common-create-nodes [schema]=\"val.schema\" />\n    </ng-template>\n  </mat-tab>\n</mat-tab-group>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 46,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "IfLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ThenLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ElseLabelComponent",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateNodesComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\n\r\nimport { CreateNodesComponent } from \"../../common/create-nodes\";\r\n\r\nimport { IfLabelComponent, ThenLabelComponent, ElseLabelComponent } from \"../../labels/index\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-conditional-if-else-then',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    MatTabsModule,\r\n    IfLabelComponent,\r\n    ThenLabelComponent,\r\n    ElseLabelComponent,\r\n    forwardRef(() => CreateNodesComponent)\r\n  ],\r\n  template: `\r\n    <mat-tab-group>\r\n      <mat-tab *ngFor=\"let val of values\">\r\n        <ng-template mat-tab-label>\r\n          <ng-container *ngIf=\"val.key === 'if'; else elseTemplate\">\r\n            <labels-if />\r\n          </ng-container>\r\n          <ng-template #elseTemplate>\r\n            <ng-container *ngIf=\"val.key === 'then'; else otherElseTemplate\">\r\n              <labels-then />\r\n            </ng-container>\r\n            <ng-template #otherElseTemplate>\r\n              <labels-else />\r\n            </ng-template>\r\n          </ng-template>\r\n        </ng-template>\r\n        <ng-template matTabContent>\r\n            <jse-common-create-nodes [schema]=\"val.schema\" />\r\n        </ng-template>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n  `,\r\n})\r\nexport class IfElseThenComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get hasThen(): boolean {\r\n    return this.schema.then !== undefined;\r\n  }\r\n\r\n  get hasElse(): boolean {\r\n    return this.schema.else !== undefined;\r\n  }\r\n\r\n  get values(): { key: string, schema: JSONSchema }[] {\r\n    const values = [\r\n      {\r\n        key: \"if\",\r\n        schema: this.schema.if!,\r\n      },\r\n      this.hasThen && {\r\n        key: \"then\",\r\n        schema: this.schema.then!,\r\n      },\r\n      this.hasElse && {\r\n        key: \"else\",\r\n        schema: this.schema.else!,\r\n      },\r\n    ].filter((v) => !!v) as { key: string, schema: JSONSchema }[];\r\n\r\n    return values;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "hasThen": {
                    "name": "hasThen",
                    "getSignature": {
                        "name": "hasThen",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 48
                    }
                },
                "hasElse": {
                    "name": "hasElse",
                    "getSignature": {
                        "name": "hasElse",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 52
                    }
                },
                "values": {
                    "name": "values",
                    "getSignature": {
                        "name": "values",
                        "type": "[]",
                        "returnType": "literal type[]",
                        "line": 56
                    }
                }
            }
        },
        {
            "name": "IfLabelComponent",
            "id": "component-IfLabelComponent-2681da708a0ef6014bc153231f1d55e39e3c68ea86bf8703e0d727817de71b273b06e17f069bcfbea5f059d7f8adf80e856eb7884354c769b51a02e54fab0d53",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/if-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-if",
            "styleUrls": [],
            "styles": [],
            "template": "<strong>\n    If\n</strong>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-if',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <strong>\r\n        If\r\n    </strong>\r\n  `,\r\n})\r\nexport class IfLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "IntegerLabelComponent",
            "id": "component-IntegerLabelComponent-8b09cd410cef210ccbfa99059f0cf8e1ed27bd7452ce7d6cbc6578adeabea646e656032ae008ed943a66bd1b1cbc50af542f653f0bf40fd2300958dab0aa2bd1",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/integer-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-integer",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  integer\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-integer',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      integer\r\n    </span>\r\n  `,\r\n})\r\nexport class IntegerLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "LoadingLabelComponent",
            "id": "component-LoadingLabelComponent-9dde4e2e1cb54f74d445773d95331ecf5fe1eaf4ac56203e1a6d72f2b7d12d5aa8fffe1df33d23e06faa394dba0ae389a579cf035d36ab4d5c79bc019919726f",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/loading-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-loading",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    Loading ....\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-loading',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div>\r\n        Loading ....\r\n    </div>\r\n  `,\r\n})\r\nexport class LoadingLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "MultipleOfComponent",
            "id": "component-MultipleOfComponent-a5bf2de2575e7d5e906be7daeaae78f82beeb8addc6f9b04e9498aecc59d833b80f1f38871c5eabb590563309f28c9a0a69b3b0c60416d7746c4f6d016910cf5",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/number-multiple-of.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-multiple-of",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ possibleValuesLabel }}</strong>&nbsp;\n  <code>\n    <ng-container>\n      Possible values :\n    </ng-container>\n    <ng-container>\n      multiple of {{ schema.multipleOf }}\n    </ng-container>\n  </code>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 24,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "possibleValuesLabel",
                    "defaultValue": "'Possible values :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-multiple-of',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div>\r\n      <strong>{{ possibleValuesLabel }}</strong>&nbsp;\r\n      <code>\r\n        <ng-container>\r\n          Possible values :\r\n        </ng-container>\r\n        <ng-container>\r\n          multiple of {{ schema.multipleOf }}\r\n        </ng-container>\r\n      </code>\r\n    </div>\r\n  `,\r\n})\r\nexport class MultipleOfComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  possibleValuesLabel = 'Possible values :';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NgxJsonSchemaViewerComponent",
            "id": "component-NgxJsonSchemaViewerComponent-cdf322b8ee32cc1b85dbe804bb74b9d951f6e69c22dec84011b2169a2a9b8db82a119be7b71342202cd6771c782e0005437aa2e02476a91506da1d910838743b",
            "file": "projects/ngx-json-schema-viewer/src/lib/ngx-json-schema-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "JSVOptionsService",
                    "type": "injectable"
                }
            ],
            "selector": "ngx-json-schema-viewer",
            "styleUrls": [],
            "styles": [],
            "template": "<!-- Error ... -->\n<ng-container *ngIf=\"status() === 'ERROR'\">\n  <div>\n    <labels-error-occurred [error]=\"error()!\"/>\n  </div>\n</ng-container>\n\n<!-- Loading ... -->\n<div *ngIf=\"status() === 'LOADING'\">\n    <labels-loading />\n</div>\n\n<!-- Schema -->\n<div *ngIf=\"status() === 'DONE'\">\n  <mat-accordion>\n    <mat-expansion-panel [(expanded)]=\"expanded\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <strong>\n            {{ getSchemaTitle }}\n          </strong>\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <ng-template matExpansionPanelContent>\n        <jse-common-create-nodes [schema]=\"resolvedSchema()!\" />\n      </ng-template>\n    </mat-expansion-panel>\n  </mat-accordion>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "resolverOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "IResolveOpts",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 73,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "vierwerOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "Partial<JSVOptions>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "defaultValue": "signal<Error | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "expanded",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "resolvedSchema",
                    "defaultValue": "signal<JSONSchema | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "status",
                    "defaultValue": "computed<StatusType>(() => {\r\n    if (this.error() !== undefined) {\r\n      return \"ERROR\";\r\n    } else if (this.resolvedSchema() === undefined) {\r\n      return \"LOADING\";\r\n    } else {\r\n      return \"DONE\";\r\n    }\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "schemaResolution",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "CreateNodesComponent",
                    "type": "component"
                },
                {
                    "name": "ErrorOccurredLabelComponent",
                    "type": "component"
                },
                {
                    "name": "LoadingLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, signal, computed } from '@angular/core';\r\n\r\n// imports\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\n\r\nimport {\r\n  CreateNodesComponent\r\n} from \"./common/index\"\r\n\r\n// services\r\nimport { SchemaResolutionService } from './services/schema-resolver';\r\nimport { JSVOptionsService } from \"./services/jsv-options\";\r\n\r\n// Labels\r\nimport {\r\n  ErrorOccurredLabelComponent,\r\n  LoadingLabelComponent\r\n} from \"./labels/index\";\r\n\r\n// Types\r\nimport type { JSONSchema } from './types';\r\nimport type { IResolveOpts } from \"@stoplight/json-ref-resolver/types\"\r\nimport type { JSVOptions } from \"./services/jsv-options\";\r\ntype StatusType = \"LOADING\" | \"ERROR\" | \"DONE\";\r\n\r\n@Component({\r\n  selector: 'ngx-json-schema-viewer',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatExpansionModule,\r\n    CreateNodesComponent,\r\n    ErrorOccurredLabelComponent,\r\n    LoadingLabelComponent,\r\n  ],\r\n  providers: [\r\n    JSVOptionsService\r\n  ],\r\n  template: `\r\n    <!-- Error ... -->\r\n    <ng-container *ngIf=\"status() === 'ERROR'\">\r\n      <div>\r\n        <labels-error-occurred [error]=\"error()!\"/>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <!-- Loading ... -->\r\n    <div *ngIf=\"status() === 'LOADING'\">\r\n        <labels-loading />\r\n    </div>\r\n\r\n    <!-- Schema -->\r\n    <div *ngIf=\"status() === 'DONE'\">\r\n      <mat-accordion>\r\n        <mat-expansion-panel [(expanded)]=\"expanded\">\r\n          <mat-expansion-panel-header>\r\n            <mat-panel-title>\r\n              <strong>\r\n                {{ getSchemaTitle }}\r\n              </strong>\r\n            </mat-panel-title>\r\n          </mat-expansion-panel-header>\r\n          <ng-template matExpansionPanelContent>\r\n            <jse-common-create-nodes [schema]=\"resolvedSchema()!\" />\r\n          </ng-template>\r\n        </mat-expansion-panel>\r\n      </mat-accordion>\r\n    </div>\r\n  `\r\n})\r\nexport class NgxJsonSchemaViewerComponent implements OnInit {\r\n  @Input({ required: true }) schema: unknown;\r\n  @Input() resolverOptions?: IResolveOpts;\r\n  @Input() vierwerOptions?: Partial<JSVOptions>;\r\n\r\n  expanded : boolean = true;\r\n  resolvedSchema = signal<JSONSchema | undefined>(undefined);\r\n  error = signal<Error | undefined>(undefined);\r\n\r\n  status = computed<StatusType>(() => {\r\n    if (this.error() !== undefined) {\r\n      return \"ERROR\";\r\n    } else if (this.resolvedSchema() === undefined) {\r\n      return \"LOADING\";\r\n    } else {\r\n      return \"DONE\";\r\n    }\r\n  });\r\n  \r\n  constructor(\r\n    private schemaResolutionService: SchemaResolutionService,\r\n    private jsvOptionsService: JSVOptionsService,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // If asked, apply user options\r\n    if (this.vierwerOptions) {\r\n      this.jsvOptionsService.setOptions(this.vierwerOptions);\r\n    }\r\n    // Perform the asynchronous schema resolution\r\n    this.schemaResolution();\r\n  }\r\n\r\n  private schemaResolution() {\r\n    this.schemaResolutionService\r\n      .resolveSchema(this.schema, this.resolverOptions)\r\n      .subscribe({\r\n        error: (err) => {\r\n          this.error.set(err);\r\n          this.resolvedSchema.set(undefined);\r\n        },\r\n        next: (result) => {\r\n          this.resolvedSchema.set(result);\r\n          this.error.set(undefined);\r\n        }\r\n      });\r\n  }\r\n\r\n  get getSchemaTitle() : string {\r\n    let schema = this.resolvedSchema()!;\r\n    if (typeof schema !== \"boolean\" && schema.title !== undefined) {\r\n      return schema.title;\r\n    }\r\n    return \"Schema\";\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "schemaResolutionService",
                        "type": "SchemaResolutionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jsvOptionsService",
                        "type": "JSVOptionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 89,
                "jsdoctags": [
                    {
                        "name": "schemaResolutionService",
                        "type": "SchemaResolutionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jsvOptionsService",
                        "type": "JSVOptionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "getSchemaTitle": {
                    "name": "getSchemaTitle",
                    "getSignature": {
                        "name": "getSchemaTitle",
                        "type": "string",
                        "returnType": "string",
                        "line": 120
                    }
                }
            }
        },
        {
            "name": "NoExtraItemsComponent",
            "id": "component-NoExtraItemsComponent-aa397dae3ae89d44f4879dbc67ac0a2bf86f10a7e3b38b1bf649d8e54505f8d7378cee316b0e01bd7f94d93ad3f0185f382b5a0cf3922c88d65d665345f0fe09",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/no-extra-items.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-no-extra-items",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span>🚨&nbsp;</span>\n  <ng-container>No extra item(s) are authorized in this array</ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-no-extra-items',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div>\r\n      <span>🚨&nbsp;</span>\r\n      <ng-container>No extra item(s) are authorized in this array</ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class NoExtraItemsComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NoExtraPropertiesComponent",
            "id": "component-NoExtraPropertiesComponent-fffc5e09fc2cedeaca053fe253039a78e565f68514b69999371441ae6552aec10ae0a07d2ff706ff0372654ac93f0e67132bcbdc15b26dcb65172780623db3eb",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/no-extra-properties.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-no-extra-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span>🚨&nbsp;</span>\n  <ng-container>No extra propertie(s) are authorized in this object</ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-no-extra-properties',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div>\r\n      <span>🚨&nbsp;</span>\r\n      <ng-container>No extra propertie(s) are authorized in this object</ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class NoExtraPropertiesComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NotLabelComponent",
            "id": "component-NotLabelComponent-804ccde16dd33f894d2e1c26784e4b5c82b21f5492569cbdb2dcaff8ef506adaed83c4605c0a01816fe3f9bcd2078b55cd075890106c070f54451f88c62f679c",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/not-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-not",
            "styleUrls": [],
            "styles": [],
            "template": "<strong>\n  NOT\n</strong>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-not',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <strong>\r\n      NOT\r\n    </strong>\r\n  `,\r\n})\r\nexport class NotLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NotSchemaComponent",
            "id": "component-NotSchemaComponent-e12ad19d9c6e7323056498761c3bdd6fade1a2ef8bdc5277e5c2c002305089616021b1d43c6f1e2adfde54698979a3bb70586ab1cd2537778066750caf875c6b",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/not.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-composition-not",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <span class=\"badge badge--info\">{{ typeOf }}</span>\n    <br />\n    <jse-common-create-nodes [schema]=\"typedSchema\" />\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 22,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "forwardRef(() => CreateNodesComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport { CreateNodesComponent } from \"../../common/create-nodes\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-composition-not',\r\n  standalone: true,\r\n  imports: [\r\n    forwardRef(() => CreateNodesComponent)\r\n  ],\r\n  template: `\r\n    <div>\r\n        <span class=\"badge badge--info\">{{ typeOf }}</span>\r\n        <br />\r\n        <jse-common-create-nodes [schema]=\"typedSchema\" />\r\n    </div>\r\n  `,\r\n})\r\nexport class NotSchemaComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): JSONSchema {\r\n    return this.schema.not!;\r\n  }\r\n\r\n  get typeOf(): string {\r\n    return \"not\";\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "",
                        "returnType": "JSONSchema",
                        "line": 24
                    }
                },
                "typeOf": {
                    "name": "typeOf",
                    "getSignature": {
                        "name": "typeOf",
                        "type": "string",
                        "returnType": "string",
                        "line": 28
                    }
                }
            }
        },
        {
            "name": "NullableComponent",
            "id": "component-NullableComponent-21b5d32774fcb25aa347e567f82600d85bd9150a3413f55c424b6377a04dd870c200497217c30ca7f0ab5c1b76f23ef0f051ba361489cff94cafe6858d2109fb",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/nullable.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-nullable",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span>❓&nbsp;</span>\n  <ng-container>Nullable</ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-nullable',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div>\r\n      <span>❓&nbsp;</span>\r\n      <ng-container>Nullable</ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class NullableComponent {}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NullLabelComponent",
            "id": "component-NullLabelComponent-7f2d1f3d705a628a05fdfbfe8009c886295510e72b2fcecb14b19b43e3990879a12d21d4cbbbc19af435de6c9b80a7351f0fd441a863b70e88f2aeb62b13169b",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/null-labels.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-null",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  null\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-null',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      null\r\n    </span>\r\n  `,\r\n})\r\nexport class NullLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "NumberBoundsComponent",
            "id": "component-NumberBoundsComponent-2c6faba026f54dc40971352bcc62a1af23bc161ac4a9f833296efc39e0b89f4275c4047a39af781ff397e74d8f794908c28ab5177601652a308c89bf55636331",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/number-bounds.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-number-bounds",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ boundsLabel }}</strong>&nbsp;\n  <ng-container *ngIf=\"minimum !== undefined\">\n    <code>\n      <span *ngIf=\"isExclusiveMinimum\">&gt;</span>\n      <span *ngIf=\"!isExclusiveMinimum\">&ge;</span>\n      {{ minimum }}\n    </code>\n  </ng-container>\n  <ng-container *ngIf=\"minAndMax\">\n    <labels-and />\n  </ng-container>\n  <ng-container *ngIf=\"maximum !== undefined\">\n    <code>\n      <span *ngIf=\"isExclusiveMaximum\">&lt;</span>\n      <span *ngIf=\"!isExclusiveMaximum\">&le;</span>\n      {{ maximum }}\n    </code>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 38,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boundsLabel",
                    "defaultValue": "'Possible values :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AndLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport {\r\n  AndLabelComponent\r\n} from \"../../labels/index\";\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-number-bounds',\r\n  standalone: true,\r\n  imports: [CommonModule, AndLabelComponent],\r\n  template: `\r\n    <div>\r\n      <strong>{{ boundsLabel }}</strong>&nbsp;\r\n      <ng-container *ngIf=\"minimum !== undefined\">\r\n        <code>\r\n          <span *ngIf=\"isExclusiveMinimum\">&gt;</span>\r\n          <span *ngIf=\"!isExclusiveMinimum\">&ge;</span>\r\n          {{ minimum }}\r\n        </code>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"minAndMax\">\r\n        <labels-and />\r\n      </ng-container>\r\n      <ng-container *ngIf=\"maximum !== undefined\">\r\n        <code>\r\n          <span *ngIf=\"isExclusiveMaximum\">&lt;</span>\r\n          <span *ngIf=\"!isExclusiveMaximum\">&le;</span>\r\n          {{ maximum }}\r\n        </code>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class NumberBoundsComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  boundsLabel = 'Possible values :';\r\n  \r\n  get minimum() : number | undefined { \r\n    return this.schema.exclusiveMinimum || this.schema.minimum; \r\n  }\r\n\r\n  get isExclusiveMinimum(): boolean {\r\n    return this.schema.exclusiveMinimum !== undefined;\r\n  }\r\n\r\n  get maximum(): number | undefined {\r\n    return this.schema.exclusiveMaximum || this.schema.maximum;\r\n  }\r\n\r\n  get isExclusiveMaximum() : boolean {\r\n    return this.minimum !== undefined && this.maximum !== undefined;\r\n  }\r\n\r\n  get minAndMax() : boolean {\r\n    return this.minimum !== undefined && this.maximum !== undefined;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "minimum": {
                    "name": "minimum",
                    "getSignature": {
                        "name": "minimum",
                        "type": "",
                        "returnType": "number | undefined",
                        "line": 42
                    }
                },
                "isExclusiveMinimum": {
                    "name": "isExclusiveMinimum",
                    "getSignature": {
                        "name": "isExclusiveMinimum",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 46
                    }
                },
                "maximum": {
                    "name": "maximum",
                    "getSignature": {
                        "name": "maximum",
                        "type": "",
                        "returnType": "number | undefined",
                        "line": 50
                    }
                },
                "isExclusiveMaximum": {
                    "name": "isExclusiveMaximum",
                    "getSignature": {
                        "name": "isExclusiveMaximum",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 54
                    }
                },
                "minAndMax": {
                    "name": "minAndMax",
                    "getSignature": {
                        "name": "minAndMax",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 58
                    }
                }
            }
        },
        {
            "name": "NumberLabelComponent",
            "id": "component-NumberLabelComponent-f13f5e501a37ff3e1192fc3aa5c9f305afc2a062c5be82f47ee1fd9ec5fc3204ab1e7b095301c5ad897cedab994c541ab08bf92c5775903d31b2873d25b23fd3",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/number-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-number",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  number\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-number',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      number\r\n    </span>\r\n  `,\r\n})\r\nexport class NumberLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ObjectLabelComponent",
            "id": "component-ObjectLabelComponent-cf67600894cc00bd9479981cd15efd8d64da138fada1188f8538d72709ce1c4f8bec96fb4c743c3d85a69e145127a47adfecfb4abf6c119eca966c7b36e4a5c8",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/object-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-object",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  object\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-object',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      object\r\n    </span>\r\n  `,\r\n})\r\nexport class ObjectLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ObjectPropertiesComponent",
            "id": "component-ObjectPropertiesComponent-d53e3af321bb7fbd5478fda48f179b4d5d54e10b29df7e10143e9346d1a6b967b5b0a5111cace46f12980873e5eb1e4b51e4d4a1c0bae3c2f66ead8449073d7f",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/object-properties.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-object-properties",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ lengthLabel }}</strong>&nbsp;\n  <ng-container *ngIf=\"schema.minProperties !== undefined\">\n    <code>\n        {{ '>= ' + schema.minProperties + ' propertie(s)' }}\n    </code>\n  </ng-container>\n  <ng-container *ngIf=\"minAndMax\">\n    <span>&nbsp;&&nbsp;</span>\n  </ng-container>\n  <ng-container *ngIf=\"schema.maxProperties !== undefined\">\n    <code>\n        {{ '<= ' + schema.maxProperties + ' propertie(s)' }}\n    </code>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 30,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "lengthLabel",
                    "defaultValue": "'Length :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-object-properties',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div>\r\n      <strong>{{ lengthLabel }}</strong>&nbsp;\r\n      <ng-container *ngIf=\"schema.minProperties !== undefined\">\r\n        <code>\r\n            {{ '>= ' + schema.minProperties + ' propertie(s)' }}\r\n        </code>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"minAndMax\">\r\n        <span>&nbsp;&&nbsp;</span>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"schema.maxProperties !== undefined\">\r\n        <code>\r\n            {{ '<= ' + schema.maxProperties + ' propertie(s)' }}\r\n        </code>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class ObjectPropertiesComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n  lengthLabel = 'Length :';\r\n\r\n  get minAndMax(): boolean {\r\n    return this.schema.minProperties !== undefined && this.schema.maxProperties !== undefined; \r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "minAndMax": {
                    "name": "minAndMax",
                    "getSignature": {
                        "name": "minAndMax",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 33
                    }
                }
            }
        },
        {
            "name": "OneOfSchemaComponent",
            "id": "component-OneOfSchemaComponent-7ed3ed5dabe0b5ad02a20783dcc2015d3fba3ef131a7676af10399a48794980f8b2ea427b7f30d339113cb5d306d9847ce8558b76343382f033a36ada9121d8c",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/one-of.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-composition-one-of",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <span class=\"badge badge--info\">{{ typeOf }}</span>\n  <mat-tab-group>\n    <mat-tab *ngFor=\"let compositeSchema of typedSchema\">\n      <ng-template mat-tab-label>\n        <jsv-friendly-name [schema]=\"compositeSchema\" />\n      </ng-template>\n      <jse-common-create-nodes [schema]=\"compositeSchema\" />\n    </mat-tab>\n  </mat-tab-group>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 34,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => GenerateFriendlyNameComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateNodesComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\n\r\nimport { GenerateFriendlyNameComponent } from \"../../utils/index\";\r\nimport { CreateNodesComponent } from \"../../common/create-nodes\";\r\n\r\nimport type { JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-composition-one-of',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    MatTabsModule, \r\n    forwardRef(() => GenerateFriendlyNameComponent), \r\n    forwardRef(() => CreateNodesComponent)\r\n  ],\r\n  template: `\r\n    <div>\r\n      <span class=\"badge badge--info\">{{ typeOf }}</span>\r\n      <mat-tab-group>\r\n        <mat-tab *ngFor=\"let compositeSchema of typedSchema\">\r\n          <ng-template mat-tab-label>\r\n            <jsv-friendly-name [schema]=\"compositeSchema\" />\r\n          </ng-template>\r\n          <jse-common-create-nodes [schema]=\"compositeSchema\" />\r\n        </mat-tab>\r\n      </mat-tab-group>\r\n    </div>\r\n  `,\r\n})\r\nexport class OneOfSchemaComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get typedSchema(): JSONSchema[] {\r\n    return this.schema.oneOf! as JSONSchema[];\r\n  }\r\n\r\n  get typeOf(): string {\r\n    return \"oneOf\";\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "typedSchema": {
                    "name": "typedSchema",
                    "getSignature": {
                        "name": "typedSchema",
                        "type": "[]",
                        "returnType": "JSONSchema[]",
                        "line": 36
                    }
                },
                "typeOf": {
                    "name": "typeOf",
                    "getSignature": {
                        "name": "typeOf",
                        "type": "string",
                        "returnType": "string",
                        "line": 40
                    }
                }
            }
        },
        {
            "name": "OrLabelComponent",
            "id": "component-OrLabelComponent-9b391c478e34d9fe1cd16d56bb9b131469b6fac2fd32a4bfd95d6ea2994a84243ab9bb08edf341a98f3b24f439ec2bb5c1d8035c6761773f3c0cea45f835574d",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/or-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-or",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n<strong>OR</strong>\n<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n\n<ng-template #spaceTemplate>\n  &nbsp;\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgTemplateOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-or',\r\n  standalone: true,\r\n  imports: [NgTemplateOutlet],\r\n  template: `\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n    <strong>OR</strong>\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n\r\n    <ng-template #spaceTemplate>\r\n      &nbsp;\r\n    </ng-template>\r\n  `,\r\n})\r\nexport class OrLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "PatternComponent",
            "id": "component-PatternComponent-8c522bba8b62cf6089736c3c84a743a7d87c08051aa94d293353e8489de4f1aee6439bc563c5b6edebae0d9032d2e5e9de8389791e3edc403ed1581f32cc70e6",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/pattern.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-pattern",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ patternLabel }}</strong>&nbsp;\n  <code>{{ pattern }}</code>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 17,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "patternLabel",
                    "defaultValue": "'Pattern :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n    selector: 'qm-pattern',\r\n    standalone: true,\r\n    imports: [],\r\n    template: `\r\n      <div>\r\n        <strong>{{ patternLabel }}</strong>&nbsp;\r\n        <code>{{ pattern }}</code>\r\n      </div>\r\n    `,\r\n  })\r\n  export class PatternComponent {\r\n    @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n    patternLabel = 'Pattern :';\r\n\r\n    get pattern(): string {\r\n      return this.schema.pattern!;\r\n    }\r\n  }\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "pattern": {
                    "name": "pattern",
                    "getSignature": {
                        "name": "pattern",
                        "type": "string",
                        "returnType": "string",
                        "line": 20
                    }
                }
            }
        },
        {
            "name": "PrintSchemaTypeComponent",
            "id": "component-PrintSchemaTypeComponent-5d432b16b561931f181e5d670817e38c39e2711de884d99ea64f46629de3eadfe42aa64acc13c1a5d7db78bb0d196215f3605e311a8130042e81aa5518ffa51a",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/print-schema-type.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-print-schema-type",
            "styleUrls": [],
            "styles": [
                "\n    .json-block {\n      background-color: #f5f5f5;\n      padding: 10px;\n      border: 1px solid #ddd;\n    }\n  "
            ],
            "template": "<ng-container *ngIf=\"isSimpleType; else complexType\">\n  <code>{{ value }}</code>\n</ng-container>\n<ng-template #complexType>\n    <pre><code [highlight]=\"jsonCode\" [languages]=\"languages\"></code></pre>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "obj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 26,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HighlightModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { HighlightModule } from 'ngx-highlightjs';\r\n\r\n@Component({\r\n  selector: 'lib-print-schema-type',\r\n  template: `\r\n    <ng-container *ngIf=\"isSimpleType; else complexType\">\r\n      <code>{{ value }}</code>\r\n    </ng-container>\r\n    <ng-template #complexType>\r\n        <pre><code [highlight]=\"jsonCode\" [languages]=\"languages\"></code></pre>\r\n    </ng-template>\r\n  `,\r\n  styles: [`\r\n    .json-block {\r\n      background-color: #f5f5f5;\r\n      padding: 10px;\r\n      border: 1px solid #ddd;\r\n    }\r\n  `],\r\n  standalone: true,\r\n  imports: [HighlightModule, CommonModule]\r\n})\r\nexport class PrintSchemaTypeComponent {\r\n  @Input({ required: true }) obj!: unknown;\r\n\r\n  get isSimpleType(): boolean {\r\n    return ['string', 'number', 'bigint', 'boolean'].includes(typeof this.obj);\r\n  }\r\n\r\n  get jsonCode(): string {\r\n    return JSON.stringify(this.obj, null, \"\\t\");\r\n  }\r\n\r\n  get value(): string {\r\n    return this.obj!.toString();\r\n  }\r\n\r\n  get languages(): string[] {\r\n    return [\"json\"];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .json-block {\n      background-color: #f5f5f5;\n      padding: 10px;\n      border: 1px solid #ddd;\n    }\n  \n",
            "accessors": {
                "isSimpleType": {
                    "name": "isSimpleType",
                    "getSignature": {
                        "name": "isSimpleType",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 28
                    }
                },
                "jsonCode": {
                    "name": "jsonCode",
                    "getSignature": {
                        "name": "jsonCode",
                        "type": "string",
                        "returnType": "string",
                        "line": 32
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "string",
                        "returnType": "string",
                        "line": 36
                    }
                },
                "languages": {
                    "name": "languages",
                    "getSignature": {
                        "name": "languages",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 40
                    }
                }
            }
        },
        {
            "name": "PropertyNamesComponent",
            "id": "component-PropertyNamesComponent-b4e48c0badd1ed1983eef292b7312f51719e914d571151c224c73e2771c062eea8eed9f1aa4c3d11ab1ebc3027fecdca80776679f0d1f9c3db0ce92a69d436b3",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/property-names.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-object-property-names",
            "styleUrls": [],
            "styles": [],
            "template": "<ul *ngIf=\"isPropertyNamesValid()\">\n  <jse-common-create-edge [schema]=\"generateSchema()\" [required]=\"false\">\n    <code name>\n      {{ generatePropertyName() }}\n    </code>\n  </jse-common-create-edge>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 28,
                    "type": "JSONSchemaNS.Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "generatePropertyName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateSchema",
                    "args": [],
                    "optional": false,
                    "returnType": "JSONSchema",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isPropertyNamesValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateEdgeComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n  CreateEdgeComponent\r\n} from \"../../common/index\";\r\n\r\nimport type { JSONSchemaNS, JSONSchema } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-object-property-names',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateEdgeComponent)\r\n  ],\r\n  template: `\r\n    <ul *ngIf=\"isPropertyNamesValid()\">\r\n      <jse-common-create-edge [schema]=\"generateSchema()\" [required]=\"false\">\r\n        <code name>\r\n          {{ generatePropertyName() }}\r\n        </code>\r\n      </jse-common-create-edge>\r\n    </ul>\r\n  `,\r\n})\r\nexport class PropertyNamesComponent {\r\n  @Input({ required: true }) schema!: JSONSchemaNS.Object;\r\n\r\n  isPropertyNamesValid(): boolean {\r\n    const propertyNames = this.schema.propertyNames;\r\n    return (\r\n      propertyNames !== undefined &&\r\n      typeof propertyNames !== \"boolean\" &&\r\n      propertyNames.pattern !== undefined\r\n    );\r\n  }\r\n\r\n  generatePropertyName(): string {\r\n    const propertyNames = this.schema.propertyNames!;\r\n    const pattern = typeof propertyNames !== \"boolean\" ? propertyNames?.pattern : \"\";\r\n    return `${pattern}`;\r\n  }\r\n\r\n  generateSchema(): JSONSchema {\r\n    const propertyNames = this.schema.propertyNames;\r\n    if (propertyNames && typeof propertyNames !== \"boolean\") {\r\n      const { pattern, ...newSchema } = propertyNames;\r\n      return newSchema;\r\n    }\r\n    return {};\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "QualifierMessages",
            "id": "component-QualifierMessages-4cc5b74fa99f59d50ba1c196f92360e337312656ca48ea88e75373b05f3a04b98bafedfc0435eb9d9a0b74a322136a9342fc7ced69bbb7510b9765bc2ea29476",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/qualifier-messages.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-messages",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n    <ng-container *ngFor=\"let key of filteredQualifiers\">\n        <ng-container [ngSwitch]=\"key\">\n            <qm-constant *ngSwitchCase=\"'const'\" [schema]=\"schema\"/>\n            <qm-default-value *ngSwitchCase=\"'default'\" [schema]=\"schema\"/>\n            <qm-enum *ngSwitchCase=\"'enum'\" [schema]=\"schema\"/>\n            <qm-examples *ngSwitchCase=\"'examples'\" [schema]=\"schema\"/>\n            <qm-read-only *ngSwitchCase=\"'readOnly'\" />\n            <qm-write-only *ngSwitchCase=\"'writeOnly'\" />\n            <qm-array-unique-items *ngSwitchCase=\"'uniqueItems'\" />\n            <qm-deprecated *ngSwitchCase=\"'deprecated'\" />\n            <qm-nullable *ngSwitchCase=\"'nullable'\" />\n            <qm-string-length *ngSwitchCase=\"'stringLength'\" [schema]=\"schema\" />\n            <qm-object-properties *ngSwitchCase=\"'objectProperties'\" [schema]=\"schema\" />\n            <qm-no-extra-properties *ngSwitchCase=\"'no-extra-properties'\" />\n            <qm-array-number-of-items *ngSwitchCase=\"'arrayItems'\" [schema]=\"schema\" />\n            <qm-array-contains *ngSwitchCase=\"'arrayContains'\" [schema]=\"schema\" />\n            <qm-no-extra-items *ngSwitchCase=\"'no-extra-items'\" />\n            <qm-number-bounds *ngSwitchCase=\"'number-range'\" [schema]=\"schema\" />\n            <qm-pattern *ngSwitchCase=\"'pattern'\" [schema]=\"schema\" />\n            <qm-multiple-of *ngSwitchCase=\"'multipleOf'\" [schema]=\"schema\" />\n            <qm-content-encoding *ngSwitchCase=\"'contentEncoding'\" [schema]=\"schema\" />\n            <qm-content-media-type *ngSwitchCase=\"'contentMediaType'\" [schema]=\"schema\" />\n            <qm-content-schema *ngSwitchCase=\"'contentSchema'\" [schema]=\"typedAsJSONSchemaString\" />\n        </ng-container>\n    </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 92,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ConstantComponent",
                    "type": "component"
                },
                {
                    "name": "DefaultValueComponent",
                    "type": "component"
                },
                {
                    "name": "EnumComponent",
                    "type": "component"
                },
                {
                    "name": "ExamplesComponent",
                    "type": "component"
                },
                {
                    "name": "ReadOnlyComponent",
                    "type": "component"
                },
                {
                    "name": "WriteOnlyComponent",
                    "type": "component"
                },
                {
                    "name": "ArrayUniqueItemsComponent",
                    "type": "component"
                },
                {
                    "name": "DeprecatedComponent",
                    "type": "component"
                },
                {
                    "name": "NullableComponent",
                    "type": "component"
                },
                {
                    "name": "StringLengthComponent",
                    "type": "component"
                },
                {
                    "name": "ObjectPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "NoExtraPropertiesComponent",
                    "type": "component"
                },
                {
                    "name": "ArrayNumberOfItemsComponent",
                    "type": "component"
                },
                {
                    "name": "ArrayContainsNumberComponent",
                    "type": "component"
                },
                {
                    "name": "NoExtraItemsComponent",
                    "type": "component"
                },
                {
                    "name": "NumberBoundsComponent",
                    "type": "component"
                },
                {
                    "name": "PatternComponent",
                    "type": "component"
                },
                {
                    "name": "MultipleOfComponent",
                    "type": "component"
                },
                {
                    "name": "ContentEncodingComponent",
                    "type": "component"
                },
                {
                    "name": "ContentMediaTypeComponent",
                    "type": "component"
                },
                {
                    "name": "ContentSchemaComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { JSVOptionsService } from '../services/jsv-options';\r\n\r\n// qualifier messages\r\nimport {\r\n    ConstantComponent,\r\n    ArrayContainsNumberComponent,\r\n    ArrayNumberOfItemsComponent,\r\n    ArrayUniqueItemsComponent,\r\n    ContentEncodingComponent,\r\n    ContentMediaTypeComponent,\r\n    ContentSchemaComponent,\r\n    DefaultValueComponent,\r\n    DeprecatedComponent,\r\n    EnumComponent,\r\n    ExamplesComponent,\r\n    MultipleOfComponent,\r\n    NoExtraItemsComponent,\r\n    NoExtraPropertiesComponent,\r\n    NullableComponent,\r\n    NumberBoundsComponent,\r\n    ObjectPropertiesComponent,\r\n    PatternComponent,\r\n    ReadOnlyComponent,\r\n    StringLengthComponent,\r\n    WriteOnlyComponent\r\n} from \"./QualifierMessages/index\";\r\n\r\n// Types\r\nimport type { JSONSchema, JSONSchemaNS } from '../types';\r\nimport type { JSVOptions, CheckKey } from '../services/jsv-options';\r\n\r\n@Component({\r\n    selector: 'qm-messages',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        ConstantComponent,\r\n        DefaultValueComponent,\r\n        EnumComponent,\r\n        ExamplesComponent,\r\n        ReadOnlyComponent,\r\n        WriteOnlyComponent,\r\n        ArrayUniqueItemsComponent,\r\n        DeprecatedComponent,\r\n        NullableComponent,\r\n        StringLengthComponent,\r\n        ObjectPropertiesComponent,\r\n        NoExtraPropertiesComponent,\r\n        ArrayNumberOfItemsComponent,\r\n        ArrayContainsNumberComponent,\r\n        NoExtraItemsComponent,\r\n        NumberBoundsComponent,\r\n        PatternComponent,\r\n        MultipleOfComponent,\r\n        ContentEncodingComponent,\r\n        ContentMediaTypeComponent,\r\n        ContentSchemaComponent\r\n    ],\r\n    template: `\r\n        <div>\r\n            <ng-container *ngFor=\"let key of filteredQualifiers\">\r\n                <ng-container [ngSwitch]=\"key\">\r\n                    <qm-constant *ngSwitchCase=\"'const'\" [schema]=\"schema\"/>\r\n                    <qm-default-value *ngSwitchCase=\"'default'\" [schema]=\"schema\"/>\r\n                    <qm-enum *ngSwitchCase=\"'enum'\" [schema]=\"schema\"/>\r\n                    <qm-examples *ngSwitchCase=\"'examples'\" [schema]=\"schema\"/>\r\n                    <qm-read-only *ngSwitchCase=\"'readOnly'\" />\r\n                    <qm-write-only *ngSwitchCase=\"'writeOnly'\" />\r\n                    <qm-array-unique-items *ngSwitchCase=\"'uniqueItems'\" />\r\n                    <qm-deprecated *ngSwitchCase=\"'deprecated'\" />\r\n                    <qm-nullable *ngSwitchCase=\"'nullable'\" />\r\n                    <qm-string-length *ngSwitchCase=\"'stringLength'\" [schema]=\"schema\" />\r\n                    <qm-object-properties *ngSwitchCase=\"'objectProperties'\" [schema]=\"schema\" />\r\n                    <qm-no-extra-properties *ngSwitchCase=\"'no-extra-properties'\" />\r\n                    <qm-array-number-of-items *ngSwitchCase=\"'arrayItems'\" [schema]=\"schema\" />\r\n                    <qm-array-contains *ngSwitchCase=\"'arrayContains'\" [schema]=\"schema\" />\r\n                    <qm-no-extra-items *ngSwitchCase=\"'no-extra-items'\" />\r\n                    <qm-number-bounds *ngSwitchCase=\"'number-range'\" [schema]=\"schema\" />\r\n                    <qm-pattern *ngSwitchCase=\"'pattern'\" [schema]=\"schema\" />\r\n                    <qm-multiple-of *ngSwitchCase=\"'multipleOf'\" [schema]=\"schema\" />\r\n                    <qm-content-encoding *ngSwitchCase=\"'contentEncoding'\" [schema]=\"schema\" />\r\n                    <qm-content-media-type *ngSwitchCase=\"'contentMediaType'\" [schema]=\"schema\" />\r\n                    <qm-content-schema *ngSwitchCase=\"'contentSchema'\" [schema]=\"typedAsJSONSchemaString\" />\r\n                </ng-container>\r\n            </ng-container>\r\n        </div>\r\n    `\r\n})\r\nexport class QualifierMessages {\r\n    @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n    constructor(private jsvOptionsService: JSVOptionsService) {}\r\n\r\n    get options(): JSVOptions {\r\n        return this.jsvOptionsService.getOptions();\r\n    }\r\n\r\n    get typedAsJSONSchemaString(): JSONSchemaNS.String {\r\n        return this.schema as JSONSchemaNS.String;\r\n    }\r\n\r\n    get filteredQualifiers(): CheckKey[] {\r\n        const qualifierMessagesOrder = this.options.qualifierMessagesOrder;\r\n\r\n        return qualifierMessagesOrder.filter(qualifierKey => {\r\n            switch(qualifierKey) {\r\n                case 'const':\r\n                    return this.schema.const !== undefined;\r\n                case 'default':\r\n                    return this.schema.default !== undefined;\r\n                case 'enum':\r\n                    return this.schema.enum !== undefined;\r\n                case 'examples':\r\n                    return (this.options.showExamples || false) && this.schema.examples !== undefined;\r\n                case 'readOnly':\r\n                    return this.schema.readOnly === true;\r\n                case 'writeOnly':\r\n                    return this.schema.writeOnly === true;\r\n                case 'uniqueItems':\r\n                    return this.schema.uniqueItems === true;\r\n                case 'deprecated':\r\n                    return (this.schema as JSONSchemaNS.Object).deprecated === true;\r\n                case 'nullable':\r\n                    return (this.schema as any).nullable === true;\r\n                case 'stringLength':\r\n                    return this.schema.minLength !== undefined || this.schema.maxLength !== undefined;\r\n                case 'objectProperties':\r\n                    return this.schema.minProperties !== undefined || this.schema.maxProperties !== undefined;\r\n                case 'no-extra-properties':\r\n                    return this.schema.additionalProperties === false || (this.schema as JSONSchemaNS.Object).unevaluatedProperties === false;\r\n                case 'arrayItems':\r\n                    return this.schema.minItems !== undefined || this.schema.maxItems !== undefined;\r\n                case 'arrayContains':\r\n                    return (this.schema as JSONSchemaNS.Array).minContains !== undefined || (this.schema as JSONSchemaNS.Array).maxContains !== undefined;\r\n                case 'no-extra-items':\r\n                    return (this.schema as JSONSchemaNS.Array).unevaluatedItems === false || this.schema.items === false || this.schema.additionalItems === false;\r\n                case 'number-range':\r\n                    return this.schema.minimum !== undefined || this.schema.exclusiveMinimum !== undefined || this.schema.maximum !== undefined || this.schema.exclusiveMaximum !== undefined;\r\n                case 'pattern':\r\n                    return this.schema.pattern !== undefined;\r\n                case 'multipleOf':\r\n                    return this.schema.multipleOf !== undefined;\r\n                case 'contentMediaType':\r\n                    return this.schema.contentMediaType !== undefined;\r\n                case 'contentEncoding':\r\n                    return this.schema.contentEncoding !== undefined;\r\n                case 'contentSchema':\r\n                    return (this.schema as JSONSchemaNS.String).contentSchema !== undefined;\r\n            }\r\n        });\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "jsvOptionsService",
                        "type": "JSVOptionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 92,
                "jsdoctags": [
                    {
                        "name": "jsvOptionsService",
                        "type": "JSVOptionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "JSVOptions",
                        "line": 96
                    }
                },
                "typedAsJSONSchemaString": {
                    "name": "typedAsJSONSchemaString",
                    "getSignature": {
                        "name": "typedAsJSONSchemaString",
                        "type": "",
                        "returnType": "JSONSchemaNS.String",
                        "line": 100
                    }
                },
                "filteredQualifiers": {
                    "name": "filteredQualifiers",
                    "getSignature": {
                        "name": "filteredQualifiers",
                        "type": "[]",
                        "returnType": "CheckKey[]",
                        "line": 104
                    }
                }
            }
        },
        {
            "name": "ReadOnlyComponent",
            "id": "component-ReadOnlyComponent-44425342d6d43439d6e14aed9cfe03c44027e0b279e62ce1021c1f5d77cb2bbd438a73ee04cad432b69fa9cd31848a9b1abd671d332b8b6e9a2ba25ef02065ba",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/readOnly.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-read-only",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  🚨&nbsp;\n  <strong>{{ readOnlyLabel }}</strong>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "readOnlyLabel",
                    "defaultValue": "'read only'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-read-only',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div>\r\n      🚨&nbsp;\r\n      <strong>{{ readOnlyLabel }}</strong>\r\n    </div>\r\n  `,\r\n})\r\nexport class ReadOnlyComponent {\r\n  readOnlyLabel = 'read only';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ReadOnlyLabelComponent",
            "id": "component-ReadOnlyLabelComponent-9618c0271b3568ee273fa35ea4fdae3292a9dd5bd57e2d67e93730505ecd8ca00a2e28be45dbe9c84c83a9b24328696013082e0891a9b3847cd6d3b2f1feb580",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/ReadOnly/read-only-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-read-only",
            "styleUrls": [
                "./read-only-label.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./read-only-label.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-read-only',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './read-only-label.component.html',\r\n  styleUrls: ['./read-only-label.component.css']\r\n})\r\nexport class ReadOnlyLabelComponent { }",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".readOnly {\r\n    font-size: 90%;\r\n    color: #47a9c9;\r\n}",
                    "styleUrl": "./read-only-label.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<strong class=\"readOnly\">\r\n    readOnly\r\n</strong>\r\n  "
        },
        {
            "name": "RenderMultipleTypesComponent",
            "id": "component-RenderMultipleTypesComponent-80e1368cb40be6229fa2ede5375728628011f0e28c6a6a62635c286042190ca8087054e881e3fd904ca0327a0d86c6a9253205d05405ae2d8d2e4be9e8918d94",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/render-multiple-types.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-multiple-types",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-tab-group>\n  <mat-tab *ngFor=\"let type of types\">\n    <ng-template mat-tab-label>\n        <jsv-type-label-switch [type]=\"type\" />\n    </ng-template>\n    <jse-common-render-provided-type [type]=\"type\" [schema]=\"schema\" [nullable]=\"nullable\" />\n  </mat-tab>\n</mat-tab-group>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "nullable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 39,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "types",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 41,
                    "type": "TypeValues[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "RenderProvidedTypeComponent",
                    "type": "component"
                },
                {
                    "name": "TypeLabelSwitchComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\n\r\nimport {\r\n    RenderProvidedTypeComponent\r\n} from \"./index\";\r\n\r\nimport {\r\n    TypeLabelSwitchComponent\r\n} from \"../utils/index\";\r\n\r\nimport type {\r\n    TypeValues,\r\n    JSONSchema\r\n} from \"../types\";\r\n\r\n@Component({\r\n  selector: 'jse-common-multiple-types',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatTabsModule,\r\n    RenderProvidedTypeComponent,\r\n    TypeLabelSwitchComponent\r\n  ],\r\n  template: `\r\n    <mat-tab-group>\r\n      <mat-tab *ngFor=\"let type of types\">\r\n        <ng-template mat-tab-label>\r\n            <jsv-type-label-switch [type]=\"type\" />\r\n        </ng-template>\r\n        <jse-common-render-provided-type [type]=\"type\" [schema]=\"schema\" [nullable]=\"nullable\" />\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n  `\r\n})\r\nexport class RenderMultipleTypesComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n  @Input() nullable?: boolean;\r\n  @Input({ required: true }) types!: TypeValues[];\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "RenderProvidedTypeComponent",
            "id": "component-RenderProvidedTypeComponent-e6be79e506f5af2a7606623c79bed8aa8987bf0d30aef34384d27a9124a863467d53785ec7dbd3715b5a31bc4b0e02e2458a6fa4fe610d2df10374de8b970117",
            "file": "projects/ngx-json-schema-viewer/src/lib/common/render-provided-type.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-common-render-provided-type",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container [ngSwitch]=\"type\">\n  <jse-array\n    *ngSwitchCase=\"'array'\"\n    [schema]=\"asTypedArray\"\n    [description]=\"description\"\n  />\n  <jse-object\n    *ngSwitchCase=\"'object'\"\n    [schema]=\"asTypedObject\"\n    [description]=\"description\"\n  />\n  <jse-string\n    *ngSwitchCase=\"'string'\"\n    [schema]=\"asTypedString\"\n    [description]=\"description\"\n  />\n  <jse-boolean\n    *ngSwitchCase=\"'boolean'\"\n    [schema]=\"asTypedBoolean\"\n    [description]=\"description\"\n  />\n  <jse-number\n    *ngSwitchCase=\"'number'\"\n    [schema]=\"asTypedNumber\"\n    [description]=\"description\"\n  />\n  <jse-integer\n    *ngSwitchCase=\"'integer'\"\n    [schema]=\"asTypedInteger\"\n    [description]=\"description\"\n  />\n  <jse-null\n    *ngSwitchDefault\n    [schema]=\"asTypedNull\"\n    [description]=\"description\"\n  />\n<ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "nullable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 74,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 75,
                    "type": "TypeValues",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "forwardRef(() => CreateArrayComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateObjectComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateStringComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateBooleanComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateNumberComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateIntegerComponent)",
                    "type": "component"
                },
                {
                    "name": "forwardRef(() => CreateNullComponent)",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, forwardRef } from '@angular/core';\r\n\r\nimport {\r\n    CreateArrayComponent,\r\n    CreateObjectComponent,\r\n    CreateStringComponent,\r\n    CreateBooleanComponent,\r\n    CreateNumberComponent,\r\n    CreateIntegerComponent,\r\n    CreateNullComponent\r\n} from \"../JSONSchemaElements/index\";\r\n\r\nimport type {\r\n    JSONSchema,\r\n    JSONSchemaNS,\r\n    TypeValues,\r\n} from '../types';\r\n\r\n@Component({\r\n  selector: 'jse-common-render-provided-type',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    forwardRef(() => CreateArrayComponent),\r\n    forwardRef(() => CreateObjectComponent),\r\n    forwardRef(() => CreateStringComponent),\r\n    forwardRef(() => CreateBooleanComponent),\r\n    forwardRef(() => CreateNumberComponent),\r\n    forwardRef(() => CreateIntegerComponent),\r\n    forwardRef(() => CreateNullComponent)\r\n  ],\r\n  template: `\r\n    <ng-container [ngSwitch]=\"type\">\r\n      <jse-array\r\n        *ngSwitchCase=\"'array'\"\r\n        [schema]=\"asTypedArray\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-object\r\n        *ngSwitchCase=\"'object'\"\r\n        [schema]=\"asTypedObject\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-string\r\n        *ngSwitchCase=\"'string'\"\r\n        [schema]=\"asTypedString\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-boolean\r\n        *ngSwitchCase=\"'boolean'\"\r\n        [schema]=\"asTypedBoolean\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-number\r\n        *ngSwitchCase=\"'number'\"\r\n        [schema]=\"asTypedNumber\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-integer\r\n        *ngSwitchCase=\"'integer'\"\r\n        [schema]=\"asTypedInteger\"\r\n        [description]=\"description\"\r\n      />\r\n      <jse-null\r\n        *ngSwitchDefault\r\n        [schema]=\"asTypedNull\"\r\n        [description]=\"description\"\r\n      />\r\n    <ng-container>\r\n  `,\r\n})\r\nexport class RenderProvidedTypeComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n  @Input({ required: true }) type!: TypeValues;\r\n  @Input() nullable?: boolean;\r\n\r\n  get description(): string | undefined {\r\n    return this.schema.description;\r\n  }\r\n\r\n  get asTypedArray() : JSONSchemaNS.Array {\r\n    return this.schema as JSONSchemaNS.Array;\r\n  }\r\n\r\n  get asTypedObject(): JSONSchemaNS.Object {\r\n    return this.schema as JSONSchemaNS.Object;\r\n  }\r\n\r\n  get asTypedString(): JSONSchemaNS.String {\r\n    return this.schema as JSONSchemaNS.String;\r\n  }\r\n\r\n  get asTypedBoolean(): JSONSchemaNS.Boolean {\r\n    return this.schema as JSONSchemaNS.Boolean;\r\n  }\r\n\r\n  get asTypedNumber(): JSONSchemaNS.Number {\r\n    return this.schema as JSONSchemaNS.Number;\r\n  }\r\n\r\n  get asTypedInteger(): JSONSchemaNS.Integer {\r\n    return this.schema as JSONSchemaNS.Integer;\r\n  }\r\n\r\n  get asTypedNull(): JSONSchemaNS.Null {\r\n    return this.schema as JSONSchemaNS.Null;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 78
                    }
                },
                "asTypedArray": {
                    "name": "asTypedArray",
                    "getSignature": {
                        "name": "asTypedArray",
                        "type": "",
                        "returnType": "JSONSchemaNS.Array",
                        "line": 82
                    }
                },
                "asTypedObject": {
                    "name": "asTypedObject",
                    "getSignature": {
                        "name": "asTypedObject",
                        "type": "",
                        "returnType": "JSONSchemaNS.Object",
                        "line": 86
                    }
                },
                "asTypedString": {
                    "name": "asTypedString",
                    "getSignature": {
                        "name": "asTypedString",
                        "type": "",
                        "returnType": "JSONSchemaNS.String",
                        "line": 90
                    }
                },
                "asTypedBoolean": {
                    "name": "asTypedBoolean",
                    "getSignature": {
                        "name": "asTypedBoolean",
                        "type": "",
                        "returnType": "JSONSchemaNS.Boolean",
                        "line": 94
                    }
                },
                "asTypedNumber": {
                    "name": "asTypedNumber",
                    "getSignature": {
                        "name": "asTypedNumber",
                        "type": "",
                        "returnType": "JSONSchemaNS.Number",
                        "line": 98
                    }
                },
                "asTypedInteger": {
                    "name": "asTypedInteger",
                    "getSignature": {
                        "name": "asTypedInteger",
                        "type": "",
                        "returnType": "JSONSchemaNS.Integer",
                        "line": 102
                    }
                },
                "asTypedNull": {
                    "name": "asTypedNull",
                    "getSignature": {
                        "name": "asTypedNull",
                        "type": "",
                        "returnType": "JSONSchemaNS.Null",
                        "line": 106
                    }
                }
            }
        },
        {
            "name": "RequiredLabelComponent",
            "id": "component-RequiredLabelComponent-1d43e12555b9c7bacb17b04be2943790d223b2b090e7cdede0ab0c2d6e5ac6180679ce6c12bebbe2c536d04314f529123af456c6e0e457b815fd1e67252dcbe9",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/Required/required-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-required",
            "styleUrls": [
                "./required-label.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./required-label.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-required',\r\n  standalone: true,\r\n  templateUrl: './required-label.component.html',\r\n  styleUrls: ['./required-label.component.css']\r\n})\r\nexport class RequiredLabelComponent { }\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".required {\r\n    font-size: 90%;\r\n    color: #fa383e;\r\n}",
                    "styleUrl": "./required-label.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<strong class=\"required\">\r\n    required\r\n</strong>  "
        },
        {
            "name": "SchemaCompositionComponent",
            "id": "component-SchemaCompositionComponent-78d7588bdbca9c035ab5354f9049d2c4f6795905551fa8a18216f645df4f2cc525298b522cc112b505c7cc5a786d569124456895e891fe46741e1dc9def3759d",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/index.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-composition",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"schema.oneOf\">\n  <jse-schema-composition-one-of [schema]=\"schema\" />\n</ng-container>\n<ng-container *ngIf=\"schema.anyOf\">\n  <jse-schema-composition-any-of [schema]=\"schema\" />\n</ng-container>\n<ng-container *ngIf=\"schema.allOf\">\n  <jse-schema-composition-all-of [schema]=\"schema\" />\n</ng-container>\n<ng-container *ngIf=\"schema.not\">\n  <jse-schema-composition-not [schema]=\"schema\" />\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 46,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AllOfSchemaComponent",
                    "type": "component"
                },
                {
                    "name": "AnyOfSchemaComponent",
                    "type": "component"
                },
                {
                    "name": "NotSchemaComponent",
                    "type": "component"
                },
                {
                    "name": "OneOfSchemaComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport { AllOfSchemaComponent } from \"./all-of\";\r\nimport { AnyOfSchemaComponent } from \"./any-of\";\r\nimport { NotSchemaComponent } from \"./not\";\r\nimport { OneOfSchemaComponent } from \"./one-of\";\r\n\r\nexport {\r\n  AllOfSchemaComponent,\r\n  AnyOfSchemaComponent,\r\n  NotSchemaComponent,\r\n  OneOfSchemaComponent\r\n}\r\n\r\nimport type {\r\n    JSONSchema\r\n} from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-composition',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    AllOfSchemaComponent,\r\n    AnyOfSchemaComponent,\r\n    NotSchemaComponent,\r\n    OneOfSchemaComponent\r\n  ],\r\n  template: `\r\n    <ng-container *ngIf=\"schema.oneOf\">\r\n      <jse-schema-composition-one-of [schema]=\"schema\" />\r\n    </ng-container>\r\n    <ng-container *ngIf=\"schema.anyOf\">\r\n      <jse-schema-composition-any-of [schema]=\"schema\" />\r\n    </ng-container>\r\n    <ng-container *ngIf=\"schema.allOf\">\r\n      <jse-schema-composition-all-of [schema]=\"schema\" />\r\n    </ng-container>\r\n    <ng-container *ngIf=\"schema.not\">\r\n      <jse-schema-composition-not [schema]=\"schema\" />\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class SchemaCompositionComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "SchemaConditionalComponent",
            "id": "component-SchemaConditionalComponent-3e7db35af25a3df3475acfe08c279fc7373800381b6a8516cb540a5f103242a4ec60c9957c6c8939d9494e65331b109b92a842b2bb3f0eb9023dc15951440117",
            "file": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/index.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jse-schema-conditional",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-accordion>\n    <mat-expansion-panel>\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                {{ schemaConditionalLabel }}\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <ng-template matExpansionPanelContent>\n          <!-- Handles if-then-else case -->\n          <jse-schema-conditional-if-else-then [schema]=\"schema\" *ngIf=\"isIfThenElse\" />\n          <!-- Handles dependentRequired case -->\n          <jse-schema-conditional-dependent-required [schema]=\"schema\" *ngIf=\"isDependentRequired\" />\n          <!-- Handles dependentSchemas case -->\n          <jse-schema-conditional-dependent-schemas [schema]=\"schema\" *ngIf=\"isDependentSchemas\" />\n          <!-- Handles dependencies (deprecated) -->\n          <jse-schema-conditional-dependencies [schema]=\"schema\" *ngIf=\"isDependencies\" />\n        </ng-template>\n    </mat-expansion-panel>\n</mat-accordion>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 53,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "IfElseThenComponent",
                    "type": "component"
                },
                {
                    "name": "DependentRequiredComponent",
                    "type": "component"
                },
                {
                    "name": "DependentSchemasComponent",
                    "type": "component"
                },
                {
                    "name": "DependenciesComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\n\r\nimport { IfElseThenComponent } from \"./if-else-then\";\r\nimport { DependentRequiredComponent } from \"./dependent-required\";\r\nimport { DependentSchemasComponent } from \"./dependent-schemas\";\r\nimport { DependenciesComponent } from \"./dependencies\";\r\n\r\nexport {\r\n  IfElseThenComponent,\r\n  DependentRequiredComponent,\r\n  DependentSchemasComponent,\r\n  DependenciesComponent\r\n}\r\n\r\nimport type { JSONSchema, JSONSchemaNS } from \"../../types\";\r\n\r\n@Component({\r\n  selector: 'jse-schema-conditional',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    MatExpansionModule,\r\n    IfElseThenComponent,\r\n    DependentRequiredComponent,\r\n    DependentSchemasComponent,\r\n    DependenciesComponent\r\n  ],\r\n  template: `\r\n    <mat-accordion>\r\n        <mat-expansion-panel>\r\n            <mat-expansion-panel-header>\r\n                <mat-panel-title>\r\n                    {{ schemaConditionalLabel }}\r\n                </mat-panel-title>\r\n            </mat-expansion-panel-header>\r\n            <ng-template matExpansionPanelContent>\r\n              <!-- Handles if-then-else case -->\r\n              <jse-schema-conditional-if-else-then [schema]=\"schema\" *ngIf=\"isIfThenElse\" />\r\n              <!-- Handles dependentRequired case -->\r\n              <jse-schema-conditional-dependent-required [schema]=\"schema\" *ngIf=\"isDependentRequired\" />\r\n              <!-- Handles dependentSchemas case -->\r\n              <jse-schema-conditional-dependent-schemas [schema]=\"schema\" *ngIf=\"isDependentSchemas\" />\r\n              <!-- Handles dependencies (deprecated) -->\r\n              <jse-schema-conditional-dependencies [schema]=\"schema\" *ngIf=\"isDependencies\" />\r\n            </ng-template>\r\n        </mat-expansion-panel>\r\n    </mat-accordion>\r\n  `,\r\n})\r\nexport class SchemaConditionalComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  get isIfThenElse(): boolean {\r\n    return this.schema.if !== undefined;\r\n  }\r\n\r\n  get isDependentRequired(): boolean {\r\n    return (this.schema as JSONSchemaNS.Object).dependentRequired !== undefined;\r\n  }\r\n\r\n  get isDependentSchemas(): boolean {\r\n    return (this.schema as JSONSchemaNS.Object).dependentSchemas !== undefined;\r\n  }\r\n\r\n  get isDependencies(): boolean {\r\n    return this.schema.dependencies !== undefined;\r\n  }\r\n\r\n  get schemaConditionalLabel(): string {\r\n    return \"Conditional subschemas\";\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "isIfThenElse": {
                    "name": "isIfThenElse",
                    "getSignature": {
                        "name": "isIfThenElse",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 55
                    }
                },
                "isDependentRequired": {
                    "name": "isDependentRequired",
                    "getSignature": {
                        "name": "isDependentRequired",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 59
                    }
                },
                "isDependentSchemas": {
                    "name": "isDependentSchemas",
                    "getSignature": {
                        "name": "isDependentSchemas",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 63
                    }
                },
                "isDependencies": {
                    "name": "isDependencies",
                    "getSignature": {
                        "name": "isDependencies",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 67
                    }
                },
                "schemaConditionalLabel": {
                    "name": "schemaConditionalLabel",
                    "getSignature": {
                        "name": "schemaConditionalLabel",
                        "type": "string",
                        "returnType": "string",
                        "line": 71
                    }
                }
            }
        },
        {
            "name": "StringLabelComponent",
            "id": "component-StringLabelComponent-f33d15f5c30c56cb68c5f27514d07e14f3d07be29130962d4122d4d49398a7257dc65f6536383bfab52e14a4089baf85966b4702821d886a49ea6c36b0b66bb3",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/string-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-string",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  number\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-string',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      number\r\n    </span>\r\n  `,\r\n})\r\nexport class StringLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StringLengthComponent",
            "id": "component-StringLengthComponent-2b867449d5b2f10539ae1b218e3bafa90673708382eeca8aaa4b2b824bd6f78a701c3e848cea47b29feabab58d7ef8e73fe8e3b422966fc4cd0652b75c82cb42",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/string-length.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-string-length",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <strong>{{ lengthLabel }}</strong>&nbsp;\n  <ng-container *ngIf=\"schema.minLength !== undefined\">\n    <code>{{ '>= ' + schema.minLength + ' character(s)' }}</code>\n  </ng-container>\n  <ng-container *ngIf=\"minAndMaxLength\">\n    <span>&nbsp;&&nbsp;</span>\n  </ng-container>\n  <ng-container *ngIf=\"schema.maxLength !== undefined\">\n    <code>{{ '<= ' + schema.maxLength + ' character(s)' }}</code>\n  </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 26,
                    "type": "Exclude<JSONSchema |  | >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "lengthLabel",
                    "defaultValue": "'Length :'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\nimport type { JSONSchema } from '../../types';\r\n\r\n@Component({\r\n  selector: 'qm-string-length',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div>\r\n      <strong>{{ lengthLabel }}</strong>&nbsp;\r\n      <ng-container *ngIf=\"schema.minLength !== undefined\">\r\n        <code>{{ '>= ' + schema.minLength + ' character(s)' }}</code>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"minAndMaxLength\">\r\n        <span>&nbsp;&&nbsp;</span>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"schema.maxLength !== undefined\">\r\n        <code>{{ '<= ' + schema.maxLength + ' character(s)' }}</code>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n})\r\nexport class StringLengthComponent {\r\n  @Input({ required: true }) schema!: Exclude<JSONSchema, true | false>;\r\n\r\n  lengthLabel = 'Length :';\r\n  \r\n  get minAndMaxLength(): boolean {\r\n    return this.schema.minLength !== undefined && this.schema.maxLength !== undefined;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "minAndMaxLength": {
                    "name": "minAndMaxLength",
                    "getSignature": {
                        "name": "minAndMaxLength",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 30
                    }
                }
            }
        },
        {
            "name": "ThenLabelComponent",
            "id": "component-ThenLabelComponent-34d512ce8f04ad06ce452e4567509f2f402699629bd3d30ffb1f05fa2799d0f14ad1d4fe7c259390e5e355b263c6746cb70823190a94249b0629f4836c05c511",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/then-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-then",
            "styleUrls": [],
            "styles": [],
            "template": "<strong>\n    Then\n</strong>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-then',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <strong>\r\n        Then\r\n    </strong>\r\n  `,\r\n})\r\nexport class ThenLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TrueLabelComponent",
            "id": "component-TrueLabelComponent-b52b6d157d399d403ed1f93db78f215725108921dd1920f3006aa0faf48d136b80ce0c77549a33c1606699cd8bdc07fc3f6ba15ea8c0d8b192ce8d55e71fc257",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/true-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-true",
            "styleUrls": [],
            "styles": [],
            "template": "<span style=\"opacity: 0.6\">\n  any\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-true',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <span style=\"opacity: 0.6\">\r\n      any\r\n    </span>\r\n  `,\r\n})\r\nexport class TrueLabelComponent {}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TypeLabelComponent",
            "id": "component-TypeLabelComponent-1856071c0450015c4e78f2c2f655b72359e38197ded75365c2ddf2de5b7bbdc52f2693f58025dc380a5554bfe8dcc9154cd7da91c56f68494c865cfb7393c17e",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/type-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-type",
            "styleUrls": [],
            "styles": [],
            "template": "<strong>\n  type\n</strong>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-type',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <strong>\r\n      type\r\n    </strong>\r\n  `,\r\n})\r\nexport class TypeLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TypeLabelSwitchComponent",
            "id": "component-TypeLabelSwitchComponent-9061b0d202ad893965ce56245bf0e0352a310274915e9ae8ccd2665a74c3e3928f35bc67963e56f6934b026f1897e95f9076e9fa463885e88ca50e682004685c",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/type-label-switch.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jsv-type-label-switch",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container [ngSwitch]=\"type\">\n  <ng-container *ngSwitchCase=\"'string'\">\n    <labels-string />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'number'\">\n    <labels-number />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'boolean'\">\n    <labels-boolean />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'object'\">\n    <labels-object />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'array'\">\n    <labels-array />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'integer'\">\n    <labels-integer />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'null'\">\n    <labels-null />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"true\">\n    <labels-true />\n  </ng-container>\n  <ng-container *ngSwitchCase=\"false\">\n    <labels-false />\n  </ng-container>\n  <ng-container *ngSwitchDefault>\n    <span style=\"opacity: 0.6\">{{ type }}</span>\n  </ng-container>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 69,
                    "type": "TypeValues |  |  | string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "StringLabelComponent",
                    "type": "component"
                },
                {
                    "name": "NumberLabelComponent",
                    "type": "component"
                },
                {
                    "name": "BooleanLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ObjectLabelComponent",
                    "type": "component"
                },
                {
                    "name": "ArrayLabelComponent",
                    "type": "component"
                },
                {
                    "name": "IntegerLabelComponent",
                    "type": "component"
                },
                {
                    "name": "NullLabelComponent",
                    "type": "component"
                },
                {
                    "name": "TrueLabelComponent",
                    "type": "component"
                },
                {
                    "name": "FalseLabelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n    StringLabelComponent,\r\n    NumberLabelComponent,\r\n    BooleanLabelComponent,\r\n    ObjectLabelComponent,\r\n    ArrayLabelComponent,\r\n    IntegerLabelComponent,\r\n    NullLabelComponent,\r\n    TrueLabelComponent,\r\n    FalseLabelComponent\r\n} from \"../labels/index\";\r\n\r\nimport type { TypeValues } from \"../types\"\r\n\r\n@Component({\r\n  selector: 'jsv-type-label-switch',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    StringLabelComponent,\r\n    NumberLabelComponent,\r\n    BooleanLabelComponent,\r\n    ObjectLabelComponent,\r\n    ArrayLabelComponent,\r\n    IntegerLabelComponent,\r\n    NullLabelComponent,\r\n    TrueLabelComponent,\r\n    FalseLabelComponent\r\n  ],\r\n  template: `\r\n    <ng-container [ngSwitch]=\"type\">\r\n      <ng-container *ngSwitchCase=\"'string'\">\r\n        <labels-string />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'number'\">\r\n        <labels-number />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'boolean'\">\r\n        <labels-boolean />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'object'\">\r\n        <labels-object />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'array'\">\r\n        <labels-array />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'integer'\">\r\n        <labels-integer />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'null'\">\r\n        <labels-null />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"true\">\r\n        <labels-true />\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"false\">\r\n        <labels-false />\r\n      </ng-container>\r\n      <ng-container *ngSwitchDefault>\r\n        <span style=\"opacity: 0.6\">{{ type }}</span>\r\n      </ng-container>\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class TypeLabelSwitchComponent {\r\n  @Input({ required: true }) type!: TypeValues | true | false | string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "WriteOnlyComponent",
            "id": "component-WriteOnlyComponent-94f7b8076f0970fd5bd9eb4bc785338d7a4258469c36149631e7548c244ef9f522fb839d5fb4662f895726a9b4a181b4fed3556d537b940a9ac8edfb77bb02d6",
            "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/writeOnly.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qm-write-only",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  🚨&nbsp;\n  <strong>{{ writeOnlyLabel }}</strong>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "writeOnlyLabel",
                    "defaultValue": "'write only'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'qm-write-only',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <div>\r\n      🚨&nbsp;\r\n      <strong>{{ writeOnlyLabel }}</strong>\r\n    </div>\r\n  `,\r\n})\r\nexport class WriteOnlyComponent {\r\n  writeOnlyLabel = 'write only';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "WriteOnlyLabelComponent",
            "id": "component-WriteOnlyLabelComponent-4d74a7300d949f4200ec1d8e5e000c9e8ca31232debac3a5454d25866fcdc74cc0dd95618667d54ff623bb459e4a947f3081ce182884436cd237c84f3468e5eb",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/WriteOnly/write-only-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-write-only",
            "styleUrls": [
                "./write-only-label.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./write-only-label.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-write-only',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './write-only-label.component.html',\r\n  styleUrls: ['./write-only-label.component.css']\r\n})\r\nexport class WriteOnlyLabelComponent { }",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".writeOnly {\r\n    font-size: 90%;\r\n    color: #2d66c3;\r\n}",
                    "styleUrl": "./write-only-label.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<strong class=\"writeOnly\">\r\n    writeOnly\r\n</strong>\r\n  "
        },
        {
            "name": "XorLabelComponent",
            "id": "component-XorLabelComponent-fec3f89a7fabaf19fcfd8123d08076038c2dc466702616cd65ad5f61099f8ab79469dd813e2f1da79a0b901b497ae36f25cb9a7e672f6a2870006e0bc5724117",
            "file": "projects/ngx-json-schema-viewer/src/lib/labels/xor-label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "labels-xor",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n<strong>XOR</strong>\n<ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\n\n<ng-template #spaceTemplate>\n  &nbsp;\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgTemplateOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgTemplateOutlet } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'labels-xor',\r\n  standalone: true,\r\n  imports: [NgTemplateOutlet],\r\n  template: `\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n    <strong>XOR</strong>\r\n    <ng-container *ngTemplateOutlet=\"spaceTemplate\"></ng-container>\r\n\r\n    <ng-template #spaceTemplate>\r\n      &nbsp;\r\n    </ng-template>\r\n  `,\r\n})\r\nexport class XorLabelComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "AdditionalItems1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"❌ AdditionalItems (1)\",\r\n  schema: {\r\n      \"type\": \"array\",\r\n      \"items\": [\r\n        {\r\n          \"type\": \"integer\"\r\n        },\r\n        {\r\n          \"type\": \"string\"\r\n        }\r\n      ],\r\n      \"additionalItems\": false\r\n  }\r\n})"
            },
            {
                "name": "AdditionalItems2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"➕ AdditionalItems (2)\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"items\": [\r\n      {\r\n        \"type\": \"integer\"\r\n      },\r\n      {\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"additionalItems\": {\r\n      \"type\": \"boolean\"\r\n    }\r\n  }\r\n})"
            },
            {
                "name": "AdditionalProperties1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🗝️ AdditionalProperties (1)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        },\r\n        \"additionalProperties\": false\r\n    }\r\n})"
            },
            {
                "name": "AdditionalProperties2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🛠️ AdditionalProperties (2)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        },\r\n        \"additionalProperties\": {\r\n          \"type\": \"string\"\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "AdditionalPropertiesWithPatternProperties",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌈 AdditionalProperties with patternProperties\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"builtin\": {\r\n            \"type\": \"number\"\r\n          }\r\n        },\r\n        \"patternProperties\": {\r\n          \"^S_\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"^I_\": {\r\n            \"type\": \"integer\"\r\n          }\r\n        },\r\n        \"additionalProperties\": {\r\n          \"type\": \"string\"\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "allOf",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🤝 allOf\",\r\n    schema: {\r\n        \"allOf\": [\r\n          {\r\n            \"title\": \"Option 1\",\r\n            \"type\": \"string\"\r\n          },\r\n          {\r\n            \"title\": \"Option 2\",\r\n            \"maxLength\": 5\r\n          }\r\n        ]\r\n      }\r\n})"
            },
            {
                "name": "Annotations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"📌 Annotations\",\r\n    schema: {\r\n        \"title\": \"Match anything\",\r\n        \"description\": \"This is a *schema* that matches **anything.**\",\r\n        \"default\": \"Default value\",\r\n        \"examples\": [\r\n          \"Anything\",\r\n          4035\r\n        ],\r\n        \"deprecated\": true,\r\n        \"readOnly\": true,\r\n        \"writeOnly\": false\r\n    },\r\n    vierwerOptions: {\r\n        showExamples: true\r\n    }\r\n  })"
            },
            {
                "name": "anyOf",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌐 anyOf\",\r\n    schema: {\r\n        \"anyOf\": [\r\n          {\r\n            \"title\": \"Option 1\",\r\n            \"type\": \"string\",\r\n            \"maxLength\": 5\r\n          },\r\n          {\r\n            \"title\": \"Option 2\",\r\n            \"type\": \"number\",\r\n            \"minimum\": 0\r\n          }\r\n        ]\r\n      }\r\n})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🟦 Basic\",\r\n    schema: {\r\n        \"type\": \"string\"\r\n      }\r\n})"
            },
            {
                "name": "Booleans",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Boolean.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"✅ Boolean\",\r\n    schema: {\r\n        \"type\": \"boolean\"\r\n    }\r\n})"
            },
            {
                "name": "Const",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🧊 Const\",\r\n    schema: {\r\n        \"properties\": {\r\n          \"country\": {\r\n            \"const\": \"United States of America\"\r\n          }\r\n        }\r\n    }\r\n})"
            },
            {
                "name": "Contains",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"🍱 Contains\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"contains\": {\r\n      \"type\": \"number\"\r\n    }\r\n  }\r\n})"
            },
            {
                "name": "ContentEncoding",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"📜 ContentEncoding\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"contentEncoding\": \"base64\"\r\n      }\r\n})"
            },
            {
                "name": "ContentEncodingAndContentMediaType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"📄 ContentEncoding & ContentMediaType\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"contentEncoding\": \"base64\",\r\n        \"contentMediaType\": \"application/json\"\r\n    }\r\n})"
            },
            {
                "name": "ContentMediaType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔖 ContentMediaType\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"contentMediaType\": \"application/json\"\r\n      }\r\n})"
            },
            {
                "name": "ContentSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"📑 ContentSchema\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"contentSchema\": {\r\n          \"type\": \"object\",\r\n          \"required\": [\r\n            \"name\",\r\n            \"age\"\r\n          ]\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "defaultMeta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<NgxJsonSchemaViewerComponent>",
                "defaultValue": "{\r\n    decorators: [\r\n        moduleMetadata({\r\n            imports: [NgxJsonSchemaViewerComponent],\r\n        }),\r\n        applicationConfig({\r\n            providers: [\r\n                // BrowserAnimationsModule\r\n                provideAnimations(),\r\n                // HighlightModule \r\n                {\r\n                    provide: HIGHLIGHT_OPTIONS,\r\n                    useValue: {\r\n                        coreLibraryLoader: () => import('highlight.js/lib/core'),\r\n                        languages: {\r\n                            json: () => import('highlight.js/lib/languages/json'),\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n        })\r\n    ]\r\n}"
            },
            {
                "name": "dependentRequired1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🤞 dependencies (dependentRequired)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"billing_address\": {\r\n            \"type\": \"string\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependencies\": {\r\n          \"credit_card\": [\r\n            \"billing_address\"\r\n          ]\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "dependentRequired2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔑 dependentRequired\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"billing_address\": {\r\n            \"type\": \"string\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependentRequired\": {\r\n          \"credit_card\": [\r\n            \"billing_address\"\r\n          ]\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "dependentRequired3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔁 dependentRequired (bidirectional)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"billing_address\": {\r\n            \"type\": \"string\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependentRequired\": {\r\n          \"credit_card\": [\r\n            \"billing_address\"\r\n          ],\r\n          \"billing_address\": [\r\n            \"credit_card\"\r\n          ]\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "dependentSchemas",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🏗️ dependentSchemas\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependentSchemas\": {\r\n          \"credit_card\": {\r\n            \"properties\": {\r\n              \"billing_address\": {\r\n                \"type\": \"string\"\r\n              }\r\n            },\r\n            \"required\": [\r\n              \"billing_address\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "dependentSchemas1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌳 dependencies (dependentSchemas)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependencies\": {\r\n          \"credit_card\": {\r\n            \"properties\": {\r\n              \"billing_address\": {\r\n                \"type\": \"string\"\r\n              }\r\n            },\r\n            \"required\": [\r\n              \"billing_address\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "Enum",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔒 Enum\",\r\n    schema: {\r\n        \"enum\": [\r\n          \"red\",\r\n          \"amber\",\r\n          \"green\"\r\n        ]\r\n    }\r\n})"
            },
            {
                "name": "Format",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"📅 Format\",\r\n    schema: {\r\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"prop1\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"date-time\",\r\n            \"examples\": [\r\n              \"2018-11-13T20:20:39+00:00\"\r\n            ]\r\n          },\r\n          \"prop2\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"time\",\r\n            \"examples\": [\r\n              \"20:20:39+00:00\"\r\n            ]\r\n          },\r\n          \"prop3\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"date\",\r\n            \"examples\": [\r\n              \"2018-11-13\"\r\n            ]\r\n          },\r\n          \"prop4\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"duration\",\r\n            \"examples\": [\r\n              \"P3D\"\r\n            ]\r\n          },\r\n          \"prop5\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"email\",\r\n            \"examples\": [\r\n              \"test@gmail.com\"\r\n            ]\r\n          },\r\n          \"prop6\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"idn-email\",\r\n            \"examples\": [\r\n              \"test@gmail.com\"\r\n            ]\r\n          },\r\n          \"prop7\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"hostname\",\r\n            \"examples\": [\r\n              \"example\"\r\n            ]\r\n          },\r\n          \"prop8\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"idn-hostname\",\r\n            \"examples\": [\r\n              \"example\"\r\n            ]\r\n          },\r\n          \"prop9\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"ipv4\",\r\n            \"examples\": [\r\n              \"192.168.1.1\"\r\n            ]\r\n          },\r\n          \"prop10\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"ipv6\",\r\n            \"examples\": [\r\n              \"2001:db8:3333:4444:5555:6666:7777:8888\"\r\n            ]\r\n          },\r\n          \"prop11\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uuid\",\r\n            \"examples\": [\r\n              \"3e4666bf-d5e5-4aa7-b8ce-cefe41c7568a\"\r\n            ]\r\n          },\r\n          \"prop12\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uri\",\r\n            \"examples\": [\r\n              \"https://www.perdu.com/\"\r\n            ]\r\n          },\r\n          \"prop12B\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uri-reference\"\r\n          },\r\n          \"prop13\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"iri\",\r\n            \"examples\": [\r\n              \"https://www.perdu.com/\"\r\n            ]\r\n          },\r\n          \"prop13B\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"iri-reference\"\r\n          },\r\n          \"prop14\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uri-template\"\r\n          },\r\n          \"prop15\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"json-pointer\"\r\n          },\r\n          \"prop16\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"relative-json-pointer\"\r\n          },\r\n          \"prop17\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"regex\",\r\n            \"examples\": [\r\n              \"^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "IfThenElse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🎬 If-Then-Else\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"street_address\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"country\": {\r\n            \"default\": \"United States of America\",\r\n            \"enum\": [\r\n              \"United States of America\",\r\n              \"Canada\"\r\n            ]\r\n          }\r\n        },\r\n        \"if\": {\r\n          \"properties\": {\r\n            \"country\": {\r\n              \"const\": \"United States of America\"\r\n            }\r\n          }\r\n        },\r\n        \"then\": {\r\n          \"properties\": {\r\n            \"postal_code\": {\r\n              \"pattern\": \"[0-9]{5}(-[0-9]{4})?\"\r\n            }\r\n          }\r\n        },\r\n        \"else\": {\r\n          \"properties\": {\r\n            \"postal_code\": {\r\n              \"pattern\": \"[A-Z][0-9][A-Z] [0-9][A-Z][0-9]\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "IfThenElse2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔀 If-Then-Else (multiple)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"street_address\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"country\": {\r\n            \"default\": \"United States of America\",\r\n            \"enum\": [\r\n              \"United States of America\",\r\n              \"Canada\",\r\n              \"Netherlands\"\r\n            ]\r\n          }\r\n        },\r\n        \"allOf\": [\r\n          {\r\n            \"title\": \"Rule 1\",\r\n            \"if\": {\r\n              \"properties\": {\r\n                \"country\": {\r\n                  \"const\": \"United States of America\"\r\n                }\r\n              }\r\n            },\r\n            \"then\": {\r\n              \"properties\": {\r\n                \"postal_code\": {\r\n                  \"pattern\": \"[0-9]{5}(-[0-9]{4})?\"\r\n                }\r\n              }\r\n            }\r\n          },\r\n          {\r\n            \"title\": \"Rule 2\",\r\n            \"if\": {\r\n              \"properties\": {\r\n                \"country\": {\r\n                  \"const\": \"Canada\"\r\n                }\r\n              },\r\n              \"required\": [\r\n                \"country\"\r\n              ]\r\n            },\r\n            \"then\": {\r\n              \"properties\": {\r\n                \"postal_code\": {\r\n                  \"pattern\": \"[A-Z][0-9][A-Z] [0-9][A-Z][0-9]\"\r\n                }\r\n              }\r\n            }\r\n          },\r\n          {\r\n            \"title\": \"Rule 3\",\r\n            \"if\": {\r\n              \"properties\": {\r\n                \"country\": {\r\n                  \"const\": \"Netherlands\"\r\n                }\r\n              },\r\n              \"required\": [\r\n                \"country\"\r\n              ]\r\n            },\r\n            \"then\": {\r\n              \"properties\": {\r\n                \"postal_code\": {\r\n                  \"pattern\": \"[0-9]{4} [A-Z]{2}\"\r\n                }\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      }\r\n})"
            },
            {
                "name": "Integer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"1️⃣ Integer\",\r\n    schema: {\r\n        \"type\": \"integer\"\r\n    }\r\n})"
            },
            {
                "name": "isArrayType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"array\" ||\r\n      schema.items !== undefined ||\r\n      schema.minItems !== undefined ||\r\n      schema.maxItems !== undefined ||\r\n      schema.additionalItems !== undefined ||\r\n      schema.contains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).minContains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).maxContains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).prefixItems !== undefined ||\r\n      (schema as JSONSchemaNS.Array).unevaluatedItems !== undefined ||\r\n      Array.isArray(schema.const) ||\r\n      schema.enum?.some((s) => Array.isArray(s)))"
            },
            {
                "name": "isBoolean",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"boolean\" ||\r\n      schema.enum?.some((val) => typeof val === \"boolean\") ||\r\n      typeof schema.const === \"boolean\")"
            },
            {
                "name": "isInteger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"integer\" ||\r\n      schema.multipleOf === 1 ||\r\n      schema.enum?.some((val) => typeof val === \"bigint\") ||\r\n      typeof schema.const === \"bigint\")"
            },
            {
                "name": "isNull",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"null\" ||\r\n      schema.enum?.some((val) => val === null) ||\r\n      schema.const === null)"
            },
            {
                "name": "isNumeric",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"number\" ||\r\n      schema.multipleOf !== undefined ||\r\n      schema.minimum !== undefined ||\r\n      schema.exclusiveMinimum !== undefined ||\r\n      schema.maximum !== undefined ||\r\n      schema.exclusiveMaximum !== undefined ||\r\n      schema.enum?.some((val) => typeof val === \"number\") ||\r\n      typeof schema.const === \"number\")"
            },
            {
                "name": "isObjectType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"object\" ||\r\n      schema.properties !== undefined ||\r\n      schema.additionalProperties !== undefined ||\r\n      schema.patternProperties !== undefined ||\r\n      schema.propertyNames !== undefined ||\r\n      schema.minProperties !== undefined ||\r\n      schema.maxProperties !== undefined ||\r\n      schema.required !== undefined ||\r\n      (schema as JSONSchemaNS.Object).unevaluatedProperties !== undefined)"
            },
            {
                "name": "isSchemaComposition",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.allOf !== undefined ||\r\n      schema.anyOf !== undefined ||\r\n      schema.oneOf !== undefined ||\r\n      schema.not !== undefined)"
            },
            {
                "name": "isSchemaConditional",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.if !== undefined ||\r\n      schema.dependencies !== undefined ||\r\n      (schema as JSONSchemaNS.Object).dependentRequired !== undefined ||\r\n      (schema as JSONSchemaNS.Object).dependentSchemas !== undefined)"
            },
            {
                "name": "isStringType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"string\" ||\r\n      schema.minLength !== undefined ||\r\n      schema.maxLength !== undefined ||\r\n      schema.pattern !== undefined ||\r\n      schema.enum?.some((val) => typeof val === \"string\") ||\r\n      typeof schema.const === \"string\")"
            },
            {
                "name": "Items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"🛍️ Items\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"items\": {\r\n      \"type\": \"number\"\r\n    }\r\n  }\r\n})"
            },
            {
                "name": "Length",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"📐 Length\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"minItems\": 2,\r\n    \"maxItems\": 3\r\n  }\r\n})"
            },
            {
                "name": "Length",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"📏 Length\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"minLength\": 2,\r\n        \"maxLength\": 3\r\n      }\r\n})"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Array\"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Boolean.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Boolean\"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Generic keywords\"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Null.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Null\"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Numeric \"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Object\"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Schema Composition\"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Schema Conditionally\"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/String\"\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaViewer",
                "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Type\"\r\n}"
            },
            {
                "name": "minContainsAndmaxContains",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"📊 minContains & maxContains\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"contains\": {\r\n      \"type\": \"number\"\r\n    },\r\n    \"minContains\": 2,\r\n    \"maxContains\": 3\r\n  }\r\n})"
            },
            {
                "name": "MultipleOf",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"✖️ Multiple Of\",\r\n    schema: {\r\n        \"type\": \"number\",\r\n        \"multipleOf\": 10\r\n    }\r\n})"
            },
            {
                "name": "MultipleTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🐾 Multiple types\",\r\n    schema: {\r\n        \"type\": [\r\n          \"number\",\r\n          \"string\"\r\n        ]\r\n      }\r\n})"
            },
            {
                "name": "not",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🚫 not\",\r\n    schema: {\r\n        \"title\": \"Not a string\",\r\n        \"not\": {\r\n            \"type\": \"string\"\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "Null",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Null.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🕳️ Null\",\r\n    schema: {\r\n        \"type\": \"null\"\r\n    }\r\n  })"
            },
            {
                "name": "Number",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔢 Number\",\r\n    schema: {\r\n        \"type\": \"number\"\r\n    }\r\n})"
            },
            {
                "name": "oneOf",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🎯 oneOf\",\r\n    schema: {\r\n        \"oneOf\": [\r\n          {\r\n            \"title\": \"Option 1\",\r\n            \"type\": \"number\",\r\n            \"multipleOf\": 5\r\n          },\r\n          {\r\n            \"title\": \"Option 2\",\r\n            \"type\": \"number\",\r\n            \"multipleOf\": 3\r\n          }\r\n        ]\r\n      }\r\n})"
            },
            {
                "name": "Pattern",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔮 Pattern\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"pattern\": \"^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$\"\r\n      }\r\n})"
            },
            {
                "name": "PatternProperties",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🎨 PatternProperties\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"patternProperties\": {\r\n          \"^S_\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"^I_\": {\r\n            \"type\": \"integer\"\r\n          }\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\r\n  parameters: {\r\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/,\r\n      },\r\n    },\r\n    docs: {\r\n      theme: themes.dark,\r\n    }\r\n  },\r\n  decorators: [\r\n    // https://material.angular.io/guide/theming#application-background-color\r\n    componentWrapperDecorator((story) => `<div class=\"mat-app-background\">${story}</div>`),\r\n  ]\r\n}"
            },
            {
                "name": "Properties",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"📝 Properties\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "PropertyNames",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🏷️ PropertyNames\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"propertyNames\": {\r\n          \"pattern\": \"^[A-Za-z_][A-Za-z0-9_]*$\"\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "Ranges",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌡️ Ranges\",\r\n    schema: {\r\n        \"type\": \"number\",\r\n        \"minimum\": 0,\r\n        \"exclusiveMaximum\": 100\r\n    }\r\n})"
            },
            {
                "name": "Required",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔴 Required\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"id\": {\r\n            \"type\": \"number\",\r\n            \"readOnly\": true\r\n          },\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"email\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"address\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"telephone\": {\r\n            \"type\": \"string\",\r\n            \"deprecated\": true\r\n          },\r\n          \"password\": {\r\n            \"type\": \"string\",\r\n            \"writeOnly\": true\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\",\r\n          \"email\"\r\n        ]\r\n      }\r\n})"
            },
            {
                "name": "Simple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"🟦 Simple\",\r\n  schema: {\r\n    \"type\": \"array\"\r\n  }\r\n})"
            },
            {
                "name": "Simple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🟦 Simple\",\r\n    schema: {\r\n        \"type\": \"object\"\r\n      }\r\n})"
            },
            {
                "name": "SingleTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌟 Single type\",\r\n    schema: {\r\n        \"type\": \"number\"\r\n      }\r\n})"
            },
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"📏 Size\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"minProperties\": 2,\r\n        \"maxProperties\": 3\r\n      }\r\n})"
            },
            {
                "name": "Tuples",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"📋 Tuples\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"description\": \"Represent a street address such as ['1600','Pennsylvania','Avenue','NW']\",\r\n    \"items\": false,\r\n    \"prefixItems\": [\r\n      {\r\n        \"type\": \"number\",\r\n        \"description\": \"The address number\"\r\n      },\r\n      {\r\n        \"type\": \"string\",\r\n        \"description\": \"The name of the street\"\r\n      },\r\n      {\r\n        \"enum\": [\r\n          \"Street\",\r\n          \"Avenue\",\r\n          \"Boulevard\"\r\n        ],\r\n        \"description\": \"The type of street\"\r\n      },\r\n      {\r\n        \"enum\": [\r\n          \"NW\",\r\n          \"NE\",\r\n          \"SW\",\r\n          \"SE\"\r\n        ],\r\n        \"description\": \"The city quadrant of the address\"\r\n      }\r\n    ]\r\n  }\r\n})"
            },
            {
                "name": "UnevaluatedItems1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"🤔 UnevaluatedItems (1)\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"prefixItems\": [\r\n      {\r\n        \"type\": \"integer\"\r\n      },\r\n      {\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"unevaluatedItems\": false\r\n  }\r\n})"
            },
            {
                "name": "UnevaluatedItems2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"📋 UnevaluatedItems (2)\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"prefixItems\": [\r\n      {\r\n        \"type\": \"integer\"\r\n      },\r\n      {\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"unevaluatedItems\": {\r\n      \"type\": \"boolean\"\r\n    }\r\n  }\r\n})"
            },
            {
                "name": "UnevaluatedProperties1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🧐 UnevaluatedProperties (1)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        },\r\n        \"unevaluatedProperties\": false\r\n      }\r\n})"
            },
            {
                "name": "UnevaluatedProperties2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n    \"storybook-name\": \"🕵️‍♀️ UnevaluatedProperties (2)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        },\r\n        \"unevaluatedProperties\": {\r\n          \"type\": \"boolean\"\r\n        }\r\n      }\r\n})"
            },
            {
                "name": "UniqueItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createStory({\r\n  \"storybook-name\": \"🦄 Unique items\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"uniqueItems\": true\r\n  }\r\n})"
            }
        ],
        "functions": [
            {
                "name": "createStory",
                "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "params",
                        "type": "Params",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Story",
                "jsdoctags": [
                    {
                        "name": "params",
                        "type": "Params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "detectedTypes",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "schema",
                        "type": "Exclude",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "TypeValues[]",
                "jsdoctags": [
                    {
                        "name": "schema",
                        "type": "Exclude",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "foundUndeclaredTypes",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "schema",
                        "type": "Exclude",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Generator<TypeValues, void>",
                "jsdoctags": [
                    {
                        "name": "schema",
                        "type": "Exclude",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "CheckKey",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"nullable\" | \"deprecated\" | \"readOnly\" | \"writeOnly\" | \"enum\" | \"stringLength\" | \"objectProperties\" | \"no-extra-properties\" | \"arrayItems\" | \"arrayContains\" | \"no-extra-items\" | \"number-range\" | \"pattern\" | \"multipleOf\" | \"uniqueItems\" | \"default\" | \"const\" | \"examples\" | \"contentMediaType\" | \"contentEncoding\" | \"contentSchema\"",
                "file": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "ComponentProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "NgxJsonSchemaViewerComponent",
                "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "itemsType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type[]",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/examples.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "JSONSchema",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Draft_07 | Draft_2019_09 | Draft_2020_12",
                "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "JSONSchema_Draft_07",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Draft_07",
                "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "JSONSchema_Draft_2019_09",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Draft_2019_09",
                "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "JSONSchema_Draft_2020_12",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Draft_2020_12",
                "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "JSVOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "LinkType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"AND\" | \"OR\" | \"XOR\"",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name-fallback.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "MetaViewer",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Meta<NgxJsonSchemaViewerComponent>",
                "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Params",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "StatusType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"LOADING\" | \"ERROR\" | \"DONE\"",
                "file": "projects/ngx-json-schema-viewer/src/lib/ngx-json-schema-viewer.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<NgxJsonSchemaViewerComponent>",
                "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "typedJSONArraySchema",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "JSONSchemaNS.Array",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-contains-number.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "typedJSONArraySchema",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "JSONSchemaNS.Array",
                "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-number-of-items.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "TypeValues",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " `${TypeName}`",
                "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 200
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts": [
                {
                    "name": "AdditionalItems1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"❌ AdditionalItems (1)\",\r\n  schema: {\r\n      \"type\": \"array\",\r\n      \"items\": [\r\n        {\r\n          \"type\": \"integer\"\r\n        },\r\n        {\r\n          \"type\": \"string\"\r\n        }\r\n      ],\r\n      \"additionalItems\": false\r\n  }\r\n})"
                },
                {
                    "name": "AdditionalItems2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"➕ AdditionalItems (2)\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"items\": [\r\n      {\r\n        \"type\": \"integer\"\r\n      },\r\n      {\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"additionalItems\": {\r\n      \"type\": \"boolean\"\r\n    }\r\n  }\r\n})"
                },
                {
                    "name": "Contains",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"🍱 Contains\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"contains\": {\r\n      \"type\": \"number\"\r\n    }\r\n  }\r\n})"
                },
                {
                    "name": "Items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"🛍️ Items\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"items\": {\r\n      \"type\": \"number\"\r\n    }\r\n  }\r\n})"
                },
                {
                    "name": "Length",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"📐 Length\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"minItems\": 2,\r\n    \"maxItems\": 3\r\n  }\r\n})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Array\"\r\n}"
                },
                {
                    "name": "minContainsAndmaxContains",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"📊 minContains & maxContains\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"contains\": {\r\n      \"type\": \"number\"\r\n    },\r\n    \"minContains\": 2,\r\n    \"maxContains\": 3\r\n  }\r\n})"
                },
                {
                    "name": "Simple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"🟦 Simple\",\r\n  schema: {\r\n    \"type\": \"array\"\r\n  }\r\n})"
                },
                {
                    "name": "Tuples",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"📋 Tuples\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"description\": \"Represent a street address such as ['1600','Pennsylvania','Avenue','NW']\",\r\n    \"items\": false,\r\n    \"prefixItems\": [\r\n      {\r\n        \"type\": \"number\",\r\n        \"description\": \"The address number\"\r\n      },\r\n      {\r\n        \"type\": \"string\",\r\n        \"description\": \"The name of the street\"\r\n      },\r\n      {\r\n        \"enum\": [\r\n          \"Street\",\r\n          \"Avenue\",\r\n          \"Boulevard\"\r\n        ],\r\n        \"description\": \"The type of street\"\r\n      },\r\n      {\r\n        \"enum\": [\r\n          \"NW\",\r\n          \"NE\",\r\n          \"SW\",\r\n          \"SE\"\r\n        ],\r\n        \"description\": \"The city quadrant of the address\"\r\n      }\r\n    ]\r\n  }\r\n})"
                },
                {
                    "name": "UnevaluatedItems1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"🤔 UnevaluatedItems (1)\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"prefixItems\": [\r\n      {\r\n        \"type\": \"integer\"\r\n      },\r\n      {\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"unevaluatedItems\": false\r\n  }\r\n})"
                },
                {
                    "name": "UnevaluatedItems2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"📋 UnevaluatedItems (2)\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"prefixItems\": [\r\n      {\r\n        \"type\": \"integer\"\r\n      },\r\n      {\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"unevaluatedItems\": {\r\n      \"type\": \"boolean\"\r\n    }\r\n  }\r\n})"
                },
                {
                    "name": "UniqueItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n  \"storybook-name\": \"🦄 Unique items\",\r\n  schema: {\r\n    \"type\": \"array\",\r\n    \"uniqueItems\": true\r\n  }\r\n})"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts": [
                {
                    "name": "AdditionalProperties1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🗝️ AdditionalProperties (1)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        },\r\n        \"additionalProperties\": false\r\n    }\r\n})"
                },
                {
                    "name": "AdditionalProperties2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🛠️ AdditionalProperties (2)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        },\r\n        \"additionalProperties\": {\r\n          \"type\": \"string\"\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "AdditionalPropertiesWithPatternProperties",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌈 AdditionalProperties with patternProperties\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"builtin\": {\r\n            \"type\": \"number\"\r\n          }\r\n        },\r\n        \"patternProperties\": {\r\n          \"^S_\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"^I_\": {\r\n            \"type\": \"integer\"\r\n          }\r\n        },\r\n        \"additionalProperties\": {\r\n          \"type\": \"string\"\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Object\"\r\n}"
                },
                {
                    "name": "PatternProperties",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🎨 PatternProperties\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"patternProperties\": {\r\n          \"^S_\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"^I_\": {\r\n            \"type\": \"integer\"\r\n          }\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "Properties",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"📝 Properties\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "PropertyNames",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🏷️ PropertyNames\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"propertyNames\": {\r\n          \"pattern\": \"^[A-Za-z_][A-Za-z0-9_]*$\"\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "Required",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔴 Required\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"id\": {\r\n            \"type\": \"number\",\r\n            \"readOnly\": true\r\n          },\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"email\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"address\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"telephone\": {\r\n            \"type\": \"string\",\r\n            \"deprecated\": true\r\n          },\r\n          \"password\": {\r\n            \"type\": \"string\",\r\n            \"writeOnly\": true\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\",\r\n          \"email\"\r\n        ]\r\n      }\r\n})"
                },
                {
                    "name": "Simple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🟦 Simple\",\r\n    schema: {\r\n        \"type\": \"object\"\r\n      }\r\n})"
                },
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"📏 Size\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"minProperties\": 2,\r\n        \"maxProperties\": 3\r\n      }\r\n})"
                },
                {
                    "name": "UnevaluatedProperties1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🧐 UnevaluatedProperties (1)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        },\r\n        \"unevaluatedProperties\": false\r\n      }\r\n})"
                },
                {
                    "name": "UnevaluatedProperties2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🕵️‍♀️ UnevaluatedProperties (2)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"number\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"street_name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"street_type\": {\r\n            \"enum\": [\r\n              \"Street\",\r\n              \"Avenue\",\r\n              \"Boulevard\"\r\n            ]\r\n          }\r\n        },\r\n        \"unevaluatedProperties\": {\r\n          \"type\": \"boolean\"\r\n        }\r\n      }\r\n})"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts": [
                {
                    "name": "allOf",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🤝 allOf\",\r\n    schema: {\r\n        \"allOf\": [\r\n          {\r\n            \"title\": \"Option 1\",\r\n            \"type\": \"string\"\r\n          },\r\n          {\r\n            \"title\": \"Option 2\",\r\n            \"maxLength\": 5\r\n          }\r\n        ]\r\n      }\r\n})"
                },
                {
                    "name": "anyOf",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌐 anyOf\",\r\n    schema: {\r\n        \"anyOf\": [\r\n          {\r\n            \"title\": \"Option 1\",\r\n            \"type\": \"string\",\r\n            \"maxLength\": 5\r\n          },\r\n          {\r\n            \"title\": \"Option 2\",\r\n            \"type\": \"number\",\r\n            \"minimum\": 0\r\n          }\r\n        ]\r\n      }\r\n})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Schema Composition\"\r\n}"
                },
                {
                    "name": "not",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🚫 not\",\r\n    schema: {\r\n        \"title\": \"Not a string\",\r\n        \"not\": {\r\n            \"type\": \"string\"\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "oneOf",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🎯 oneOf\",\r\n    schema: {\r\n        \"oneOf\": [\r\n          {\r\n            \"title\": \"Option 1\",\r\n            \"type\": \"number\",\r\n            \"multipleOf\": 5\r\n          },\r\n          {\r\n            \"title\": \"Option 2\",\r\n            \"type\": \"number\",\r\n            \"multipleOf\": 3\r\n          }\r\n        ]\r\n      }\r\n})"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts": [
                {
                    "name": "Annotations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"📌 Annotations\",\r\n    schema: {\r\n        \"title\": \"Match anything\",\r\n        \"description\": \"This is a *schema* that matches **anything.**\",\r\n        \"default\": \"Default value\",\r\n        \"examples\": [\r\n          \"Anything\",\r\n          4035\r\n        ],\r\n        \"deprecated\": true,\r\n        \"readOnly\": true,\r\n        \"writeOnly\": false\r\n    },\r\n    vierwerOptions: {\r\n        showExamples: true\r\n    }\r\n  })"
                },
                {
                    "name": "Const",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🧊 Const\",\r\n    schema: {\r\n        \"properties\": {\r\n          \"country\": {\r\n            \"const\": \"United States of America\"\r\n          }\r\n        }\r\n    }\r\n})"
                },
                {
                    "name": "Enum",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔒 Enum\",\r\n    schema: {\r\n        \"enum\": [\r\n          \"red\",\r\n          \"amber\",\r\n          \"green\"\r\n        ]\r\n    }\r\n})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Generic keywords\"\r\n}"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/String.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🟦 Basic\",\r\n    schema: {\r\n        \"type\": \"string\"\r\n      }\r\n})"
                },
                {
                    "name": "ContentEncoding",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"📜 ContentEncoding\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"contentEncoding\": \"base64\"\r\n      }\r\n})"
                },
                {
                    "name": "ContentEncodingAndContentMediaType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"📄 ContentEncoding & ContentMediaType\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"contentEncoding\": \"base64\",\r\n        \"contentMediaType\": \"application/json\"\r\n    }\r\n})"
                },
                {
                    "name": "ContentMediaType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔖 ContentMediaType\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"contentMediaType\": \"application/json\"\r\n      }\r\n})"
                },
                {
                    "name": "ContentSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"📑 ContentSchema\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"contentSchema\": {\r\n          \"type\": \"object\",\r\n          \"required\": [\r\n            \"name\",\r\n            \"age\"\r\n          ]\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "Format",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"📅 Format\",\r\n    schema: {\r\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"prop1\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"date-time\",\r\n            \"examples\": [\r\n              \"2018-11-13T20:20:39+00:00\"\r\n            ]\r\n          },\r\n          \"prop2\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"time\",\r\n            \"examples\": [\r\n              \"20:20:39+00:00\"\r\n            ]\r\n          },\r\n          \"prop3\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"date\",\r\n            \"examples\": [\r\n              \"2018-11-13\"\r\n            ]\r\n          },\r\n          \"prop4\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"duration\",\r\n            \"examples\": [\r\n              \"P3D\"\r\n            ]\r\n          },\r\n          \"prop5\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"email\",\r\n            \"examples\": [\r\n              \"test@gmail.com\"\r\n            ]\r\n          },\r\n          \"prop6\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"idn-email\",\r\n            \"examples\": [\r\n              \"test@gmail.com\"\r\n            ]\r\n          },\r\n          \"prop7\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"hostname\",\r\n            \"examples\": [\r\n              \"example\"\r\n            ]\r\n          },\r\n          \"prop8\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"idn-hostname\",\r\n            \"examples\": [\r\n              \"example\"\r\n            ]\r\n          },\r\n          \"prop9\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"ipv4\",\r\n            \"examples\": [\r\n              \"192.168.1.1\"\r\n            ]\r\n          },\r\n          \"prop10\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"ipv6\",\r\n            \"examples\": [\r\n              \"2001:db8:3333:4444:5555:6666:7777:8888\"\r\n            ]\r\n          },\r\n          \"prop11\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uuid\",\r\n            \"examples\": [\r\n              \"3e4666bf-d5e5-4aa7-b8ce-cefe41c7568a\"\r\n            ]\r\n          },\r\n          \"prop12\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uri\",\r\n            \"examples\": [\r\n              \"https://www.perdu.com/\"\r\n            ]\r\n          },\r\n          \"prop12B\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uri-reference\"\r\n          },\r\n          \"prop13\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"iri\",\r\n            \"examples\": [\r\n              \"https://www.perdu.com/\"\r\n            ]\r\n          },\r\n          \"prop13B\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"iri-reference\"\r\n          },\r\n          \"prop14\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uri-template\"\r\n          },\r\n          \"prop15\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"json-pointer\"\r\n          },\r\n          \"prop16\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"relative-json-pointer\"\r\n          },\r\n          \"prop17\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"regex\",\r\n            \"examples\": [\r\n              \"^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "Length",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"📏 Length\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"minLength\": 2,\r\n        \"maxLength\": 3\r\n      }\r\n})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/String\"\r\n}"
                },
                {
                    "name": "Pattern",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔮 Pattern\",\r\n    schema: {\r\n        \"type\": \"string\",\r\n        \"pattern\": \"^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$\"\r\n      }\r\n})"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/Boolean.stories.ts": [
                {
                    "name": "Booleans",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Boolean.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"✅ Boolean\",\r\n    schema: {\r\n        \"type\": \"boolean\"\r\n    }\r\n})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Boolean.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Boolean\"\r\n}"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/setup.ts": [
                {
                    "name": "defaultMeta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<NgxJsonSchemaViewerComponent>",
                    "defaultValue": "{\r\n    decorators: [\r\n        moduleMetadata({\r\n            imports: [NgxJsonSchemaViewerComponent],\r\n        }),\r\n        applicationConfig({\r\n            providers: [\r\n                // BrowserAnimationsModule\r\n                provideAnimations(),\r\n                // HighlightModule \r\n                {\r\n                    provide: HIGHLIGHT_OPTIONS,\r\n                    useValue: {\r\n                        coreLibraryLoader: () => import('highlight.js/lib/core'),\r\n                        languages: {\r\n                            json: () => import('highlight.js/lib/languages/json'),\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n        })\r\n    ]\r\n}"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts": [
                {
                    "name": "dependentRequired1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🤞 dependencies (dependentRequired)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"billing_address\": {\r\n            \"type\": \"string\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependencies\": {\r\n          \"credit_card\": [\r\n            \"billing_address\"\r\n          ]\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "dependentRequired2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔑 dependentRequired\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"billing_address\": {\r\n            \"type\": \"string\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependentRequired\": {\r\n          \"credit_card\": [\r\n            \"billing_address\"\r\n          ]\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "dependentRequired3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔁 dependentRequired (bidirectional)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          },\r\n          \"billing_address\": {\r\n            \"type\": \"string\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependentRequired\": {\r\n          \"credit_card\": [\r\n            \"billing_address\"\r\n          ],\r\n          \"billing_address\": [\r\n            \"credit_card\"\r\n          ]\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "dependentSchemas",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🏗️ dependentSchemas\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependentSchemas\": {\r\n          \"credit_card\": {\r\n            \"properties\": {\r\n              \"billing_address\": {\r\n                \"type\": \"string\"\r\n              }\r\n            },\r\n            \"required\": [\r\n              \"billing_address\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "dependentSchemas1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌳 dependencies (dependentSchemas)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"credit_card\": {\r\n            \"type\": \"number\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"dependencies\": {\r\n          \"credit_card\": {\r\n            \"properties\": {\r\n              \"billing_address\": {\r\n                \"type\": \"string\"\r\n              }\r\n            },\r\n            \"required\": [\r\n              \"billing_address\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "IfThenElse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🎬 If-Then-Else\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"street_address\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"country\": {\r\n            \"default\": \"United States of America\",\r\n            \"enum\": [\r\n              \"United States of America\",\r\n              \"Canada\"\r\n            ]\r\n          }\r\n        },\r\n        \"if\": {\r\n          \"properties\": {\r\n            \"country\": {\r\n              \"const\": \"United States of America\"\r\n            }\r\n          }\r\n        },\r\n        \"then\": {\r\n          \"properties\": {\r\n            \"postal_code\": {\r\n              \"pattern\": \"[0-9]{5}(-[0-9]{4})?\"\r\n            }\r\n          }\r\n        },\r\n        \"else\": {\r\n          \"properties\": {\r\n            \"postal_code\": {\r\n              \"pattern\": \"[A-Z][0-9][A-Z] [0-9][A-Z][0-9]\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n})"
                },
                {
                    "name": "IfThenElse2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔀 If-Then-Else (multiple)\",\r\n    schema: {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"street_address\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"country\": {\r\n            \"default\": \"United States of America\",\r\n            \"enum\": [\r\n              \"United States of America\",\r\n              \"Canada\",\r\n              \"Netherlands\"\r\n            ]\r\n          }\r\n        },\r\n        \"allOf\": [\r\n          {\r\n            \"title\": \"Rule 1\",\r\n            \"if\": {\r\n              \"properties\": {\r\n                \"country\": {\r\n                  \"const\": \"United States of America\"\r\n                }\r\n              }\r\n            },\r\n            \"then\": {\r\n              \"properties\": {\r\n                \"postal_code\": {\r\n                  \"pattern\": \"[0-9]{5}(-[0-9]{4})?\"\r\n                }\r\n              }\r\n            }\r\n          },\r\n          {\r\n            \"title\": \"Rule 2\",\r\n            \"if\": {\r\n              \"properties\": {\r\n                \"country\": {\r\n                  \"const\": \"Canada\"\r\n                }\r\n              },\r\n              \"required\": [\r\n                \"country\"\r\n              ]\r\n            },\r\n            \"then\": {\r\n              \"properties\": {\r\n                \"postal_code\": {\r\n                  \"pattern\": \"[A-Z][0-9][A-Z] [0-9][A-Z][0-9]\"\r\n                }\r\n              }\r\n            }\r\n          },\r\n          {\r\n            \"title\": \"Rule 3\",\r\n            \"if\": {\r\n              \"properties\": {\r\n                \"country\": {\r\n                  \"const\": \"Netherlands\"\r\n                }\r\n              },\r\n              \"required\": [\r\n                \"country\"\r\n              ]\r\n            },\r\n            \"then\": {\r\n              \"properties\": {\r\n                \"postal_code\": {\r\n                  \"pattern\": \"[0-9]{4} [A-Z]{2}\"\r\n                }\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      }\r\n})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Schema Conditionally\"\r\n}"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts": [
                {
                    "name": "Integer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"1️⃣ Integer\",\r\n    schema: {\r\n        \"type\": \"integer\"\r\n    }\r\n})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Numeric \"\r\n}"
                },
                {
                    "name": "MultipleOf",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"✖️ Multiple Of\",\r\n    schema: {\r\n        \"type\": \"number\",\r\n        \"multipleOf\": 10\r\n    }\r\n})"
                },
                {
                    "name": "Number",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🔢 Number\",\r\n    schema: {\r\n        \"type\": \"number\"\r\n    }\r\n})"
                },
                {
                    "name": "Ranges",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌡️ Ranges\",\r\n    schema: {\r\n        \"type\": \"number\",\r\n        \"minimum\": 0,\r\n        \"exclusiveMaximum\": 100\r\n    }\r\n})"
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts": [
                {
                    "name": "isArrayType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"array\" ||\r\n      schema.items !== undefined ||\r\n      schema.minItems !== undefined ||\r\n      schema.maxItems !== undefined ||\r\n      schema.additionalItems !== undefined ||\r\n      schema.contains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).minContains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).maxContains !== undefined ||\r\n      (schema as JSONSchemaNS.Array).prefixItems !== undefined ||\r\n      (schema as JSONSchemaNS.Array).unevaluatedItems !== undefined ||\r\n      Array.isArray(schema.const) ||\r\n      schema.enum?.some((s) => Array.isArray(s)))"
                },
                {
                    "name": "isBoolean",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"boolean\" ||\r\n      schema.enum?.some((val) => typeof val === \"boolean\") ||\r\n      typeof schema.const === \"boolean\")"
                },
                {
                    "name": "isInteger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"integer\" ||\r\n      schema.multipleOf === 1 ||\r\n      schema.enum?.some((val) => typeof val === \"bigint\") ||\r\n      typeof schema.const === \"bigint\")"
                },
                {
                    "name": "isNull",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"null\" ||\r\n      schema.enum?.some((val) => val === null) ||\r\n      schema.const === null)"
                },
                {
                    "name": "isNumeric",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"number\" ||\r\n      schema.multipleOf !== undefined ||\r\n      schema.minimum !== undefined ||\r\n      schema.exclusiveMinimum !== undefined ||\r\n      schema.maximum !== undefined ||\r\n      schema.exclusiveMaximum !== undefined ||\r\n      schema.enum?.some((val) => typeof val === \"number\") ||\r\n      typeof schema.const === \"number\")"
                },
                {
                    "name": "isObjectType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"object\" ||\r\n      schema.properties !== undefined ||\r\n      schema.additionalProperties !== undefined ||\r\n      schema.patternProperties !== undefined ||\r\n      schema.propertyNames !== undefined ||\r\n      schema.minProperties !== undefined ||\r\n      schema.maxProperties !== undefined ||\r\n      schema.required !== undefined ||\r\n      (schema as JSONSchemaNS.Object).unevaluatedProperties !== undefined)"
                },
                {
                    "name": "isSchemaComposition",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.allOf !== undefined ||\r\n      schema.anyOf !== undefined ||\r\n      schema.oneOf !== undefined ||\r\n      schema.not !== undefined)"
                },
                {
                    "name": "isSchemaConditional",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.if !== undefined ||\r\n      schema.dependencies !== undefined ||\r\n      (schema as JSONSchemaNS.Object).dependentRequired !== undefined ||\r\n      (schema as JSONSchemaNS.Object).dependentSchemas !== undefined)"
                },
                {
                    "name": "isStringType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(schema: JSONSchema) =>\r\n    typeof schema !== \"boolean\" &&\r\n    (schema.type === \"string\" ||\r\n      schema.minLength !== undefined ||\r\n      schema.maxLength !== undefined ||\r\n      schema.pattern !== undefined ||\r\n      schema.enum?.some((val) => typeof val === \"string\") ||\r\n      typeof schema.const === \"string\")"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/Null.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Null.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Null\"\r\n}"
                },
                {
                    "name": "Null",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Null.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🕳️ Null\",\r\n    schema: {\r\n        \"type\": \"null\"\r\n    }\r\n  })"
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaViewer",
                    "defaultValue": "{\r\n  ...defaultMeta,\r\n  title: \"Viewer/Type\"\r\n}"
                },
                {
                    "name": "MultipleTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🐾 Multiple types\",\r\n    schema: {\r\n        \"type\": [\r\n          \"number\",\r\n          \"string\"\r\n        ]\r\n      }\r\n})"
                },
                {
                    "name": "SingleTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createStory({\r\n    \"storybook-name\": \"🌟 Single type\",\r\n    schema: {\r\n        \"type\": \"number\"\r\n      }\r\n})"
                }
            ],
            "projects/ngx-json-schema-viewer/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-json-schema-viewer/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\r\n  parameters: {\r\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/,\r\n      },\r\n    },\r\n    docs: {\r\n      theme: themes.dark,\r\n    }\r\n  },\r\n  decorators: [\r\n    // https://material.angular.io/guide/theming#application-background-color\r\n    componentWrapperDecorator((story) => `<div class=\"mat-app-background\">${story}</div>`),\r\n  ]\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "projects/ngx-json-schema-viewer/src/stories/setup.ts": [
                {
                    "name": "createStory",
                    "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Story",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts": [
                {
                    "name": "detectedTypes",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "schema",
                            "type": "Exclude",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "TypeValues[]",
                    "jsdoctags": [
                        {
                            "name": "schema",
                            "type": "Exclude",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "foundUndeclaredTypes",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "schema",
                            "type": "Exclude",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Generator<TypeValues, void>",
                    "jsdoctags": [
                        {
                            "name": "schema",
                            "type": "Exclude",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts": [
                {
                    "name": "CheckKey",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"nullable\" | \"deprecated\" | \"readOnly\" | \"writeOnly\" | \"enum\" | \"stringLength\" | \"objectProperties\" | \"no-extra-properties\" | \"arrayItems\" | \"arrayContains\" | \"no-extra-items\" | \"number-range\" | \"pattern\" | \"multipleOf\" | \"uniqueItems\" | \"default\" | \"const\" | \"examples\" | \"contentMediaType\" | \"contentEncoding\" | \"contentSchema\"",
                    "file": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                },
                {
                    "name": "JSVOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/ngx-json-schema-viewer/src/stories/setup.ts": [
                {
                    "name": "ComponentProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "NgxJsonSchemaViewerComponent",
                    "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "MetaViewer",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Meta<NgxJsonSchemaViewerComponent>",
                    "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "Params",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<NgxJsonSchemaViewerComponent>",
                    "file": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/examples.ts": [
                {
                    "name": "itemsType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type[]",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/examples.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/types.ts": [
                {
                    "name": "JSONSchema",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Draft_07 | Draft_2019_09 | Draft_2020_12",
                    "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                },
                {
                    "name": "JSONSchema_Draft_07",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Draft_07",
                    "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "JSONSchema_Draft_2019_09",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Draft_2019_09",
                    "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "JSONSchema_Draft_2020_12",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Draft_2020_12",
                    "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "TypeValues",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " `${TypeName}`",
                    "file": "projects/ngx-json-schema-viewer/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 200
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name-fallback.ts": [
                {
                    "name": "LinkType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"AND\" | \"OR\" | \"XOR\"",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name-fallback.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/ngx-json-schema-viewer.component.ts": [
                {
                    "name": "StatusType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"LOADING\" | \"ERROR\" | \"DONE\"",
                    "file": "projects/ngx-json-schema-viewer/src/lib/ngx-json-schema-viewer.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-contains-number.ts": [
                {
                    "name": "typedJSONArraySchema",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "JSONSchemaNS.Array",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-contains-number.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-number-of-items.ts": [
                {
                    "name": "typedJSONArraySchema",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "JSONSchemaNS.Array",
                    "file": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-number-of-items.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ngx-json-schema-viewer/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/additional-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAdditionalItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/contains.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateContainsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/index.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateArrayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/items.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/prefix-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreatePrefixItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/array/unevaluated-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateUnevaluatedItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-always-invalid.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAlwaysInvalidComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-always-valid.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAlwaysValidComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-boolean.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateBooleanComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-description.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateDescriptionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-integer.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateIntegerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-null.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateNullComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-number.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateNumberComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/create-string.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateStringComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/additional-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAdditionalPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/index.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateObjectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/pattern-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreatePatternPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreatePropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/property-names.ts",
                "type": "component",
                "linktype": "component",
                "name": "PropertyNamesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/unevaluated-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateUnevaluatedPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/object/unlisted-required-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateUnlistedPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/all-of.ts",
                "type": "component",
                "linktype": "component",
                "name": "AllOfSchemaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/any-of.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnyOfSchemaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/index.ts",
                "type": "component",
                "linktype": "component",
                "name": "SchemaCompositionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/not.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotSchemaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaComposition/one-of.ts",
                "type": "component",
                "linktype": "component",
                "name": "OneOfSchemaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependencies.ts",
                "type": "component",
                "linktype": "component",
                "name": "DependenciesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependent-required.ts",
                "type": "component",
                "linktype": "component",
                "name": "DependentRequiredComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/dependent-schemas.ts",
                "type": "component",
                "linktype": "component",
                "name": "DependentSchemasComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/if-else-then.ts",
                "type": "component",
                "linktype": "component",
                "name": "IfElseThenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/JSONSchemaElements/schemaConditional/index.ts",
                "type": "component",
                "linktype": "component",
                "name": "SchemaConditionalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/create-edge.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateEdgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/create-nodes.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateNodesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/create-types.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateTypesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/create-valid-or-invalid.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateValidOrInvalidComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/render-multiple-types.ts",
                "type": "component",
                "linktype": "component",
                "name": "RenderMultipleTypesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/common/render-provided-type.ts",
                "type": "component",
                "linktype": "component",
                "name": "RenderProvidedTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/Deprecated/deprecated-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeprecatedLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/ReadOnly/read-only-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReadOnlyLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/Required/required-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RequiredLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/WriteOnly/write-only-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WriteOnlyLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/and-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "AndLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/array-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArrayLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/boolean-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooleanLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/else-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "ElseLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/error-occurred.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorOccurredLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/false-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "FalseLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/if-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "IfLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/integer-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "IntegerLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/loading-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/not-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/null-labels.ts",
                "type": "component",
                "linktype": "component",
                "name": "NullLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/number-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumberLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/object-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "ObjectLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/or-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/string-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "StringLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/then-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThenLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/true-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "TrueLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/type-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypeLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/labels/xor-label.ts",
                "type": "component",
                "linktype": "component",
                "name": "XorLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/ngx-json-schema-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgxJsonSchemaViewerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/services/jsv-options.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "JSVOptionsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/services/schema-resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SchemaResolutionService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/customized-array.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenerateFriendlyNameCustomArrayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/customized-name.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenerateFriendlyNameCustomComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name-fallback.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenerateFriendlyNameFallbackComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/FriendlyNames/friendly-name.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenerateFriendlyNameComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-contains-number.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArrayContainsNumberComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-number-of-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArrayNumberOfItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/array-unique-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArrayUniqueItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/constant.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConstantComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-encoding.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentEncodingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-media.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentMediaTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/content-schema.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentSchemaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/default-value.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultValueComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/deprecated.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeprecatedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/enum.ts",
                "type": "component",
                "linktype": "component",
                "name": "EnumComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/examples.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExamplesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/no-extra-items.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoExtraItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/no-extra-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoExtraPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/nullable.ts",
                "type": "component",
                "linktype": "component",
                "name": "NullableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/number-bounds.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumberBoundsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/number-multiple-of.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultipleOfComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/object-properties.ts",
                "type": "component",
                "linktype": "component",
                "name": "ObjectPropertiesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/pattern.ts",
                "type": "component",
                "linktype": "component",
                "name": "PatternComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/print-schema-type.ts",
                "type": "component",
                "linktype": "component",
                "name": "PrintSchemaTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/readOnly.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReadOnlyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/string-length.ts",
                "type": "component",
                "linktype": "component",
                "name": "StringLengthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/QualifierMessages/writeOnly.ts",
                "type": "component",
                "linktype": "component",
                "name": "WriteOnlyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "detectedTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "foundUndeclaredTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isArrayType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isBoolean",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isInteger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isNull",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isNumeric",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isObjectType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isSchemaComposition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isSchemaConditional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/detectTypes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isStringType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/qualifier-messages.ts",
                "type": "component",
                "linktype": "component",
                "name": "QualifierMessages",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/lib/utils/type-label-switch.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypeLabelSwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AdditionalItems1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AdditionalItems2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Contains",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Length",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "minContainsAndmaxContains",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Simple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tuples",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UnevaluatedItems1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UnevaluatedItems2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Arrays.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UniqueItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Boolean.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Booleans",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Boolean.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Annotations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Const",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Enum",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Generics.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Null.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Null.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Null",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Integer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleOf",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Number",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Numeric.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Ranges",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AdditionalProperties1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AdditionalProperties2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AdditionalPropertiesWithPatternProperties",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PatternProperties",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Properties",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PropertyNames",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Required",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Simple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UnevaluatedProperties1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Object.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UnevaluatedProperties2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "allOf",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "anyOf",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "not",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaComposition.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "oneOf",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dependentRequired1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dependentRequired2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dependentRequired3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dependentSchemas",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dependentSchemas1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IfThenElse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IfThenElse2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/SchemaConditionally.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ContentEncoding",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ContentEncodingAndContentMediaType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ContentMediaType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ContentSchema",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Format",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Length",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/String.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pattern",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/Type.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SingleTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-json-schema-viewer/src/stories/setup.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultMeta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}